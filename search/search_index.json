{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Confidential Computing LinuxONE Workshop","text":"<p>Welcome to our Confidential Computing LinuxONE workshop. Organizations can leverage secure execution to protect Linux\u00ae workloads on IBM zSystems and LinuxONE. This workshop will cover how to get started with this technology on-premises using Hyper Protect Virtual Servers 2.1.x.</p>"},{"location":"#agenda","title":"Agenda","text":""},{"location":"#introductory-presentations","title":"Introductory Presentations","text":"<ul> <li>Introduction to Hyper Protect Virtual Servers 2.1.x</li> </ul>"},{"location":"#lab-build-and-deploy-a-grep11-server-using-hyper-protect-virtual-servers-21x","title":"Lab: Build and Deploy a GREP11 Server Using Hyper Protect Virtual Servers 2.1.x","text":"<p>In this lab, you will deploy a Hyper Protect Virtual Servers 2.1.x GREP11 instance and connect to it to secure your transactions. 1</p>"},{"location":"#workshop-authors","title":"Workshop authors","text":"<ul> <li>Barry Silliman</li> <li>Garrett Woodworth</li> </ul> <ol> <li> <p>For the purposes of this lab, you are fulfilling the requirements of a fictional organization. These requirements could change for your specific organization but would follow a similar pattern with different specifics.\u00a0\u21a9</p> </li> </ol>"},{"location":"localdocbuild/","title":"Building the Documentation Yourself","text":"<p>For Documentation Contributors Only</p> <p>This is for people who want to update the documentation of <code>Confidential Computing LinuxONE Workshop</code> and see the updates locally or if you are a regular user and are curious on how to do it. In most cases, just accessing the documentation via this site (https://ibm-wsc.github.io/ConfidentialComputingOnLinuxONE/) is best. If you want to access the documentation without internet access, instead of following this documentation, you should navigate to the print page (which displays the documentation in printable format). Then, Print-&gt;Save to pdf in your web browser and access the PDF freely offline.</p>"},{"location":"localdocbuild/#installing-necessary-pre-requisites","title":"Installing Necessary Pre-requisites","text":"<ol> <li>Install pip3 on your computer, if it's not already installed (instructions vary depending on Operating System)</li> <li> <p>Install mkdocs and plugins used in <code>Confidential Computing LinuxONE Workshop</code> documentation</p> <pre><code>pip3 install mkdocs mkdocs-material mkdocs-git-revision-date-localized-plugin mkdocs-print-site-plugin\n</code></pre> </li> <li> <p>Get a local copy of the source code with:</p> HTTPSSSH <pre><code>git clone https://github.com/ibm-wsc/ConfidentialComputingOnLinuxONE.git\n</code></pre> <pre><code>git clone git@github.com:ibm-wsc/ConfidentialComputingOnLinuxONE.git\n</code></pre> </li> <li> <p>Change into the source code directory in your terminal</p> </li> <li> <p>Serve the documentation in a terminal while in your source code directory with:</p> <pre><code>mkdocs serve\n</code></pre> </li> <li> <p>Open a web browser and access the documentation</p> <p>The above <code>mkdocs serve</code> command should output an address to access the documentation which by default is: http://127.0.0.1:8000 which is over localhost (only accessible locally). Go to this address to access the documentation.</p> <p>Documentation updates automatically</p> <p>If you leave the terminal tab where you ran <code>mkdocs serve</code> open, the docs will update automatically when your save your changes to the file. This way as you make changes you can check your changes at the given web site, displaying in the same way as it will when displayed as a static website on GitHub.</p> </li> <li> <p>Make edits to the relevant markdown files in the <code>docs/</code> subfolder, and watch the changes display in realtime in your web browser when you save your file updates.</p> </li> </ol> <p>Special Documentation Features</p> <p>To use the special features of <code>mkdocs-material</code> and the plugins used in these docs that enhance the documentation from traditional markdown, please take a look at the syntax for the various features. You can find examples of them in action in the markdown of this site by either:</p> <ul> <li> <p>Inspecting a given page of the site in your web browser</p> <ol> <li>scroll to the top of a page with a feature you want to see how to use</li> <li>click the page with an eye icon to the right of the title</li> <li>Inspect the markdown for the part of the page with the given feature</li> </ol> </li> </ul> <p>OR</p> <ul> <li>See the markdown for the entire site in the <code>docs/</code> subfolder of the GitHub project, navigating the markdown files for each page</li> </ul> <p>Additionally, you can find more examples and explainers on the mkdocs-material reference page.</p>"},{"location":"lab/","title":"Lab Overview","text":""},{"location":"lab/#lab-environment-topology","title":"Lab environment topology","text":"Confidential Computing Lab Architecture <p>Hyper Protect Virtual Servers 2.1.3 provides an IBM-provided and -supported Secure Execution-enabled KVM image that runs on a Linux LPAR on an IBM zSystems or LinuxONE server. </p> <p>Hyper Protect Virtual Servers allows you to specify your workload via a \"contract\" that you define. </p> <p>Within the contract you specify an OCI-compliant image that provides your workload.</p> <p>For our lab this LPAR is running RHEL 8.5.  You can use any distribution on IBM zSystems or LinuxONE that supports Secure Execution- i.e., recent versions of Ubuntu and SUSE as well as RHEL.</p> <p>The Hyper Protect Virtual Servers 2.1.3 product provides a component, Crypto Express Network API for Secure Execution Enclaves (CENA4SEE) 1.1.1.2, that runs as an appliance in a Secure Service Container LPAR that has direct-attached Crypto Express cards.  CENA4SEE also provides a GREP11 Server OCI image that communicates with the CENA4SEE appliance. </p> <p>This enables GREP11 client code written to call the GREP11 Server API to  access the Crypto Express cards on the CENA4SEE SSC LPAR. The GREP11 client code can run from anywhere as long as it has network connectivity to the GREP11 Server.  The GREP11 Server can run anywhere as long as it has network connectivity to the CENA4SEE server.</p> <p>For our lab, The GREP11 client code will run in a KVM guest running Ubuntu 22.04 within our RHEL 8.5 Linux LPAR. Each student will start and use their own such guest. The GREP11 server will run in the same RHEL 8.5 Linux LPAR, and it will be a Secure Execution-enabled HPVS 2.1.3 KVM guest.  (All HPVS 2.1.3 guests are by definition enabled for Secure Execution, so in the remainder of the lab we may not repeat the full phrase \"Secure Execution-enabled HPVS 2.1.3 KVM guest\", but we used it here for emphasis). Each student will start and use their own such GREP11 server guest. </p> <p>Your HPVS 2.1.3 GREP11 Server guest will be configured to write log messages to an rsyslog service.  For the lab, you will configure this rsyslog service on the same Ubuntu guest that you are using for the GREP11 client code.</p> <p>A single SSC LPAR is used for the CENA4SEE server. Each student's HPVS 2.1.3 GREP11 Server will communicate with the CENA4SEE server- therefore, the instructors have already set up this server for you.</p> <p>During the lab you will log in to two servers: </p> <ol> <li> <p>The RHEL 8.5 host.  From here you will launch your Ubuntu KVM guest. You will also use your host login to define the \"contract\" that HPVS expects so that you can launch your HPVS 2.1.3 GREP11 Server</p> </li> <li> <p>You will log in to your Ubuntu KVM guest for configuring the rsyslog service and for running the GREP11 client code</p> </li> </ol> <p>You will not log in directly to your HPVS 2.1.3 GREP11 Server, nor to the CENA4SEE SSC LPAR, but you will make use of them via your GREP11 Client code.</p>"},{"location":"lab/configureGrep11TestClient/","title":"Run GREP11 Client code","text":""},{"location":"lab/configureGrep11TestClient/#overview-of-this-section","title":"Overview of this section","text":"<p>You have done a lot of work in this lab, have learned so much, and yet have had so much fun!  It doesn't get any better than this!</p> <p>Let's recap the highlights:</p> <p>You configured an rsyslog service on your Ubuntu KVM guest</p> <p>You did the X509 work to enable communication between the GREP11 server and the rsyslog service.</p> <p>You did the X509 work to enable the GREP11 Server to communicate with the CENA4SEE server.</p> <p>You did the server side of the X509 work to enable the GREP11 Server to communicate with GREP11 clients</p> <p>You created the contract expected by HPVS 2.1.3.</p> <p>You successfully launched the GREP11 server as a Secure Execution-protected HPVS 2.1.3 KVM Guest!</p> <p>Your last task is to run some GREP11 client code to verify that everything is working from end-to-end!</p> <p>In this section you will:</p> <ol> <li> <p>Install Go on your Ubuntu KVM guest</p> </li> <li> <p>Download the GREP11 client code from GitHub</p> </li> <li> <p>Do the client side of the X509 work to enable communication between your GREP11 Server and this GREP11 client code.</p> </li> <li> <p>Modify the GREP11 client code to point to your GREP11 Server</p> </li> <li> <p>Run the GREP11 client code</p> </li> </ol>"},{"location":"lab/configureGrep11TestClient/#log-in-to-your-ubuntu-kvm-guest","title":"Log in to your Ubuntu KVM guest","text":"<p>All of the work in this section is performed on your Ubuntu KVM guest, and you are already logged in to it if you have followed this lab without interruption.  If you are not logged in, click on the Previous link at the bottom left of the page, go to the bottom of that page and scroll up just a little bit and you'll  see the ssh command to log in.  Then come back here.</p>"},{"location":"lab/configureGrep11TestClient/#install-go","title":"Install Go","text":"<p>The Go language compiler is not installed on your system.  Prove that with this command:</p> <pre><code>go version\n</code></pre> <p>You'll be given some ideas on how to install it:</p> Output when go is not installed <pre><code>sudo snap install go         # version 1.19.5, or\nsudo apt  install golang-go  # version 2:1.18~0ubuntu2\nsudo apt  install gccgo-go   # version 2:1.18~0ubuntu2\nSee 'snap info go' for additional versions.\n</code></pre> <p>Please pick the second option as that is the one the instructors used for creating the lab, and they are just as exhausted as you are.</p> <pre><code>sudo apt install golang-go\n</code></pre> <p>Type Y when prompted to continue.  The output from the installation will look like this:</p> Output from installation of golang-go <pre><code>Reading package lists... Done\nBuilding dependency tree... Done\nReading state information... Done\nThe following additional packages will be installed:\n  bzip2 cpp cpp-11 fontconfig-config fonts-dejavu-core g++ g++-11 gcc gcc-11 gcc-11-base golang-1.18-go golang-1.18-src golang-src libasan6\n  libatomic1 libc-dev-bin libc-devtools libc6-dev libcc1-0 libcrypt-dev libdeflate0 libdpkg-perl libfile-fcntllock-perl libfontconfig1\n  libfreetype6 libgcc-11-dev libgd3 libgomp1 libisl23 libitm1 libjbig0 libjpeg-turbo8 libjpeg8 libmpc3 libnsl-dev libstdc++-11-dev libtiff5\n  libtirpc-dev libubsan1 libwebp7 libxpm4 linux-libc-dev manpages-dev pkg-config rpcsvc-proto\nSuggested packages:\n  bzip2-doc cpp-doc gcc-11-locales g++-multilib g++-11-multilib gcc-11-doc gcc-multilib make autoconf automake libtool flex bison gdb\n  gcc-doc gcc-11-multilib bzr | brz mercurial subversion glibc-doc debian-keyring bzr libgd-tools libstdc++-11-doc dpkg-dev\nThe following NEW packages will be installed:\n  bzip2 cpp cpp-11 fontconfig-config fonts-dejavu-core g++ g++-11 gcc gcc-11 gcc-11-base golang-1.18-go golang-1.18-src golang-go\n  golang-src libasan6 libatomic1 libc-dev-bin libc-devtools libc6-dev libcc1-0 libcrypt-dev libdeflate0 libdpkg-perl libfile-fcntllock-perl\n  libfontconfig1 libfreetype6 libgcc-11-dev libgd3 libgomp1 libisl23 libitm1 libjbig0 libjpeg-turbo8 libjpeg8 libmpc3 libnsl-dev\n  libstdc++-11-dev libtiff5 libtirpc-dev libubsan1 libwebp7 libxpm4 linux-libc-dev manpages-dev pkg-config rpcsvc-proto\n0 upgraded, 46 newly installed, 0 to remove and 12 not upgraded.\nNeed to get 127 MB of archives.\nAfter this operation, 592 MB of additional disk space will be used.\nDo you want to continue? [Y/n] Y\nGet:1 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x bzip2 s390x 1.0.8-5build1 [34.4 kB]\nGet:2 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x gcc-11-base s390x 11.3.0-1ubuntu1~22.04 [20.8 kB]\nGet:3 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x libisl23 s390x 0.24-2build1 [701 kB]\nGet:4 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x libmpc3 s390x 1.2.1-2build1 [47.7 kB]\nGet:5 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x cpp-11 s390x 11.3.0-1ubuntu1~22.04 [7848 kB]\nGet:6 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x cpp s390x 4:11.2.0-1ubuntu1 [27.7 kB]\nGet:7 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x fonts-dejavu-core all 2.37-2build1 [1041 kB]\nGet:8 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x fontconfig-config all 2.13.1-4.2ubuntu5 [29.1 kB]\nGet:9 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x libcc1-0 s390x 12.1.0-2ubuntu1~22.04 [46.3 kB]\nGet:10 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x libgomp1 s390x 12.1.0-2ubuntu1~22.04 [123 kB]\nGet:11 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x libitm1 s390x 12.1.0-2ubuntu1~22.04 [29.9 kB]\nGet:12 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x libatomic1 s390x 12.1.0-2ubuntu1~22.04 [9008 B]\nGet:13 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x libasan6 s390x 11.3.0-1ubuntu1~22.04 [2242 kB]\nGet:14 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x libubsan1 s390x 12.1.0-2ubuntu1~22.04 [967 kB]\nGet:15 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x libgcc-11-dev s390x 11.3.0-1ubuntu1~22.04 [825 kB]\nGet:16 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x gcc-11 s390x 11.3.0-1ubuntu1~22.04 [15.7 MB]\nGet:17 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x gcc s390x 4:11.2.0-1ubuntu1 [5118 B]\nGet:18 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x libc-dev-bin s390x 2.35-0ubuntu3.1 [20.0 kB]\nGet:19 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x linux-libc-dev s390x 5.15.0-60.66 [1338 kB]\nGet:20 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x libcrypt-dev s390x 1:4.4.27-1 [114 kB]\nGet:21 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x rpcsvc-proto s390x 1.4.2-0ubuntu6 [64.7 kB]\nGet:22 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x libtirpc-dev s390x 1.3.2-2ubuntu0.1 [189 kB]\nGet:23 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x libnsl-dev s390x 1.3.0-2build2 [70.9 kB]\nGet:24 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x libc6-dev s390x 2.35-0ubuntu3.1 [1499 kB]\nGet:25 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x libstdc++-11-dev s390x 11.3.0-1ubuntu1~22.04 [2089 kB]\nGet:26 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x g++-11 s390x 11.3.0-1ubuntu1~22.04 [9169 kB]\nGet:27 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x g++ s390x 4:11.2.0-1ubuntu1 [1408 B]\nGet:28 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x golang-1.18-src all 1.18.1-1ubuntu1 [16.2 MB]\nGet:29 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x golang-1.18-go s390x 1.18.1-1ubuntu1 [62.6 MB]\nGet:30 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x golang-src all 2:1.18~0ubuntu2 [4438 B]\nGet:31 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x golang-go s390x 2:1.18~0ubuntu2 [41.8 kB]\nGet:32 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x libfreetype6 s390x 2.11.1+dfsg-1ubuntu0.1 [382 kB]\nGet:33 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x libfontconfig1 s390x 2.13.1-4.2ubuntu5 [133 kB]\nGet:34 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x libjpeg-turbo8 s390x 2.1.2-0ubuntu1 [119 kB]\nGet:35 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x libjpeg8 s390x 8c-2ubuntu10 [2264 B]                                           \nGet:36 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x libdeflate0 s390x 1.10-2 [72.1 kB]                                             \nGet:37 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x libjbig0 s390x 2.1-3.1ubuntu0.22.04.1 [29.9 kB]                        \nGet:38 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x libwebp7 s390x 1.2.2-2 [167 kB]                                                \nGet:39 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x libtiff5 s390x 4.3.0-6ubuntu0.3 [178 kB]                               \nGet:40 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x libxpm4 s390x 1:3.5.12-1ubuntu0.22.04.1 [36.7 kB]                      \nGet:41 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x libgd3 s390x 2.3.0-2ubuntu2 [131 kB]                                           \nGet:42 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x libc-devtools s390x 2.35-0ubuntu3.1 [29.2 kB]                          \nGet:43 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x libdpkg-perl all 1.21.1ubuntu2.1 [237 kB]                              \nGet:44 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x libfile-fcntllock-perl s390x 0.22-3build7 [33.6 kB]                            \nGet:45 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x manpages-dev all 5.10-1ubuntu1 [2309 kB]                                       \nGet:46 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x pkg-config s390x 0.29.2-1ubuntu3 [47.3 kB]                                     \nFetched 127 MB in 7s (17.1 MB/s)                                                                                                            \nExtracting templates from packages: 100%\nSelecting previously unselected package bzip2.\n(Reading database ... 56573 files and directories currently installed.)\nPreparing to unpack .../00-bzip2_1.0.8-5build1_s390x.deb ...\nUnpacking bzip2 (1.0.8-5build1) ...\nSelecting previously unselected package gcc-11-base:s390x.\nPreparing to unpack .../01-gcc-11-base_11.3.0-1ubuntu1~22.04_s390x.deb ...\nUnpacking gcc-11-base:s390x (11.3.0-1ubuntu1~22.04) ...\nSelecting previously unselected package libisl23:s390x.\nPreparing to unpack .../02-libisl23_0.24-2build1_s390x.deb ...\nUnpacking libisl23:s390x (0.24-2build1) ...\nSelecting previously unselected package libmpc3:s390x.\nPreparing to unpack .../03-libmpc3_1.2.1-2build1_s390x.deb ...\nUnpacking libmpc3:s390x (1.2.1-2build1) ...\nSelecting previously unselected package cpp-11.\nPreparing to unpack .../04-cpp-11_11.3.0-1ubuntu1~22.04_s390x.deb ...\nUnpacking cpp-11 (11.3.0-1ubuntu1~22.04) ...\nSelecting previously unselected package cpp.\nPreparing to unpack .../05-cpp_4%3a11.2.0-1ubuntu1_s390x.deb ...\nUnpacking cpp (4:11.2.0-1ubuntu1) ...\nSelecting previously unselected package fonts-dejavu-core.\nPreparing to unpack .../06-fonts-dejavu-core_2.37-2build1_all.deb ...\nUnpacking fonts-dejavu-core (2.37-2build1) ...\nSelecting previously unselected package fontconfig-config.\nPreparing to unpack .../07-fontconfig-config_2.13.1-4.2ubuntu5_all.deb ...\nUnpacking fontconfig-config (2.13.1-4.2ubuntu5) ...\nSelecting previously unselected package libcc1-0:s390x.\nPreparing to unpack .../08-libcc1-0_12.1.0-2ubuntu1~22.04_s390x.deb ...\nUnpacking libcc1-0:s390x (12.1.0-2ubuntu1~22.04) ...\nSelecting previously unselected package libgomp1:s390x.\nPreparing to unpack .../09-libgomp1_12.1.0-2ubuntu1~22.04_s390x.deb ...\nUnpacking libgomp1:s390x (12.1.0-2ubuntu1~22.04) ...\nSelecting previously unselected package libitm1:s390x.\nPreparing to unpack .../10-libitm1_12.1.0-2ubuntu1~22.04_s390x.deb ...\nUnpacking libitm1:s390x (12.1.0-2ubuntu1~22.04) ...\nSelecting previously unselected package libatomic1:s390x.\nPreparing to unpack .../11-libatomic1_12.1.0-2ubuntu1~22.04_s390x.deb ...\nUnpacking libatomic1:s390x (12.1.0-2ubuntu1~22.04) ...\nSelecting previously unselected package libasan6:s390x.\nPreparing to unpack .../12-libasan6_11.3.0-1ubuntu1~22.04_s390x.deb ...\nUnpacking libasan6:s390x (11.3.0-1ubuntu1~22.04) ...\nSelecting previously unselected package libubsan1:s390x.\nPreparing to unpack .../13-libubsan1_12.1.0-2ubuntu1~22.04_s390x.deb ...\nUnpacking libubsan1:s390x (12.1.0-2ubuntu1~22.04) ...\nSelecting previously unselected package libgcc-11-dev:s390x.\nPreparing to unpack .../14-libgcc-11-dev_11.3.0-1ubuntu1~22.04_s390x.deb ...\nUnpacking libgcc-11-dev:s390x (11.3.0-1ubuntu1~22.04) ...\nSelecting previously unselected package gcc-11.\nPreparing to unpack .../15-gcc-11_11.3.0-1ubuntu1~22.04_s390x.deb ...\nUnpacking gcc-11 (11.3.0-1ubuntu1~22.04) ...\nSelecting previously unselected package gcc.\nPreparing to unpack .../16-gcc_4%3a11.2.0-1ubuntu1_s390x.deb ...\nUnpacking gcc (4:11.2.0-1ubuntu1) ...\nSelecting previously unselected package libc-dev-bin.\nPreparing to unpack .../17-libc-dev-bin_2.35-0ubuntu3.1_s390x.deb ...\nUnpacking libc-dev-bin (2.35-0ubuntu3.1) ...\nSelecting previously unselected package linux-libc-dev:s390x.\nPreparing to unpack .../18-linux-libc-dev_5.15.0-60.66_s390x.deb ...\nUnpacking linux-libc-dev:s390x (5.15.0-60.66) ...\nSelecting previously unselected package libcrypt-dev:s390x.\nPreparing to unpack .../19-libcrypt-dev_1%3a4.4.27-1_s390x.deb ...\nUnpacking libcrypt-dev:s390x (1:4.4.27-1) ...\nSelecting previously unselected package rpcsvc-proto.\nPreparing to unpack .../20-rpcsvc-proto_1.4.2-0ubuntu6_s390x.deb ...\nUnpacking rpcsvc-proto (1.4.2-0ubuntu6) ...\nSelecting previously unselected package libtirpc-dev:s390x.\nPreparing to unpack .../21-libtirpc-dev_1.3.2-2ubuntu0.1_s390x.deb ...\nUnpacking libtirpc-dev:s390x (1.3.2-2ubuntu0.1) ...\nSelecting previously unselected package libnsl-dev:s390x.\nPreparing to unpack .../22-libnsl-dev_1.3.0-2build2_s390x.deb ...\nUnpacking libnsl-dev:s390x (1.3.0-2build2) ...\nSelecting previously unselected package libc6-dev:s390x.\nPreparing to unpack .../23-libc6-dev_2.35-0ubuntu3.1_s390x.deb ...\nUnpacking libc6-dev:s390x (2.35-0ubuntu3.1) ...\nSelecting previously unselected package libstdc++-11-dev:s390x.\nPreparing to unpack .../24-libstdc++-11-dev_11.3.0-1ubuntu1~22.04_s390x.deb ...\nUnpacking libstdc++-11-dev:s390x (11.3.0-1ubuntu1~22.04) ...\nSelecting previously unselected package g++-11.\nPreparing to unpack .../25-g++-11_11.3.0-1ubuntu1~22.04_s390x.deb ...\nUnpacking g++-11 (11.3.0-1ubuntu1~22.04) ...\nSelecting previously unselected package g++.\nPreparing to unpack .../26-g++_4%3a11.2.0-1ubuntu1_s390x.deb ...\nUnpacking g++ (4:11.2.0-1ubuntu1) ...\nSelecting previously unselected package golang-1.18-src.\nPreparing to unpack .../27-golang-1.18-src_1.18.1-1ubuntu1_all.deb ...\nUnpacking golang-1.18-src (1.18.1-1ubuntu1) ...\nSelecting previously unselected package golang-1.18-go.\nPreparing to unpack .../28-golang-1.18-go_1.18.1-1ubuntu1_s390x.deb ...\nUnpacking golang-1.18-go (1.18.1-1ubuntu1) ...\nSelecting previously unselected package golang-src.\nPreparing to unpack .../29-golang-src_2%3a1.18~0ubuntu2_all.deb ...\nUnpacking golang-src (2:1.18~0ubuntu2) ...\nSelecting previously unselected package golang-go:s390x.\nPreparing to unpack .../30-golang-go_2%3a1.18~0ubuntu2_s390x.deb ...\nUnpacking golang-go:s390x (2:1.18~0ubuntu2) ...\nSelecting previously unselected package libfreetype6:s390x.\nPreparing to unpack .../31-libfreetype6_2.11.1+dfsg-1ubuntu0.1_s390x.deb ...\nUnpacking libfreetype6:s390x (2.11.1+dfsg-1ubuntu0.1) ...\nSelecting previously unselected package libfontconfig1:s390x.\nPreparing to unpack .../32-libfontconfig1_2.13.1-4.2ubuntu5_s390x.deb ...\nUnpacking libfontconfig1:s390x (2.13.1-4.2ubuntu5) ...\nSelecting previously unselected package libjpeg-turbo8:s390x.\nPreparing to unpack .../33-libjpeg-turbo8_2.1.2-0ubuntu1_s390x.deb ...\nUnpacking libjpeg-turbo8:s390x (2.1.2-0ubuntu1) ...\nSelecting previously unselected package libjpeg8:s390x.\nPreparing to unpack .../34-libjpeg8_8c-2ubuntu10_s390x.deb ...\nUnpacking libjpeg8:s390x (8c-2ubuntu10) ...\nSelecting previously unselected package libdeflate0:s390x.\nPreparing to unpack .../35-libdeflate0_1.10-2_s390x.deb ...\nUnpacking libdeflate0:s390x (1.10-2) ...\nSelecting previously unselected package libjbig0:s390x.\nPreparing to unpack .../36-libjbig0_2.1-3.1ubuntu0.22.04.1_s390x.deb ...\nUnpacking libjbig0:s390x (2.1-3.1ubuntu0.22.04.1) ...\nSelecting previously unselected package libwebp7:s390x.\nPreparing to unpack .../37-libwebp7_1.2.2-2_s390x.deb ...\nUnpacking libwebp7:s390x (1.2.2-2) ...\nSelecting previously unselected package libtiff5:s390x.\nPreparing to unpack .../38-libtiff5_4.3.0-6ubuntu0.3_s390x.deb ...\nUnpacking libtiff5:s390x (4.3.0-6ubuntu0.3) ...\nSelecting previously unselected package libxpm4:s390x.\nPreparing to unpack .../39-libxpm4_1%3a3.5.12-1ubuntu0.22.04.1_s390x.deb ...\nUnpacking libxpm4:s390x (1:3.5.12-1ubuntu0.22.04.1) ...\nSelecting previously unselected package libgd3:s390x.\nPreparing to unpack .../40-libgd3_2.3.0-2ubuntu2_s390x.deb ...\nUnpacking libgd3:s390x (2.3.0-2ubuntu2) ...\nSelecting previously unselected package libc-devtools.\nPreparing to unpack .../41-libc-devtools_2.35-0ubuntu3.1_s390x.deb ...\nUnpacking libc-devtools (2.35-0ubuntu3.1) ...\nSelecting previously unselected package libdpkg-perl.\nPreparing to unpack .../42-libdpkg-perl_1.21.1ubuntu2.1_all.deb ...\nUnpacking libdpkg-perl (1.21.1ubuntu2.1) ...\nSelecting previously unselected package libfile-fcntllock-perl.\nPreparing to unpack .../43-libfile-fcntllock-perl_0.22-3build7_s390x.deb ...\nUnpacking libfile-fcntllock-perl (0.22-3build7) ...\nSelecting previously unselected package manpages-dev.\nPreparing to unpack .../44-manpages-dev_5.10-1ubuntu1_all.deb ...\nUnpacking manpages-dev (5.10-1ubuntu1) ...\nSelecting previously unselected package pkg-config.\nPreparing to unpack .../45-pkg-config_0.29.2-1ubuntu3_s390x.deb ...\nUnpacking pkg-config (0.29.2-1ubuntu3) ...\nSetting up gcc-11-base:s390x (11.3.0-1ubuntu1~22.04) ...\nSetting up manpages-dev (5.10-1ubuntu1) ...\nSetting up libxpm4:s390x (1:3.5.12-1ubuntu0.22.04.1) ...\nSetting up libfile-fcntllock-perl (0.22-3build7) ...\nSetting up libdeflate0:s390x (1.10-2) ...\nSetting up linux-libc-dev:s390x (5.15.0-60.66) ...\nSetting up libgomp1:s390x (12.1.0-2ubuntu1~22.04) ...\nSetting up bzip2 (1.0.8-5build1) ...\nSetting up libjbig0:s390x (2.1-3.1ubuntu0.22.04.1) ...\nSetting up libasan6:s390x (11.3.0-1ubuntu1~22.04) ...\nSetting up libtirpc-dev:s390x (1.3.2-2ubuntu0.1) ...\nSetting up rpcsvc-proto (1.4.2-0ubuntu6) ...\nSetting up libfreetype6:s390x (2.11.1+dfsg-1ubuntu0.1) ...\nSetting up libmpc3:s390x (1.2.1-2build1) ...\nSetting up libatomic1:s390x (12.1.0-2ubuntu1~22.04) ...\nSetting up fonts-dejavu-core (2.37-2build1) ...\nSetting up golang-1.18-src (1.18.1-1ubuntu1) ...\nSetting up libjpeg-turbo8:s390x (2.1.2-0ubuntu1) ...\nSetting up libdpkg-perl (1.21.1ubuntu2.1) ...\nSetting up libwebp7:s390x (1.2.2-2) ...\nSetting up libubsan1:s390x (12.1.0-2ubuntu1~22.04) ...\nSetting up libnsl-dev:s390x (1.3.0-2build2) ...\nSetting up libcrypt-dev:s390x (1:4.4.27-1) ...\nSetting up libisl23:s390x (0.24-2build1) ...\nSetting up libc-dev-bin (2.35-0ubuntu3.1) ...\nSetting up golang-src (2:1.18~0ubuntu2) ...\nSetting up libcc1-0:s390x (12.1.0-2ubuntu1~22.04) ...\nSetting up libitm1:s390x (12.1.0-2ubuntu1~22.04) ...\nSetting up libjpeg8:s390x (8c-2ubuntu10) ...\nSetting up cpp-11 (11.3.0-1ubuntu1~22.04) ...\nSetting up fontconfig-config (2.13.1-4.2ubuntu5) ...\nSetting up golang-1.18-go (1.18.1-1ubuntu1) ...\nSetting up pkg-config (0.29.2-1ubuntu3) ...\nSetting up libgcc-11-dev:s390x (11.3.0-1ubuntu1~22.04) ...\nSetting up gcc-11 (11.3.0-1ubuntu1~22.04) ...\nSetting up cpp (4:11.2.0-1ubuntu1) ...\nSetting up libc6-dev:s390x (2.35-0ubuntu3.1) ...\nSetting up libtiff5:s390x (4.3.0-6ubuntu0.3) ...\nSetting up libfontconfig1:s390x (2.13.1-4.2ubuntu5) ...\nSetting up golang-go:s390x (2:1.18~0ubuntu2) ...\nSetting up gcc (4:11.2.0-1ubuntu1) ...\nSetting up libgd3:s390x (2.3.0-2ubuntu2) ...\nSetting up libstdc++-11-dev:s390x (11.3.0-1ubuntu1~22.04) ...\nSetting up libc-devtools (2.35-0ubuntu3.1) ...\nSetting up g++-11 (11.3.0-1ubuntu1~22.04) ...\nSetting up g++ (4:11.2.0-1ubuntu1) ...\nupdate-alternatives: using /usr/bin/g++ to provide /usr/bin/c++ (c++) in auto mode\nProcessing triggers for man-db (2.10.2-1) ...\nProcessing triggers for libc-bin (2.35-0ubuntu3.1) ...\nScanning processes...                                                                                                                        \nScanning linux images...                                                                                                                     \n\nRunning kernel seems to be up-to-date (ABI upgrades are not detected).\n\nNo services need to be restarted.\n\nNo containers need to be restarted.\n\nNo user sessions are running outdated binaries.\n\nNo VM guests are running outdated hypervisor (qemu) binaries on this host.\n</code></pre> <p>Now convince yourself that you have installed Go correctly:</p> <pre><code>go version\n</code></pre> Go has been installed if you see this: <pre><code>go version go1.18.1 linux/s390x\n</code></pre> <p>The version of go that you see may differ slightly if a newer version has become available.</p>"},{"location":"lab/configureGrep11TestClient/#download-the-grep11-code-repo","title":"Download the GREP11 code repo","text":"<p>You are probably already in your home directory, but this command won't cause any harm if you are:</p> <pre><code>cd ~\n</code></pre> <p>The instructor has created a fork of a GitHub repo that is provided by an IBM Cloud GitHub repo.  The instructor could have just pointed you to the IBM Cloud GitHub repo, but, had he done that, you can be assured that a file that had not been changed in nineteen months would have changed an hour before  you started the lab, breaking this section, frustrating you, humiliating the instructor, and by creating his own fork he can ensure he has complete control of the code, and you probably think he's being paranoid  and that this sort of thing would never have happened to him during a live demo (on a different product) in front of an audience of hundreds of people.  Nope, that would never happen.  Fortunately it was only an IBM  internal audience.</p> <p>Having said that, clone the instructor's GitHub repo:</p> <pre><code>git clone https://github.com/silliman/hpcs-grep11-go </code></pre> Example output from git clone <pre><code>Cloning into 'hpcs-grep11-go'...\nremote: Enumerating objects: 61, done.\nremote: Counting objects: 100% (61/61), done.\nremote: Compressing objects: 100% (32/32), done.\nremote: Total 61 (delta 22), reused 56 (delta 20), pack-reused 0\nReceiving objects: 100% (61/61), 121.04 KiB | 8.07 MiB/s, done.\nResolving deltas: 100% (22/22), done.\n</code></pre> <p>The git clone created a directory named <code>hpcs-grep11-go</code>, change into it:</p> <pre><code>cd hpcs-grep11-go\n</code></pre> <p>List the contents of the <code>cert</code> directory, see that there is a single file named <code>README</code> </p> <pre><code>ls -l certs/\n</code></pre> <p>READ IT (weeping is optional):</p> <pre><code>cat certs/README\n</code></pre> <p>You read that right- more X509 work!! </p>"},{"location":"lab/configureGrep11TestClient/#create-tls-certificate-and-key-for-your-grep11-client","title":"Create TLS certificate and key for your GREP11 Client","text":"<p>Go to the <code>certs</code> directory:</p> <pre><code>cd certs\n</code></pre> <p>Create an RSA private key (this is one of three files needed in this directory)</p> <pre><code>openssl genrsa -out client.key 2048\n</code></pre> <p>Create a configuration file to avoid interrogation by openssl:</p> <pre><code>cat &lt;&lt; EOF &gt; client.cnf\nRANDFILE               = \\$ENV::HOME/.rnd\n\n[ req ]\ndefault_bits           = 2048\ndefault_keyfile        = keyfile.pem\ndistinguished_name     = req_distinguished_name\nattributes             = req_attributes\nprompt                 = no\noutput_password        = mypass\n\n[ req_distinguished_name ]\nC                      = US\nST                     = Virginia\nL                      = Herndon\nO                      = IBM\nOU                     = Washington Systems Center - IBM zSystems and LinuxONE\nCN                     = Lab Student\nemailAddress           = student@not.real.email.com\n\n[ req_attributes ]\nchallengePassword              = A challenge password\n\n[ x509_extensions ]\nsubjectKeyIdentifier   = hash\nauthorityKeyIdentifier = keyid,issuer\nbasicConstraints       = critical,CA:TRUE\nEOF\n</code></pre> <p>Create a certificate signing request:</p> <pre><code>openssl req -new -key client.key -out client.csr -config client.cnf\n</code></pre> <p>Display the CSR that you created:</p> <pre><code>openssl req -noout -text -in client.csr\n</code></pre> <p>It will look like this:</p> Example CSR display <pre><code>Certificate Request:\n    Data:\n        Version: 1 (0x0)\n        Subject: C = US, ST = Virginia, L = Herndon, O = IBM, OU = Washington Systems Center - IBM zSystems and LinuxONE, CN = Lab Student, emailAddress = student@not.real.email.com\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n                Public-Key: (2048 bit)\n                Modulus:\n                    00:e4:07:f9:43:c6:6b:fd:2c:39:d4:ef:b4:cb:db:\n                    f5:06:b1:82:bc:48:1a:a1:57:3c:1d:05:a9:fe:65:\n                    c2:bb:a0:ed:12:58:51:e0:95:2f:44:95:5c:be:88:\n                    82:a0:c0:4d:28:62:c4:32:90:66:2e:aa:bc:77:cc:\n                    a0:bc:04:3f:22:01:37:58:0a:44:ab:29:9f:4c:01:\n                    8b:24:33:21:a5:bf:27:5d:4e:1e:a3:14:15:79:f1:\n                    8d:02:61:7b:4d:9f:18:d9:4a:5e:b9:62:d9:c3:96:\n                    79:cd:2c:82:f2:f1:3e:8f:ca:29:89:6a:45:b7:48:\n                    b5:54:4a:bc:0d:0e:1c:22:8b:f7:8d:e4:72:54:9e:\n                    8e:ef:b7:2e:d3:3b:e3:10:9e:1c:35:79:eb:57:1b:\n                    aa:61:15:d7:19:6a:89:76:2e:63:19:07:c1:db:92:\n                    98:bb:48:2b:e7:55:8b:cb:74:e1:00:76:f5:0a:8e:\n                    e8:1a:69:a6:14:bf:7c:7f:eb:a8:ee:ad:b1:f0:df:\n                    92:cc:0c:10:3d:42:b3:02:0d:7c:0d:55:38:70:49:\n                    ab:84:da:d0:1e:52:1b:19:47:6e:26:b9:8c:cf:0e:\n                    12:17:b1:cd:d8:bd:55:2f:fd:6b:6e:12:f1:8b:c4:\n                    60:96:67:c4:55:a3:03:43:1b:70:a2:d7:0e:73:c6:\n                    79:23\n                Exponent: 65537 (0x10001)\n        Attributes:\n            challengePassword        :A challenge password\n            Requested Extensions:\n    Signature Algorithm: sha256WithRSAEncryption\n    Signature Value:\n        3d:ef:35:37:b6:aa:e4:33:cb:fe:17:aa:18:a5:77:d2:23:3b:\n        b7:01:ac:6e:65:0c:0c:68:a6:80:37:04:8d:d2:7e:e8:9b:57:\n        9d:63:8f:82:06:22:07:7f:bc:6b:b3:60:1c:3f:a1:3d:75:c5:\n        3a:d5:f6:74:5c:93:9a:60:9e:40:4a:95:09:bf:38:6b:fb:fb:\n        1a:6a:91:be:6d:4d:15:46:79:b4:e1:19:cb:9d:00:97:95:75:\n        c1:3a:1d:4b:10:0f:c0:90:5b:f0:b9:5a:e6:b8:6d:11:84:d3:\n        0b:aa:7c:eb:07:51:4c:0c:c3:7d:e5:7e:d0:5a:81:f8:0e:3f:\n        08:db:3b:78:3d:aa:38:a0:65:60:60:f5:19:4f:47:fe:08:2d:\n        4a:af:f9:40:1d:ff:2b:92:67:91:99:eb:b1:8c:cf:d1:2a:c1:\n        c0:0d:6c:38:2b:ca:69:d2:40:7e:9d:84:c6:7a:2c:33:d0:28:\n        b0:09:97:19:e7:3c:e9:fe:dc:bf:71:a3:00:2f:46:19:f4:1a:\n        7c:fc:0f:ff:18:1f:38:77:78:17:49:0e:3e:e7:8a:f0:29:bb:\n        a2:37:f4:4a:12:48:e2:ea:1f:14:cc:31:ac:19:6d:b5:bf:98:\n        2b:91:aa:a8:71:07:62:54:48:79:55:72:11:9e:87:86:36:3d:\n        5d:24:b0:9b\n</code></pre> <p>Your GREP11 CA is on your account on the RHEL 8.5 KVM host. Send your CSR to it:</p> <pre><code>scp client.csr ${StudentID}@192.168.22.64:GREP11CAwork/. </code></pre> <p>Log out of your Ubuntu kvm guest because you will be putting your CA hat on for one last time up on the RHEL 8.5 host:</p> <pre><code>exit\n</code></pre> <p>Log in to the RHEL 8.5 host:</p> <pre><code>ssh -l ${StudentID} 192.168.22.64\n</code></pre> <p>Change to your GREP11 CA working directory:</p> <pre><code>cd GREP11CAwork\n</code></pre> <p>Display the CSR that the client sent you:</p> <pre><code>openssl req -noout -text -in client.csr\n</code></pre> <p>Note: The output is not shown here as it should look the same as when you displayed this same certificate moments ago when you were in \"client\" mode.</p> <p>Create the certificate for the client:</p> <pre><code>openssl x509 -req -days 300 -in client.csr -CA grep11-ca.pem -CAcreateserial -CAkey grep11-ca-key.pem -out client.pem\n</code></pre> Output from certificate creation <pre><code>Signature ok\nsubject=C = US, ST = Virginia, L = Herndon, O = IBM, OU = Washington Systems Center - IBM zSystems and LinuxONE, CN = Lab Student, emailAddress = student@not.real.email.com\nGetting CA Private Key\n</code></pre> <p>Display the certificate before sending it to the client:</p> <pre><code>openssl x509 -noout -text -in client.pem\n</code></pre> Display of GREP11 client certificate <pre><code>Certificate:\n    Data:\n        Version: 1 (0x0)\n        Serial Number:\n            79:dd:5b:25:cc:24:f9:71:e5:e0:71:23:db:f8:9e:b8:92:b9:2d:1a\n        Signature Algorithm: sha256WithRSAEncryption\n        Issuer: C = US, ST = Virginia, L = Herndon, O = IBM, OU = Washington Systems Center - IBM zSystems and LinuxONE, CN = WSC student02 HPVS CA, emailAddress = student@notreal.email.com.com\n        Validity\n            Not Before: Feb 15 16:07:56 2023 GMT\n            Not After : Dec 12 16:07:56 2023 GMT\n        Subject: C = US, ST = Virginia, L = Herndon, O = IBM, OU = Washington Systems Center - IBM zSystems and LinuxONE, CN = Lab Student, emailAddress = student@not.real.email.com\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n                RSA Public-Key: (2048 bit)\n                Modulus:\n                    00:e4:07:f9:43:c6:6b:fd:2c:39:d4:ef:b4:cb:db:\n                    f5:06:b1:82:bc:48:1a:a1:57:3c:1d:05:a9:fe:65:\n                    c2:bb:a0:ed:12:58:51:e0:95:2f:44:95:5c:be:88:\n                    82:a0:c0:4d:28:62:c4:32:90:66:2e:aa:bc:77:cc:\n                    a0:bc:04:3f:22:01:37:58:0a:44:ab:29:9f:4c:01:\n                    8b:24:33:21:a5:bf:27:5d:4e:1e:a3:14:15:79:f1:\n                    8d:02:61:7b:4d:9f:18:d9:4a:5e:b9:62:d9:c3:96:\n                    79:cd:2c:82:f2:f1:3e:8f:ca:29:89:6a:45:b7:48:\n                    b5:54:4a:bc:0d:0e:1c:22:8b:f7:8d:e4:72:54:9e:\n                    8e:ef:b7:2e:d3:3b:e3:10:9e:1c:35:79:eb:57:1b:\n                    aa:61:15:d7:19:6a:89:76:2e:63:19:07:c1:db:92:\n                    98:bb:48:2b:e7:55:8b:cb:74:e1:00:76:f5:0a:8e:\n                    e8:1a:69:a6:14:bf:7c:7f:eb:a8:ee:ad:b1:f0:df:\n                    92:cc:0c:10:3d:42:b3:02:0d:7c:0d:55:38:70:49:\n                    ab:84:da:d0:1e:52:1b:19:47:6e:26:b9:8c:cf:0e:\n                    12:17:b1:cd:d8:bd:55:2f:fd:6b:6e:12:f1:8b:c4:\n                    60:96:67:c4:55:a3:03:43:1b:70:a2:d7:0e:73:c6:\n                    79:23\n                Exponent: 65537 (0x10001)\n    Signature Algorithm: sha256WithRSAEncryption\n         66:9c:1a:d8:75:5b:52:1c:8c:f7:d7:63:f6:ea:1e:4e:b1:fa:\n         92:78:1a:ab:83:11:7d:73:50:b9:ce:34:2b:33:d1:97:1f:90:\n         f6:c7:85:45:20:9f:95:6d:f7:16:f9:64:fd:7b:3d:48:44:33:\n         af:9e:dc:5a:f4:56:dd:50:27:6f:3e:9e:75:f2:52:d1:cf:fe:\n         76:52:98:8a:0b:cd:62:a6:68:49:34:43:f9:d2:e3:ab:f6:b3:\n         3f:fd:ff:3a:92:06:32:2b:c0:64:29:b5:00:c4:b8:66:57:07:\n         de:64:8a:7a:88:0b:27:79:5a:6d:8f:4d:52:bf:cc:5e:03:53:\n         4a:40:4d:22:e5:e7:0f:c3:1e:6c:2a:cf:79:f2:d5:4b:b3:13:\n         be:dd:51:c7:2f:2d:8b:f5:97:1e:3f:86:2e:6c:13:c5:43:0f:\n         a6:49:ed:a4:a2:7e:ec:3f:f9:9b:f4:65:f1:ff:d5:9c:60:0f:\n         90:a8:18:a7:e0:2a:e4:b9:f2:4c:36:d9:f7:94:c9:a5:71:10:\n         bf:56:0d:df:d7:3e:71:a7:f7:d0:cc:dc:52:49:bf:c1:71:72:\n         e3:46:89:d6:5d:d4:60:04:a3:5b:46:84:ef:9f:de:02:8c:c8:\n         69:89:5a:ef:49:5a:48:fc:72:af:09:21:dd:22:f7:91:b5:57:\n         3b:50:e3:58\n</code></pre> <p>Send the certificate back to the client that requested it:</p> <pre><code>scp client.pem student@${StudentGuestIP}:./hpcs-grep11-go/certs/.   </code></pre> <p>Your work as a CA registrar is done for the remainder of the lab!  Log out of your session on the RHEL 8.5 host:</p> <pre><code>exit\n</code></pre> <p>Log in again to your Ubuntu KVM guest:</p> <pre><code>ssh -p ${Student_SSH_Port} -l student 192.168.22.64\n</code></pre> <p>Change to the directory that has your certificates and key:</p> <pre><code>cd hpcs-grep11-go/certs\n</code></pre> <p>Display the client certificate that your CA registrar sent you:</p> <pre><code>openssl x509 -noout -text -in client.pem\n</code></pre> <p>You know that you know what it should look like so we won't repeat the output here.</p> <p>Get your CA's public certificate so that you can authenticate your connection with the GREP11 Server:</p> <pre><code>scp ${StudentID}@192.168.22.64:GREP11CAwork/grep11-ca.pem .\n</code></pre>"},{"location":"lab/configureGrep11TestClient/#modify-grep11-code-for-authentication-to-your-grep11-server","title":"Modify GREP11 code for authentication to your GREP11 Server","text":"<p>Switch to this directory:</p> <pre><code>cd ../examples\n</code></pre> <p>Run this command to see the one line you need to change in the source code you downloaded:</p> <pre><code>grep --after-context 3 STUDENT server_test.go\n</code></pre> <p>Your output will look like this:</p> The line you need to change, plus the files you just made <pre><code>const Address = \"STUDENT_GREP11SERVER_IP:9876\"\nconst cert = \"../certs/client.pem\"\nconst key = \"../certs/client.key\"\nconst ca = \"../certs/grep11-ca.pem\"\n</code></pre> <p>This also shows the three files in the certs directory that you have already taken care of, but the first line is the only line you need to change:</p> <pre><code>sed -i -e \"s/STUDENT_GREP11SERVER_IP/${GREP11ServerIP}/g\" server_test.go\n</code></pre> <p>Run this command to ensure that you made the change correctly:</p> <pre><code>grep --after-context 3 ${GREP11ServerIP} server_test.go\n</code></pre> Expected output (your IP will differ, example shown for student02) <pre><code>const Address = \"172.16.0.62:9876\"\nconst cert = \"../certs/client.pem\"\nconst key = \"../certs/client.key\"\nconst ca = \"../certs/grep11-ca.pem\"\n</code></pre>"},{"location":"lab/configureGrep11TestClient/#run-the-grep11-client-code","title":"Run the GREP11 client code","text":"<p>Drum roll please...</p> <p>Enter this command to test your GREP11 client code:</p> <pre><code>go test -v\n</code></pre> <p>Your output should look like this. If it does, you have reached a successful conclusion to the lab!!!</p> Expected output from testing the GREP11 client code <pre><code>=== RUN   Test_signAndVerifyUsingDilithiumKeyPair\nGenerated Dilithium key pair\nData signed\nVerified\n--- PASS: Test_signAndVerifyUsingDilithiumKeyPair (0.05s)\n=== RUN   Test_rewrapKeyBlob\n    server_test.go:1375: \n\n        Skipping the rewrapKeyBlob test. To enable, comment out the t.Skipf and message lines within the Test_rewrapKeyBlob test\n\n        NOTE: This test contains two pauses that require the user to type CTRL-c after ensuring\n              that the stated pre-requisite activity has been completed.  There needs to be \n              coordination with your HPCS cloud service contact in order to place your HSM\n              into the required states.\n\n--- SKIP: Test_rewrapKeyBlob (0.00s)\n=== RUN   Example_getMechanismInfo\n--- PASS: Example_getMechanismInfo (0.01s)\n=== RUN   Example_generateGenericKey\n--- PASS: Example_generateGenericKey (0.01s)\n=== RUN   Example_encryptAndDecryptUsingAES\n--- PASS: Example_encryptAndDecryptUsingAES (0.02s)\n=== RUN   Example_digest\n--- PASS: Example_digest (0.01s)\n=== RUN   Example_signAndVerifyUsingRSAKeyPair\n--- PASS: Example_signAndVerifyUsingRSAKeyPair (0.04s)\n=== RUN   Example_signAndVerifyUsingDSAKeyPair\n--- PASS: Example_signAndVerifyUsingDSAKeyPair (0.54s)\n=== RUN   Example_deriveKeyUsingDHKeyPair\n--- PASS: Example_deriveKeyUsingDHKeyPair (1.51s)\n=== RUN   Example_signAndVerifyUsingECDSAKeyPair\n--- PASS: Example_signAndVerifyUsingECDSAKeyPair (0.02s)\n=== RUN   Example_signAndVerifyToTestErrorHandling\n--- PASS: Example_signAndVerifyToTestErrorHandling (0.02s)\n=== RUN   Example_wrapAndUnwrapKey\n--- PASS: Example_wrapAndUnwrapKey (0.04s)\n=== RUN   Example_deriveKey\n--- PASS: Example_deriveKey (0.04s)\n=== RUN   Example_wrapAndUnwrapAttributeBoundKey\n--- PASS: Example_wrapAndUnwrapAttributeBoundKey (0.03s)\n=== RUN   Example_tls\n--- PASS: Example_tls (0.03s)\nPASS\nok    github.com/IBM-Cloud/hpcs-grep11-go/examples    2.373s\n</code></pre> <p>Before you go, check out the your rsyslog log messages to see evidence of the test you just ran:</p> <pre><code>journalctl --since \"-5 minutes \" --output short-full --no-pager\n</code></pre> <p>The above command assumes you ran this within five minutes of running the test.  If you missed the boat, then just rerun the test again or change the argument to --since to show a longer timeframe of messages.</p>"},{"location":"lab/configureRsyslog/","title":"Configure rsyslog service","text":"<p>The HPVS 2.1.3-protected GREP11 Server that you will create later in the lab will log its output to an rsyslog service on the Ubuntu KVM guest that you just started in the previous section. Rsyslog is currently not set up for this, so you will configure rsyslog in this section of the lab.</p> <p>Logging to LogDNA</p> <p>Did you know that you could also log the output of an HPVS 2.1.3 guest to a LogDNA instance on IBM Cloud?  It's true! That is not covered in this lab but if you are interested in this, you can consult the product documentation or contact the instructors, who have done this and probably wouldn't object to getting you started on this.</p>"},{"location":"lab/configureRsyslog/#log-in-to-your-ubuntu-kvm-guest","title":"Log in to your Ubuntu KVM guest","text":"<p>How tricky can logging in be?</p> <p>The Ubuntu KVM guest that you started is in a KVM internal private network that uses NAT (Network Address Translation) in order to communicate with the \"outside world\".  \"Outside world\" in this case refers to any server outside of our RHEL 8.5 host. </p> <p>Your home network is probably doing the same thing</p> <p>Your cable modem or DSL modem or satellite modem provides NAT services for your home network. This modem connects to your network router either:</p> <ul> <li>combined into a single physical unit that acts as a modem and a router (and maybe a toaster or coffee maker- at least it should be given how much my wallet shrinks after paying my monthly bill!)</li> </ul> <p>OR</p> <ul> <li>a separate modem and router you buy yourself for better performance and to save money in the long run (usually you can pay it off instead of the extra fees in a year or two)</li> </ul> <p>tl;dr</p> <p>You will use \"port forwarding\" to get from the RHEL 8.5 host to your Ubuntu KVM guest.  It's a little tricky but we've set things up to make it easy for you. </p> <p>How have we made it easy for you?</p> <p>If you're on an instructor-provided system, we've hopefully set an environment variable for you that specifies the port you'll need to connect to on the RHEL 8.5 host that will allow it to successfully forward your login attempt to your Ubuntu KVM guest.  Run this:</p> <pre><code>echo ${Student_SSH_Port}\n</code></pre> Example output when variable was set <pre><code>silliman@nat-147 ~ % echo ${Student_SSH_Port}     \n20024\n</code></pre> <p>If you don't see a port number somewhere between 20023 and 20042- each student will have a unique port- then ask the instructor for your port and set it with this command (changing  22222 from the example to your instructor-assigned port)</p> <pre><code>export Student_SSH_Port=22222\n</code></pre> <p>For the same reason as explained the last time we asked you to do this, it is optional but recommended to update your shell so that this change will take effect in new terminal windows as well.  Examples are shown for bash and zsh, pick the appropriate command or tailor for your shell:</p> <pre><code>echo \"export Student_SSH_Port='${Student_SSH_Port}'\" &gt;&gt; \"${HOME}/.bashrc\"\n</code></pre> <pre><code>echo \"export Student_SSH_Port='${Student_SSH_Port}'\" &gt;&gt; \"${HOME}/.zshrc\"\n</code></pre> <p>You're now ready to log in to your Ubuntu KVM guest:</p> <pre><code>ssh -p ${Student_SSH_Port} -l student 192.168.22.64\n</code></pre> Example messages logging into Ubuntu KVM guest <pre><code>silliman@nat-147 ~ % ssh -p ${Student_SSH_Port} -l student 192.168.22.64\n\nLast login: Thu Feb  9 19:32:09 2023 from 192.168.215.147\nstudent@ubuntu2204:~$ \n</code></pre> <p>Is my <code>userid</code> really student?</p> <p>That's right, your userid is student on your Ubuntu KVM guest.  Each student has a unique userid on the RHEL 8.5 host, but since each student has their own unique Ubuntu KVM guest, they each have the same userid, student, since they have this guest all to themselves.</p> <p>You may be able to log in without a password prompt, but if not, your instructor will provide you with the password.</p>"},{"location":"lab/configureRsyslog/#install-rsyslog-gnutls-package","title":"Install rsyslog-gnutls package","text":"<p>The initial installation of Ubuntu installed an rsyslog service.  Display it with this command:</p> <pre><code>sudo systemctl status rsyslog\n</code></pre> Example output <pre><code>\u25cf rsyslog.service - System Logging Service\n     Loaded: loaded (/lib/systemd/system/rsyslog.service; enabled; vendor preset: enabled)\n     Active: active (running) since Tue 2023-02-14 00:24:49 UTC; 12min ago\nTriggeredBy: \u25cf syslog.socket\n       Docs: man:rsyslogd(8)\n             man:rsyslog.conf(5)\n             https://www.rsyslog.com/doc/\n   Main PID: 654 (rsyslogd)\n      Tasks: 4 (limit: 2350)\n     Memory: 2.2M\n        CPU: 8ms\n     CGroup: /system.slice/rsyslog.service\n             \u2514\u2500654 /usr/sbin/rsyslogd -n -iNONE\n\nFeb 14 00:24:49 ubuntu2204 systemd[1]: Starting System Logging Service...\nFeb 14 00:24:49 ubuntu2204 systemd[1]: Started System Logging Service.\nFeb 14 00:24:49 ubuntu2204 rsyslogd[654]: imuxsock: Acquired UNIX socket '/run/systemd/journal/syslog' (f&gt;\nFeb 14 00:24:49 ubuntu2204 rsyslogd[654]: rsyslogd's groupid changed to 115\nFeb 14 00:24:49 ubuntu2204 rsyslogd[654]: rsyslogd's userid changed to 107\nFeb 14 00:24:49 ubuntu2204 rsyslogd[654]: [origin software=\"rsyslogd\" swVersion=\"8.2112.0\" x-pid=\"654\" x-&gt;\nFeb 14 00:24:49 ubuntu2204 systemd[1]: rsyslog.service: Sent signal SIGHUP to main process 654 (rsyslogd)&gt;\nFeb 14 00:34:49 ubuntu2204 rsyslogd[654]: [origin software=\"rsyslogd\" swVersion=\"8.2112.0\" x-pid=\"654\" x-&gt;\nlines 1-22/22 (END)\n</code></pre> <p>If you're having trouble getting back to a command prompt, press q (for quit). </p> <p>The default installation of rsyslog needs to be modified to allow it to receive messages sent across the network using the TCP protocol and with mutual TLS authentication.</p> <p>You'll modify the configuration to allow this.  </p> <ol> <li> <p>Become the root user:</p> <pre><code>sudo su -\n</code></pre> Example output when becoming root <pre><code>student@ubuntu2204:~$ sudo su -\nroot@ubuntu2204:~# \n</code></pre> </li> <li> <p>Create the proper configuration file in the /etc/rsyslog.d/ directory:</p> <pre><code>cat &lt;&lt; EOF &gt; /etc/rsyslog.d/server.conf\n# output to journal\nmodule(load=\"omjournal\")\ntemplate(name=\"journal\" type=\"list\") {\n# can add other metadata here\nproperty(outname=\"PRIORITY\" name=\"pri\")\nproperty(outname=\"SYSLOG_FACILITY\" name=\"syslogfacility\")\nproperty(outname=\"SYSLOG_IDENTIFIER\" name=\"app-name\")\nproperty(outname=\"HOSTNAME\" name=\"hostname\")\nproperty(outname=\"MESSAGE\"  name=\"msg\")\n}\n\nruleset(name=\"journal-output\") {\naction(type=\"omjournal\" template=\"journal\")\n}\n\n# make gtls driver the default and set certificate files\n\\$DefaultNetstreamDriver \"gtls\"\n\\$DefaultNetstreamDriverCAFile /var/lib/rsyslog/x509/ca.crt\n\\$DefaultNetstreamDriverCertFile /var/lib/rsyslog/x509/server.crt\n\\$DefaultNetstreamDriverKeyFile /var/lib/rsyslog/x509/server-key.pem\n\n# load TCP listener\nmodule(\nload=\"imtcp\"\nStreamDriver.Name=\"gtls\"\nStreamDriver.Mode=\"1\"\nStreamDriver.Authmode=\"x509/certvalid\"\n)\n\n# start up listener at port 6514\ninput(\ntype=\"imtcp\"\nport=\"6514\"\nruleset=\"journal-output\"\n)\n\nEOF\n</code></pre> <p>We might have had you put the cart before the horse a little bit because there is some work to do to ensure that what you've added to this configuration file actually works! But we did this so that we can point out the sections that are requiring this extra work.</p> <p>Take a look close to the bottom of the file</p> <p>There are two sections of interest that are highlighted in the above code block. If these lines could speak to you, they would say, \"We are going to receive TCP messages, and we will use TLS to authenticate with the sender of these messages, and here are the certificate and keys needed to enable this to work\".</p> <p>For this configuration file to work, you'll need to install a software package to allow rsyslog to receive TLS-authenticated TCP messages and you'll need to create the certificate and keys and put them where the configuration file says you put them.</p> </li> <li> <p>Prove to yourself that the rsyslog package has already been installed (by the \"bare-bones\" default Ubuntu setup):</p> <pre><code>apt-cache policy rsyslog\n</code></pre> Output showing rsyslog is already installed <pre><code>rsyslog:\n    Installed: 8.2112.0-2ubuntu2.2\n    Candidate: 8.2112.0-2ubuntu2.2\n    Version table:\n*** 8.2112.0-2ubuntu2.2 500\n500 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x Packages\n        500 http://ports.ubuntu.com/ubuntu-ports jammy-security/main s390x Packages\n        100 /var/lib/dpkg/status\n    8.2112.0-2ubuntu2 500\n500 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x Packages\n</code></pre> </li> <li> <p>Prove to yourself that the rsyslog-gnutls package has not been installed yet:</p> <pre><code>apt-cache policy rsyslog-gnutls\n</code></pre> Output showing rsyslog-gnutls is not installed <pre><code>rsyslog-gnutls:\n    Installed: (none)\n    Candidate: 8.2112.0-2ubuntu2.2\n    Version table:\n    8.2112.0-2ubuntu2.2 500\n        500 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x Packages\n        500 http://ports.ubuntu.com/ubuntu-ports jammy-security/main s390x Packages\n    8.2112.0-2ubuntu2 500\n        500 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x Packages\n</code></pre> </li> <li> <p>Remedy the situation (not having rsyslog-gnutls package installed):</p> <pre><code>apt-get install rsyslog-gnutls\n</code></pre> Output from installing rsyslog-gnutls <pre><code>Reading package lists... Done\nBuilding dependency tree... Done\nReading state information... Done\nSuggested packages:\n    gnutls-bin\nThe following NEW packages will be installed:\n    rsyslog-gnutls\n0 upgraded, 1 newly installed, 0 to remove and 0 not upgraded.\nNeed to get 17.8 kB of archives.\nAfter this operation, 90.1 kB of additional disk space will be used.\nGet:1 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x rsyslog-gnutls s390x 8.2112.0-2ubuntu2.2 [17.8 kB]\nFetched 17.8 kB in 0s (71.9 kB/s)         \nSelecting previously unselected package rsyslog-gnutls.\n(Reading database ... 56568 files and directories currently installed.)\nPreparing to unpack .../rsyslog-gnutls_8.2112.0-2ubuntu2.2_s390x.deb ...\nUnpacking rsyslog-gnutls (8.2112.0-2ubuntu2.2) ...\nSetting up rsyslog-gnutls (8.2112.0-2ubuntu2.2) ...\nScanning processes...                                                                                     \nScanning linux images...                                                                                  \n\nRunning kernel seems to be up-to-date (ABI upgrades are not detected).\n\nNo services need to be restarted.\n\nNo containers need to be restarted.\n\nNo user sessions are running outdated binaries.\n\nNo VM guests are running outdated hypervisor (qemu) binaries on this host.\n</code></pre> </li> <li> <p>Optional: Repeat <code>apt-cache policy rsyslog-gnutls</code> to see that the package is now installed:</p> <pre><code>apt-cache policy rsyslog-gnutls\n</code></pre> Output showing that rsyslog-gnutls is installed <pre><code>rsyslog-gnutls:\n    Installed: 8.2112.0-2ubuntu2.2\n    Candidate: 8.2112.0-2ubuntu2.2\n    Version table:\n*** 8.2112.0-2ubuntu2.2 500\n        500 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x Packages\n        500 http://ports.ubuntu.com/ubuntu-ports jammy-security/main s390x Packages\n        100 /var/lib/dpkg/status\n    8.2112.0-2ubuntu2 500\n        500 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x Packages\n</code></pre> </li> </ol>"},{"location":"lab/configureRsyslog/#create-ca-for-your-rsyslog-service","title":"Create CA for your rsyslog service","text":""},{"location":"lab/configureRsyslog/#background-information","title":"Background Information","text":"<p>The TLS authentication for communication with the rysyslog service requires an X509 certificate and private key.  An X509 certificate contains a public key that goes with the private key.  Think of a public key as a yummy cake baked with yellow dough, it's moist and tastes pretty good- but the X509 certificate wrapped around it is like the chocolate icing and the rainbow sprinkles- it's delicious!  (Break time!!) If you haven't given up on the analogy, think of the private key as the secret recipe to bake the cake that nobody but you knows about. </p> <p>An X509 certificate needs to be created and signed by a certification authority (CA). </p> <p>The authority prefers certification</p> <p>Did you know that 99.999% of people call a CA a \"certificate authority\" but that the Internet Request for Comment (RFC) that defines the X509 standard uses the term \"certification authority\"?</p> <p>For the lab you will create your own CA- what is often called a \"self-signed\" CA. A utility called <code>openssl</code> can be used to do this.  A CA signs certificates that it creates. In order to digitally sign something, you use a private key.  In simple terms, a publicly known algorithm- which can be poked at and prodded at by researchers and academics in an effort to prove its security or to hopefully win a large bounty by proving its insecurity- is run against a private key that nobody else knows, and produces a unique output, or signature.  This signature can be verified algorithmically by anybody who holds the private key's corresponding public key.</p> Who holds the public key? <p>That's right, the public !</p> <p>So if you receive a piece of digital information and a public key, you can prove that whoever signed this had to have held the private key in order to create the signature.  Okay, cool.  But what if a malicious actor had the private key and gave you the public key? Would you feel so great knowing you verified the signer if they were malicious?  No!  That is where a CA comes in. The idea is that the following process occurs:</p> <ol> <li>An individual or organization submits a request for a certificate (CSR) with their public key</li> <li>CA takes the effort to verify that the owner of the public key is a good actor and is who they say they are and that they can be trusted</li> <li>CA creates the certificate that holds the public key (essentially stating \"I am a CA and you can trust me and the holder of this certificate that I just signed is a good person and they are who they say they are, so you can trust this certificate and anything it signs\")</li> </ol> How is that working out for us? <p>See software supply chain attacks.</p> <p>But this is a lab and you're going to create your own CA.  Hopefully, you trust yourself  enough to feel comfortable with this...</p>"},{"location":"lab/configureRsyslog/#hands-on-keyboard-time","title":"Hands on keyboard time","text":"<ol> <li> <p>Get out of root for the moment, as you'll be doing this certificate work with your regular authority:</p> <pre><code>exit\n</code></pre> Output when getting out of root <pre><code>root@ubuntu2204:~# exit\nlogout\n</code></pre> <p>Your prompt should now end with a dollar sign ($) indicating you are operating with your regular authority as userid student, as opposed to the hash sign (#) prompt that you had when you were operating with root authority.  </p> </li> <li> <p>Run this command sequence:</p> <pre><code>cd ${HOME} &amp;&amp; mkdir -p rsyslogWork &amp;&amp; cd rsyslogWork\n</code></pre> <p>It accomplishes the following:</p> <ol> <li>Ensure you are in your home directory (which you already are in unless you wandered off on your own)</li> <li>Create a fresh directory that you'll work in for this activity</li> <li>Switch to this new directory</li> </ol> </li> <li> <p>Create a private key. It will be the private key your self-signed CA will use so call it <code>ca-key.pem</code>:</p> <pre><code>openssl genrsa -out ca-key.pem 4096\n</code></pre> </li> <li> <p>Run the following command to create a configuration file for your CA</p> <pre><code>cat &lt;&lt; EOF &gt; ca.cnf\n[ req ]\ndefault_bits = 2048\ndefault_md = sha256\nprompt = no\nencrypt_key = no\ndistinguished_name = dn\n\n[ dn ]\nC = US\nO = IBM WSC zSystems and LinuxONE\nCN = CA for rsyslog for SE-enabled KVM guests\n\nEOF\n</code></pre> <p>Why are we using .cnf configuration files?</p> <p>Some <code>openssl</code> commands have a tendency to ask a bunch of questions which can be tedious and error-prone when typing the answers, but you can avoid that by creating a configuration file that provides the answers and thus avoids the questions.  You'll see this pattern more than once.</p> </li> <li> <p>A CA itself has a certificate that it can send or make available to others (others being people, or computer processes, or whomever). So let's create a CSR:</p> <pre><code>openssl req -config ca.cnf -key ca-key.pem -new -out ca-req.csr\n</code></pre> <p>Certificate Signing Request (CSR)</p> <p>The RSA algorithm is a magical mystery tour to most mortals, but the algorithm is such that the public key can be extracted from a private key. You will use the private key as input to a command that will create what is known as a CSR. A CSR is a file that contains the public key (the yellow dough) and other information (the icing and the sprinkles) that you then send to the CA and say \"please, please, I'm a good person and you can trust me and please create a real certificate for me\".  A CSR is like a caterpillar  and the resulting certificate is like a beautiful butterfly .</p> <p>Now you have a certificate signing request. </p> <p>So you normally send a CSR to a CA to sign.  There's a \"chicken or the egg\" problem here.  If a CA needs a Certificate,  and a Certificate has to be created by another CA, then how did that CA get created?  By another CA?  Yes, possibly.  But, does the chain go on forever?  No-  at some point in the chain the CA's certificate was signed by its own private key, and not a higher CA.  This is the root of the chain, and it is self-signed. In real life, a chain could be many layers deep, but it eventually has to stop.  Think of it like a management chain in an organization's org chart-  there are first-line managers, second-line managers, and so forth up to the CEO.  The Root certificate is like the CEO.  </p> </li> <li> <p>Since you're the boss of your lab, and the worker, you don't need a big long chain of CA's.  Just one will do fine.  So you'll build a single root, or self-signed, CA, and you'll like it!  :</p> <pre><code>openssl x509 -signkey ca-key.pem -in ca-req.csr -req -days 365 -out ca.crt\n</code></pre> Output from creating self-signed CA certificate <pre><code>Certificate request self-signature ok\nsubject=C = US, O = IBM WSC zSystems and LinuxONE, CN = CA for rsyslog for SE-enabled KVM guests\n</code></pre> </li> </ol>"},{"location":"lab/configureRsyslog/#create-certificate-and-key-for-your-rsyslog-service","title":"Create certificate and key for your rsyslog service","text":""},{"location":"lab/configureRsyslog/#process-overview","title":"Process Overview","text":"<p>In real life, a CA will probably issue lots of certificates- it's how they make money.  Your CA is only going to create a couple:</p> <ul> <li>a certificate for the rsyslog service which you will create next.</li> <li>a certificate for the client (your future GREP11 Server) of the rsyslog service, which you will create later in the lab.  </li> </ul> <p>The process is similar:</p> <ol> <li>Create a private key</li> <li>Create a configuration file to answer questions ahead of time</li> <li>Use the key and the config file to create a CSR</li> <li>This time we'll have the \"self-signed\" CA you just created sign the certificate it creates.  </li> </ol>"},{"location":"lab/configureRsyslog/#creation-time","title":"Creation time","text":"<ol> <li> <p>Create the private key:</p> <pre><code>openssl genrsa -out server-key.pem 4096\n</code></pre> </li> <li> <p>Create the configuration file to preemptively answer the inevitable questions.  See if you can find the two places where I use an amazingly complicated command pipe that somehow puts a whole bunch of information in a blender and comes up with your machine's IP address. (Brought to you by the \"Just because you can do something, doesn't mean you should\" Department)</p> <pre><code>export ipline=\"$(ip route get 1.1.1.1 | grep -oP 'src \\K[^ ]+')\" &amp;&amp; \\\ncat &lt;&lt; EOF &gt; server.cnf\n[ req ]\ndefault_bits = 2048\ndefault_md = sha256\nprompt = no\nencrypt_key = no\ndistinguished_name = dn\n\n[ server ]\nsubjectAltName = IP:${ipline}\nextendedKeyUsage = serverAuth\n\n[ dn ]\nC = US\nO = Rsyslog Test Server\nCN = ${ipline}\nEOF\n</code></pre> <p>Optional: You know you can't resist looking at the output file to see if that IP magic worked, so just do it:</p> <pre><code>cat server.cnf\n</code></pre> </li> <li> <p>Create the rsyslog service's CSR:</p> <pre><code>openssl req -config server.cnf -key server-key.pem -new -out server-req.csr\n</code></pre> </li> <li> <p>\"Send\" the request to your \"self-signed\" CA in order to create the certificate:</p> <pre><code>openssl x509 -req -in server-req.csr -days 365 -CA ca.crt -CAkey ca-key.pem -CAcreateserial -extfile server.cnf -extensions server -out server.crt\n</code></pre> Example output from certificate creation <pre><code>Certificate request self-signature ok\nsubject=C = US, O = Rsyslog Test Server, CN = 172.16.0.42\n</code></pre> <ol> <li> <p>This was hard work (and you're not done yet), so take a breather and run this command to display the rsyslog service's certificate in a form that a human can at least attempt to comprehend:</p> <pre><code>openssl x509 -noout -text -in server.crt </code></pre> Example human-readable display of certificate <pre><code>Certificate:\n    Data:\n        Version: 3 (0x2)\n        Serial Number:\n            72:1b:54:77:9d:c9:28:b0:7c:f0:b8:d6:dc:24:e1:b1:60:fa:59:f7\n        Signature Algorithm: sha256WithRSAEncryption\n        Issuer: C = US, O = IBM WSC zSystems and LinuxONE, CN = CA for rsyslog for SE-enabled KVM guests\n        Validity\n            Not Before: Feb 14 01:18:18 2023 GMT\n            Not After : Feb 14 01:18:18 2024 GMT\n        Subject: C = US, O = Rsyslog Test Server, CN = 172.16.0.42\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n                Public-Key: (4096 bit)\n                Modulus:\n                    00:aa:ed:d0:83:3c:65:8c:6c:4d:f5:bc:bc:56:e9:\n                    3c:57:ab:b8:3c:29:14:2a:73:d6:ca:a0:7e:0c:00:\n                    fc:4f:cc:28:88:1c:01:e9:26:9e:5e:0b:60:5e:ee:\n                    69:f3:c7:c8:f9:26:19:71:a7:1a:c1:54:3a:3d:6b:\n                    01:4a:e2:20:ab:89:a5:31:a7:f4:a2:39:71:30:21:\n                    29:17:4f:04:15:73:1d:b7:b6:c2:81:c2:f1:d9:a8:\n                    29:d8:ca:c9:d6:97:f3:37:8e:17:9d:a7:b1:30:c8:\n                    5c:1c:be:e2:75:5e:9f:88:08:76:54:5a:ee:40:d4:\n                    90:26:2b:74:35:71:a2:d1:4d:86:db:46:bf:18:38:\n                    0a:fb:e4:1a:ab:ef:f6:49:1e:7b:bc:76:71:3a:b7:\n                    5e:e8:c0:c7:3d:db:74:2d:87:20:5b:e6:5e:27:67:\n                    1a:e9:e1:ea:20:b8:d2:fc:5e:2d:79:c0:e5:46:22:\n                    cf:6e:26:54:c6:00:d1:d0:05:46:0b:9d:97:8c:cb:\n                    68:e7:a4:b2:9a:47:21:67:e5:56:32:cb:ba:c3:0e:\n                    c8:f3:f4:17:02:ca:ee:ac:37:0e:f3:40:cf:a4:56:\n                    98:9d:b3:e3:e2:c2:43:d7:3b:a5:c1:09:92:2b:e9:\n                    fb:5b:a6:73:d0:83:97:c9:70:7f:f8:84:59:b3:b6:\n                    4f:e8:40:98:92:74:5c:8c:9f:db:27:7f:94:4b:00:\n                    a6:cf:06:9b:0f:a9:f4:35:17:01:e6:d6:6d:c2:78:\n                    f8:41:59:f6:f6:f2:11:d1:52:28:b5:06:78:ba:db:\n                    12:f2:3f:c6:ef:14:64:cd:85:49:ce:8e:fc:91:b8:\n                    2a:c3:25:6a:cc:3c:46:9d:e8:10:aa:30:fd:3b:55:\n                    3a:26:97:00:8b:62:c4:d6:89:f0:36:68:13:63:19:\n                    ba:18:f4:0c:4f:bc:5d:34:c8:24:d9:8e:2f:4b:e5:\n                    d9:dd:9f:39:8d:00:54:fe:d9:00:d7:f1:71:6b:8b:\n                    9c:ed:66:de:6a:26:3f:48:cb:3a:4a:fc:9c:50:12:\n                    f5:da:dc:e7:e5:08:6c:0a:6d:60:73:cf:e6:b2:3e:\n                    06:59:98:00:2c:97:25:38:01:50:2e:c2:c6:35:fa:\n                    e4:d5:20:01:fb:9d:ca:4c:78:3f:7a:ad:c7:5d:db:\n                    5e:04:c7:0f:e2:9f:a1:e9:27:f8:f2:a9:9f:00:07:\n                    58:68:c9:3f:d6:41:5b:46:90:f5:26:6a:04:2c:cf:\n                    44:c9:f8:1e:5d:38:95:95:71:e2:30:57:d5:83:41:\n                    73:a4:00:88:6b:99:84:71:d3:60:ce:32:9c:bb:3b:\n                    39:46:a7:77:fd:7e:ed:1c:81:02:e3:da:83:85:2c:\n                    c9:60:c7\n                Exponent: 65537 (0x10001)\n        X509v3 extensions:\n            X509v3 Subject Alternative Name: \n                IP Address:172.16.0.42\n            X509v3 Extended Key Usage: \n                TLS Web Server Authentication\n            X509v3 Subject Key Identifier: \n                CC:01:AD:BA:8C:5F:31:B9:58:A9:2D:4E:05:C7:B1:B7:82:10:90:05\n            X509v3 Authority Key Identifier: \n                DirName:/C=US/O=IBM WSC zSystems and LinuxONE/CN=CA for rsyslog for SE-enabled KVM guests\n                serial:0B:4A:84:C6:84:00:F8:7F:B7:0A:F0:82:FD:4E:C1:F2:99:C2:63:BC\n    Signature Algorithm: sha256WithRSAEncryption\n    Signature Value:\n        4c:a3:7a:76:21:0d:8f:db:e9:3a:a6:3f:6b:3a:9a:5d:bb:ac:\n        7e:75:5c:ed:69:3c:b9:2b:6e:84:1c:fc:1f:56:47:ff:b3:38:\n        92:fe:0f:5b:2c:87:32:0e:8f:60:c3:33:ff:d5:89:26:61:9a:\n        7f:ce:ae:f3:6b:cc:77:1b:4d:d0:59:5f:d9:09:e1:fa:21:5c:\n        6a:6f:b3:71:45:10:98:4f:6e:fe:08:7f:31:42:e6:dd:83:9a:\n        11:de:2d:eb:b5:b9:40:4d:80:86:7f:f8:88:cc:87:60:38:d4:\n        e2:9a:89:9d:ec:43:61:ad:34:96:38:93:ca:4a:63:8d:cc:b7:\n        33:98:33:e2:63:c1:7b:04:98:80:b3:e1:54:df:f6:24:57:82:\n        98:c4:e8:64:8a:3b:d2:af:65:56:d7:97:c0:c3:dc:45:06:c9:\n        4f:ce:5b:d3:49:7f:2b:28:83:27:57:b9:bf:1a:46:81:68:4c:\n        6b:85:d7:db:f0:d4:25:7b:3d:92:63:d0:91:b5:ec:df:cb:e4:\n        6b:6c:b0:c4:47:3c:c6:91:64:33:f6:11:6b:5b:f7:70:bd:e1:\n        71:ef:a6:28:57:b2:a0:e0:2e:ef:ab:34:7a:c4:b8:24:18:88:\n        5f:92:0b:92:ca:14:a2:b6:62:ab:2c:e6:c2:bb:27:91:54:de:\n        84:56:1e:ed:f3:7d:b7:e8:34:b4:78:76:2c:1f:af:d9:61:b7:\n        6e:59:fa:e8:33:38:b4:5e:30:69:71:06:4d:df:fe:cb:46:03:\n        ba:69:7c:85:3c:f0:73:f7:d8:4e:b0:39:aa:79:72:1f:52:2e:\n        05:cb:81:9f:e3:62:6b:66:55:7c:92:13:21:62:dc:fd:9d:8f:\n        f8:77:dd:d2:b6:61:c4:8f:fa:fa:a0:74:95:fa:9d:f2:5d:d2:\n        7d:d4:41:95:d8:41:50:99:7d:80:3d:36:28:75:28:62:67:05:\n        11:a3:95:c7:85:8f:20:37:d6:b8:b5:8a:f6:8a:e3:d0:85:6e:\n        cd:2a:41:f9:e7:48:bb:b0:b7:54:dc:6b:df:c9:a2:5e:f7:61:\n        c2:3a:4c:82:7e:6b:e9:82:cf:c6:3a:7f:a2:ae:39:00:d9:ac:\n        bf:8a:84:72:e6:ae:c1:75:e0:92:60:5e:cd:4b:64:1f:5a:44:\n        3a:09:15:2c:95:b8:c3:ca:44:ec:79:1e:d5:96:bc:20:9a:7a:\n        cf:6b:e4:cf:e0:91:f2:c2:e6:fd:f1:8a:66:c4:ae:eb:90:90:\n        f4:ec:64:66:9a:9a:11:8d:11:ab:ef:05:d2:42:fb:e5:2c:78:\n        8a:db:16:b7:96:ae:06:b8:42:b4:c7:23:26:b2:9a:c2:85:d8:\n        6b:6d:d8:4e:84:0e:ab:a1\n</code></pre> </li> </ol> </li> </ol>"},{"location":"lab/configureRsyslog/#copy-certificates-and-private-key-to-the-location-specified-in-the-etcrsyslogdserverconf-file","title":"Copy certificates and private key to the location specified in the /etc/rsyslog.d/server.conf file","text":"<p>The configuration file you created in rsyslog a little while ago (near the top of this page) specified <code>/var/lib/rsyslog/x509</code> as the directory to hold some files. You just created these files in your rsyslogWork directory, so now create the /var/lib/rsyslog/x509 directory and copy the files in there:</p> <pre><code>sudo mkdir -p /var/lib/rsyslog/x509 &amp;&amp; \\\nfor file in ca.crt server.crt server-key.pem ; do \\\nsudo cp -ipv ${file} /var/lib/rsyslog/x509/. ; \\\ndone \\\n&amp;&amp; sudo chown -R syslog:syslog /var/lib/rsyslog\n</code></pre> Output from copying files <pre><code>'ca.crt' -&gt; '/var/lib/rsyslog/x509/./ca.crt'\n'server.crt' -&gt; '/var/lib/rsyslog/x509/./server.crt'\n'server-key.pem' -&gt; '/var/lib/rsyslog/x509/./server-key.pem'\n</code></pre>"},{"location":"lab/configureRsyslog/#restart-your-rsyslog-service","title":"Restart your rsyslog service","text":"<p>You'll truly know that you configured everything correctly later in the lab when you try to write messages to it from your yet-to-be-created HPVS 2.1.3 GREP11 Server. But for now, we will verify it somewhat by taking a before and after snapshot of which TCP ports on your system are listening.  </p> <p>Run this command, and then in a moment you'll repeat the command.  What you should notice here is the absence of port 6514 in the output:</p> <pre><code>sudo lsof -nP -iTCP -sTCP:LISTEN\n</code></pre> Output showing listening TCP ports <pre><code>COMMAND   PID            USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\nsystemd-r 602 systemd-resolve   14u  IPv4  15472      0t0  TCP 127.0.0.53:53 (LISTEN)\nsshd      709            root    3u  IPv4  16871      0t0  TCP *:22 (LISTEN)\nsshd      709            root    4u  IPv6  16882      0t0  TCP *:22 (LISTEN)\n</code></pre> <p>You are now ready to restart the rsyslog service on your machine:</p> <pre><code>sudo systemctl restart rsyslog\n</code></pre> <p>No news is good news on the above command- it's pretty quiet when it works.</p> <p>Display the rsyslog service's status and notice it hasn't been active very long, since it was just restarted:</p> <pre><code>sudo systemctl status rsyslog\n</code></pre> <p>Reminder:  q gets you back to a command prompt.</p> Output showing rsyslog status after restart <pre><code>\u25cf rsyslog.service - System Logging Service\n     Loaded: loaded (/lib/systemd/system/rsyslog.service; enabled; vendor preset: enabled)\n     Active: active (running) since Tue 2023-02-14 01:30:47 UTC; 13s ago\nTriggeredBy: \u25cf syslog.socket\n       Docs: man:rsyslogd(8)\n             man:rsyslog.conf(5)\n             https://www.rsyslog.com/doc/\n   Main PID: 1439 (rsyslogd)\n      Tasks: 9 (limit: 2350)\n     Memory: 1.8M\n        CPU: 1.008s\n     CGroup: /system.slice/rsyslog.service\n             \u2514\u25001439 /usr/sbin/rsyslogd -n -iNONE\n\nFeb 14 01:30:46 ubuntu2204 systemd[1]: Starting System Logging Service...\nFeb 14 01:30:47 ubuntu2204 rsyslogd[1439]: imuxsock: Acquired UNIX socket '/run/systemd/journal/syslog' (&gt;\nFeb 14 01:30:47 ubuntu2204 rsyslogd[1439]: rsyslogd's groupid changed to 115\nFeb 14 01:30:47 ubuntu2204 rsyslogd[1439]: rsyslogd's userid changed to 107\nFeb 14 01:30:47 ubuntu2204 rsyslogd[1439]: [origin software=\"rsyslogd\" swVersion=\"8.2112.0\" x-pid=\"1439\" &gt;\nFeb 14 01:30:47 ubuntu2204 systemd[1]: Started System Logging Service.\n</code></pre> <p>Now when you rerun the command to see the listening TCP ports, seeing 6514 in the output is an indication of success.  If you don't see 6514 in the output, it's time to make those instructors earn their keep:</p> <pre><code>sudo lsof -nP -iTCP -sTCP:LISTEN\n</code></pre> Expected output showing port 6514 is listening <pre><code>COMMAND    PID            USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\nsystemd-r  602 systemd-resolve   14u  IPv4  15472      0t0  TCP 127.0.0.53:53 (LISTEN)\nsshd       709            root    3u  IPv4  16871      0t0  TCP *:22 (LISTEN)\nsshd       709            root    4u  IPv6  16882      0t0  TCP *:22 (LISTEN)\nrsyslogd  1439          syslog    6u  IPv4  22401      0t0  TCP *:6514 (LISTEN)\nrsyslogd  1439          syslog    7u  IPv6  22402      0t0  TCP *:6514 (LISTEN)\n</code></pre> <p>Log off of your Ubuntu KVM guest:</p> <pre><code>exit\n</code></pre> <p>Please proceed to the next section of the lab by clicking the Next link on the bottom right of this page.</p>"},{"location":"lab/configureRsyslogForGREP11/","title":"Create rsyslog client certificate for the GREP11 Server","text":""},{"location":"lab/configureRsyslogForGREP11/#overview-of-this-section","title":"Overview of this section","text":"<p>In the last section you created the following:</p> <ol> <li>self-signed CA for the rsyslog service</li> <li>server certificate for the rsyslog service</li> </ol> <p>In this section you will use your self-signed CA (1 above) to create:</p> <ol> <li>client certificate for your (not-yet-created) HPVS 2.1.3 GREP11 Server</li> </ol> <p>Your GREP11 Server will be a client to the rsyslog service. (It serves clients who want to make GREP11 requests, but it is a client to the rsyslog service. )</p> <p>Please read the instructions carefully</p> <p>You'll be switching between userids on the following 2 systems:</p> <ol> <li>KVM host</li> <li>Ubuntu KVM guest (that was created for you and hosts the rsyslog service)</li> </ol>"},{"location":"lab/configureRsyslogForGREP11/#log-in-to-the-rhel-host","title":"Log in to the RHEL host","text":"<pre><code>ssh -l ${StudentID} 192.168.22.64\n</code></pre>"},{"location":"lab/configureRsyslogForGREP11/#create-certificate-for-client-access-to-rsyslog","title":"Create certificate for client access to rsyslog","text":"<ol> <li> <p>Create and switch to a working directory:</p> <pre><code>mkdir ~/rsyslogClientWork &amp;&amp; cd rsyslogClientWork\n</code></pre> </li> <li> <p>Create a new private key:</p> <pre><code>openssl genrsa -out client-key.pem 4096\n</code></pre> Example output when creating RSA private key <pre><code>Generating RSA private key, 4096 bit long modulus (2 primes)\n..++++\n................................................................................++++\ne is 65537 (0x010001)\n</code></pre> <p>You should see output similar to what is shown above on the RHEL 8.5 host.  This same command was very quiet on your Ubuntu KVM guest.</p> </li> <li> <p>Create a configuration file:</p> <pre><code>cat &lt;&lt; EOF &gt; client.cnf\n[ req ]\ndefault_bits = 2048\ndefault_md = sha256\nprompt = no\nencrypt_key = no\ndistinguished_name = dn\n\n[ dn ]\nC = US\nO = IBM WSC zSystems and LinuxONE\nCN = SE-enabled HPVS 2.1.3 Grep11 Server\n\nEOF\n</code></pre> </li> <li> <p>Create a certificate signing request (CSR):</p> <pre><code>openssl req -config client.cnf -key client-key.pem -new -out client-req.csr\n</code></pre> </li> <li> <p>Now we are going to use a pattern that is similar to a real-world pattern:</p> <p>You are going to send your CSR (which you just created on the host) to the Rsyslog CA (which is on your Ubuntu KVM guest):</p> <pre><code>scp client-req.csr student@${StudentGuestIP}:./rsyslogWork/.\n</code></pre> <p>As shown in the sample output below, you may need to type yes since this is the first connection between the two systems, and you may have to enter a password that will be supplied by the instructors:</p> Example prompt and output when sending file <pre><code>The authenticity of host '172.16.0.42 (172.16.0.42)' can't be established.\nECDSA key fingerprint is SHA256:QBZpZnpbKTyu8uG3XmcB3z2STnArtTjeVPwBtQONSnc.\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nWarning: Permanently added '172.16.0.42' (ECDSA) to the list of known hosts.\nstudent@172.16.0.42's password: \nclient-req.csr                                                          100% 1691     9.2MB/s   00:00 \n</code></pre> </li> <li> <p>Log off from the host:</p> <pre><code>exit\n</code></pre> </li> <li> <p>Put on your CA hat and log in to your Ubuntu KVM guest </p> <pre><code>ssh -p ${Student_SSH_Port} -l student 192.168.22.64\n</code></pre> </li> <li> <p>You are now the CA registrar. Switch to your working directory and find the certificate signing request(CSR) that your customer (i.e., you) sent to you.  </p> <pre><code>cd rsyslogWork &amp;&amp; ls -l client*.csr\n</code></pre> Make sure your csr is listed <pre><code>-rw-r--r-- 1 student student 1691 Feb 14 01:47 client-req.csr\n</code></pre> </li> <li> <p>You will do your due diligence and check the contents of the CSR:</p> <pre><code>openssl req -noout -text -in client-req.csr\n</code></pre> Example human-readable display of CSR <pre><code>Certificate Request:\n    Data:\n        Version: 1 (0x0)\n        Subject: C = US, O = IBM WSC zSystems and LinuxONE, CN = SE-enabled HPVS 2.1.3 Grep11 Server\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n                Public-Key: (4096 bit)\n                Modulus:\n                    00:b0:38:b1:27:ee:a2:9f:35:10:dd:74:b2:46:e6:\n                    b8:2a:e4:c9:7f:7d:b3:1d:45:96:7d:bc:9d:5a:90:\n                    06:64:da:b8:23:73:f3:99:46:54:a3:2a:a8:8e:db:\n                    10:96:7e:de:04:65:81:ee:68:f1:5e:4d:a1:3d:db:\n                    2e:44:3a:ff:e2:fe:60:86:ad:90:b9:91:f1:4b:94:\n                    c9:43:4a:85:56:32:2a:ab:c9:2a:71:de:b7:fc:40:\n                    e2:1b:aa:17:08:3a:65:4a:b8:70:d8:5c:b4:b6:ca:\n                    4f:8d:a1:d0:03:04:20:4e:7e:23:26:20:85:45:e4:\n                    21:ec:bb:f8:38:64:36:6d:7c:a1:8a:d8:af:14:1b:\n                    72:bf:e8:cd:2f:2d:2c:0b:5a:39:4e:53:41:f8:a0:\n                    33:91:be:90:64:18:1c:cf:c2:d9:a0:bf:78:db:88:\n                    19:6b:be:0c:10:76:fc:96:fb:01:14:f5:90:8a:4d:\n                    a8:0c:0b:10:29:1d:fb:45:e1:f2:59:b5:33:e5:20:\n                    f8:76:22:c8:4d:d1:55:dc:de:10:79:66:b8:ff:fa:\n                    ee:e4:03:a5:77:9d:50:a1:f2:60:35:84:e1:44:ef:\n                    f4:be:be:a9:1b:17:5e:26:4a:ea:24:7d:ff:80:d2:\n                    d6:95:4f:1b:b6:5e:22:c6:f2:81:17:bb:fe:ce:f6:\n                    44:29:79:4e:ad:76:04:db:a7:8d:a4:db:8c:e3:cd:\n                    bf:48:37:99:4c:1c:e0:26:0f:9f:8b:a4:1f:48:71:\n                    44:d0:5f:ae:c6:93:83:ab:b8:7b:7b:b8:f3:1d:f1:\n                    7d:34:3b:d5:32:f0:74:d9:ee:0b:cd:e7:a9:54:49:\n                    2b:23:dc:1a:57:ae:a3:03:d8:9c:47:14:75:0c:47:\n                    c6:be:e3:84:61:e7:15:b8:fe:0b:5f:53:a0:f6:a8:\n                    92:e4:2c:c9:51:43:de:3f:be:0f:a6:c7:44:1f:81:\n                    c9:c0:9d:d3:3a:42:2f:b0:52:59:47:c6:da:96:93:\n                    ba:e7:11:f4:dd:ba:75:46:86:b5:ef:ee:49:34:92:\n                    36:03:32:00:99:71:ed:83:1a:cd:3f:e3:79:7b:ee:\n                    04:49:59:aa:01:ce:4d:67:0e:0f:88:e6:62:82:1e:\n                    0b:07:01:cf:74:38:20:7b:0d:69:f5:2e:09:e5:84:\n                    20:f3:82:15:7f:a4:0d:ae:35:da:de:f2:a9:30:6e:\n                    3e:e3:72:26:b3:18:10:6c:d7:df:4c:fc:bf:e3:33:\n                    8c:c6:e3:83:04:db:c9:a9:a8:41:d2:97:be:a0:ec:\n                    bd:f1:89:18:eb:c5:e7:0b:fc:47:30:c8:e1:cd:e6:\n                    54:cd:f1:e7:c3:23:51:48:4f:fd:89:49:43:6d:96:\n                    e0:cc:69\n                Exponent: 65537 (0x10001)\n        Attributes:\n            (none)\n            Requested Extensions:\n    Signature Algorithm: sha256WithRSAEncryption\n    Signature Value:\n        8d:0b:7b:fd:eb:6b:04:85:4f:b6:a8:81:8f:03:77:aa:26:7d:\n        58:44:3a:af:1b:de:fe:73:52:38:7c:8b:e9:2d:47:34:93:31:\n        9d:04:0b:08:3a:3c:92:72:cf:60:c6:3b:83:6c:9a:8d:7b:08:\n        4b:13:44:8b:3c:14:58:f7:b6:26:8c:c8:d5:29:f7:f8:fb:98:\n        a6:9f:78:6a:9a:f4:10:88:16:55:b8:83:ee:7d:1b:95:4c:02:\n        77:10:9c:ca:61:01:c7:33:7f:65:81:6e:5e:18:25:a7:68:26:\n        e0:5e:b5:6d:89:00:31:ed:21:bf:32:c8:13:4b:00:c6:a3:b5:\n        5f:4d:13:4c:86:51:31:59:02:92:fd:88:30:3a:1f:ac:da:8b:\n        82:25:b2:3d:7e:1d:1f:e3:55:aa:7a:26:1f:85:b6:86:87:34:\n        9a:36:5e:55:0b:a9:6b:dd:77:56:4f:54:3e:27:ec:ac:a7:aa:\n        ea:bb:86:40:a2:e8:af:88:77:5b:41:ec:42:0f:06:1e:7a:36:\n        85:5f:36:14:d4:02:30:3c:27:8d:85:61:0c:93:83:a0:0d:cd:\n        e7:c3:ac:02:d9:49:2e:58:a5:a1:24:33:56:a6:6c:e1:dc:dc:\n        5b:11:32:65:84:08:70:7e:b2:52:2f:34:5e:83:46:45:8e:91:\n        dc:4a:2d:31:2d:3e:3a:4a:03:a2:c4:02:d9:7f:6a:89:42:10:\n        da:a4:7a:24:c2:2a:b5:fb:25:c8:1b:45:5f:f1:85:91:ca:0a:\n        44:74:8f:60:44:86:e5:49:ab:d9:d1:d8:fa:0c:6d:1f:a8:7c:\n        7c:6f:3f:66:0b:d9:46:5a:5c:4d:6e:79:7a:c2:eb:d2:02:a9:\n        80:1e:66:53:b9:fd:5d:cf:6e:86:e7:58:7f:a4:74:31:cd:9f:\n        b6:c2:b0:24:69:70:2f:9e:6e:4f:2d:74:53:8b:15:74:6c:08:\n        bd:f0:b9:d2:e4:e0:a4:14:cf:b1:77:4d:6d:88:8a:ee:c7:6c:\n        4b:15:c9:91:85:7d:a2:fa:cd:10:27:b3:27:fc:3b:f2:d1:86:\n        57:33:0d:27:02:f2:c6:ab:46:8e:00:de:88:1f:59:d0:fd:6f:\n        30:39:94:ba:af:17:89:37:df:0d:9e:1a:a7:d6:49:de:f5:40:\n        61:e3:fa:52:70:3d:57:76:9f:fa:15:30:be:64:85:27:61:b0:\n        02:9f:f6:20:c3:2d:1a:84:44:48:f6:08:db:f8:80:b9:ea:38:\n        16:52:fe:2a:c0:f1:d9:8f:80:37:9f:fd:e2:ec:1e:99:c3:01:\n        2d:b6:11:dd:5a:29:c8:02:2c:aa:d7:3f:78:c5:f2:fe:29:d7:\n        98:f4:d1:1d:7e:9e:5d:8d\n</code></pre> </li> <li> <p>Time to mint the certificate</p> <p>Due diligence check</p> <p>For the purposes of this lab assume you've done a background check on the customer, checked their reviews on Yelp and NextDoor, looked at their Facebook page and LinkedIn profiles.  You're a little concerned with some of those college fraternity party pictures on Facebook, but, what the heck, their check has cleared the bank, so you decide to go ahead and mint the certificate.</p> <pre><code>openssl x509 -req -in client-req.csr \\\n-days 365 -CA ca.crt -CAkey ca-key.pem \\\n-CAcreateserial -out client.crt\n</code></pre> Output from creating the certificate <pre><code>Certificate request self-signature ok\nsubject=C = US, O = IBM WSC zSystems and LinuxONE, CN = SE-enabled HPVS 2.1.3 Grep11 Server\n</code></pre> </li> <li> <p>Your quality control department asks you to display the certificate before sending it to the customer:</p> <pre><code>openssl x509 -noout -text -in client.crt </code></pre> It should look similar to this [click to expand] <pre><code>Certificate:\n    Data:\n        Version: 1 (0x0)\n        Serial Number:\n            29:4a:dd:c7:66:81:ab:5a:1d:bb:20:76:a0:25:34:90:21:93:40:6b\n        Signature Algorithm: sha256WithRSAEncryption\n        Issuer: C = US, O = IBM WSC zSystems and LinuxONE, CN = CA for rsyslog for SE-enabled KVM guests\n        Validity\n            Not Before: Feb 14 01:58:14 2023 GMT\n            Not After : Feb 14 01:58:14 2024 GMT\n        Subject: C = US, O = IBM WSC zSystems and LinuxONE, CN = SE-enabled HPVS 2.1.3 Grep11 Server\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n                Public-Key: (4096 bit)\n                Modulus:\n                    00:b0:38:b1:27:ee:a2:9f:35:10:dd:74:b2:46:e6:\n                    b8:2a:e4:c9:7f:7d:b3:1d:45:96:7d:bc:9d:5a:90:\n                    06:64:da:b8:23:73:f3:99:46:54:a3:2a:a8:8e:db:\n                    10:96:7e:de:04:65:81:ee:68:f1:5e:4d:a1:3d:db:\n                    2e:44:3a:ff:e2:fe:60:86:ad:90:b9:91:f1:4b:94:\n                    c9:43:4a:85:56:32:2a:ab:c9:2a:71:de:b7:fc:40:\n                    e2:1b:aa:17:08:3a:65:4a:b8:70:d8:5c:b4:b6:ca:\n                    4f:8d:a1:d0:03:04:20:4e:7e:23:26:20:85:45:e4:\n                    21:ec:bb:f8:38:64:36:6d:7c:a1:8a:d8:af:14:1b:\n                    72:bf:e8:cd:2f:2d:2c:0b:5a:39:4e:53:41:f8:a0:\n                    33:91:be:90:64:18:1c:cf:c2:d9:a0:bf:78:db:88:\n                    19:6b:be:0c:10:76:fc:96:fb:01:14:f5:90:8a:4d:\n                    a8:0c:0b:10:29:1d:fb:45:e1:f2:59:b5:33:e5:20:\n                    f8:76:22:c8:4d:d1:55:dc:de:10:79:66:b8:ff:fa:\n                    ee:e4:03:a5:77:9d:50:a1:f2:60:35:84:e1:44:ef:\n                    f4:be:be:a9:1b:17:5e:26:4a:ea:24:7d:ff:80:d2:\n                    d6:95:4f:1b:b6:5e:22:c6:f2:81:17:bb:fe:ce:f6:\n                    44:29:79:4e:ad:76:04:db:a7:8d:a4:db:8c:e3:cd:\n                    bf:48:37:99:4c:1c:e0:26:0f:9f:8b:a4:1f:48:71:\n                    44:d0:5f:ae:c6:93:83:ab:b8:7b:7b:b8:f3:1d:f1:\n                    7d:34:3b:d5:32:f0:74:d9:ee:0b:cd:e7:a9:54:49:\n                    2b:23:dc:1a:57:ae:a3:03:d8:9c:47:14:75:0c:47:\n                    c6:be:e3:84:61:e7:15:b8:fe:0b:5f:53:a0:f6:a8:\n                    92:e4:2c:c9:51:43:de:3f:be:0f:a6:c7:44:1f:81:\n                    c9:c0:9d:d3:3a:42:2f:b0:52:59:47:c6:da:96:93:\n                    ba:e7:11:f4:dd:ba:75:46:86:b5:ef:ee:49:34:92:\n                    36:03:32:00:99:71:ed:83:1a:cd:3f:e3:79:7b:ee:\n                    04:49:59:aa:01:ce:4d:67:0e:0f:88:e6:62:82:1e:\n                    0b:07:01:cf:74:38:20:7b:0d:69:f5:2e:09:e5:84:\n                    20:f3:82:15:7f:a4:0d:ae:35:da:de:f2:a9:30:6e:\n                    3e:e3:72:26:b3:18:10:6c:d7:df:4c:fc:bf:e3:33:\n                    8c:c6:e3:83:04:db:c9:a9:a8:41:d2:97:be:a0:ec:\n                    bd:f1:89:18:eb:c5:e7:0b:fc:47:30:c8:e1:cd:e6:\n                    54:cd:f1:e7:c3:23:51:48:4f:fd:89:49:43:6d:96:\n                    e0:cc:69\n                Exponent: 65537 (0x10001)\n    Signature Algorithm: sha256WithRSAEncryption\n    Signature Value:\n        9f:41:62:18:0f:db:0a:84:f6:59:bc:cd:22:e4:73:d6:18:b0:\n        d0:4e:2a:da:8f:5c:46:06:f1:80:f3:4b:5d:cf:fe:a2:a3:97:\n        cc:bd:96:8e:d2:d4:58:ab:ac:56:dd:6f:12:3b:52:a8:df:e5:\n        4b:26:8e:92:b3:ed:28:9a:c3:28:6d:8b:f9:13:b0:01:fa:ed:\n        8f:48:08:08:07:ac:8f:61:00:fc:53:41:9e:d2:53:c5:b8:d7:\n        f4:f2:c9:cc:87:58:2d:48:f3:34:be:fe:0d:dc:9e:b6:11:74:\n        18:da:92:db:db:b3:c6:4f:10:63:6c:4c:fb:5f:86:36:9a:a8:\n        58:a9:d3:d9:7c:e0:8d:2f:96:f3:64:85:bf:8d:39:28:d2:06:\n        8b:63:93:d6:42:e3:ad:6d:5b:2e:d3:5a:3d:3c:af:1e:a2:61:\n        a0:d7:c7:a0:4f:b7:16:f1:3b:94:44:23:d8:16:6f:d7:38:36:\n        84:10:31:ac:e7:17:43:2a:24:04:26:5b:46:50:03:05:7c:8d:\n        cc:77:f5:c1:c1:e3:a2:04:4a:6d:7c:b2:c7:1e:e3:68:b0:4e:\n        24:92:63:dd:bd:87:3c:af:8c:63:a5:ea:2f:41:90:67:79:e3:\n        31:89:41:54:be:aa:44:89:45:65:85:2e:5e:b9:8c:af:7c:7e:\n        0f:08:9a:9b:97:7c:6f:fc:9f:30:e8:0c:30:c4:be:7a:0c:7d:\n        d0:45:71:f2:a7:35:c3:f9:f1:b7:2c:9e:1d:a1:da:3b:70:59:\n        5b:05:93:a3:fc:59:41:c5:db:bf:0f:20:ec:15:ef:64:61:7e:\n        52:3b:6a:a1:69:0b:73:93:52:a4:a3:79:ca:b3:0c:b8:cd:2b:\n        59:b5:19:03:2e:21:b8:b5:d3:8d:05:2e:d6:0d:b0:9a:7d:e9:\n        f9:e7:2b:96:3a:a5:e3:05:b6:d8:0a:e2:ea:2f:b0:02:42:ba:\n        a5:9c:1d:d8:29:7f:3b:bd:7c:73:1a:4a:ae:ca:3a:1d:50:16:\n        3a:42:3c:0c:23:6a:15:ed:57:01:88:f3:dc:b7:e3:3e:55:48:\n        31:07:4f:38:9c:dc:10:71:e8:8c:82:d3:9e:a6:97:ca:70:20:\n        e9:70:31:b2:46:09:79:03:20:93:b0:16:af:07:67:eb:0c:4f:\n        b0:c0:a9:e8:eb:bc:ab:74:37:93:76:89:92:82:f3:48:a5:a1:\n        16:62:39:2d:d5:79:67:e2:ea:6e:a9:6e:40:e1:7f:da:01:df:\n        f0:4f:6f:a0:36:80:ae:ab:a2:4d:07:6e:ba:14:bf:85:82:50:\n        e1:3d:df:64:bc:91:3d:60:c4:90:8c:3b:6f:0f:11:31:a6:5f:\n        4f:36:5a:69:04:05:88:b5\n</code></pre> </li> <li> <p>Now you send the certificate to the customer:</p> <pre><code>scp client.crt ${StudentID}@192.168.22.64:./rsyslogClientWork/.\n</code></pre> <p>You may be prompted to type yes before connecting and you may be asked to enter an instructor-provided password, as shown in the example below:</p> Example prompt and output from sending file <pre><code>The authenticity of host '192.168.22.64 (192.168.22.64)' can't be established.\nED25519 key fingerprint is SHA256:IJQFhwQnu7GDWPZmz+ICLIIld9FBLJcD+anb2Bu9y7w.\nThis key is not known by any other names\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nWarning: Permanently added '192.168.22.64' (ED25519) to the list of known hosts.\nstudent02@192.168.22.64's password: \nclient.crt                                                              100% 1907     9.7MB/s   00:00 \n</code></pre> </li> <li> <p>Hang up your CA registrar hat and log out of your Ubuntu KVM guest:</p> <pre><code>exit\n</code></pre> </li> <li> <p>Log in to the RHEL 8.5 host:</p> <pre><code>ssh -l ${StudentID} 192.168.22.64\n</code></pre> </li> <li> <p>Switch to the directory where the CA \"sent\" your new certificate and list the files:</p> <pre><code>cd rsyslogClientWork/ &amp;&amp; ls -ltr\n</code></pre> File listing shows your client certificate (client.crt) <pre><code>total 16\n-rw------- 1 student02 hpvs_students 3247 Feb 13 20:42 client-key.pem\n-rw-r--r-- 1 student02 hpvs_students  192 Feb 13 20:44 client.cnf\n-rw-r--r-- 1 student02 hpvs_students 1691 Feb 13 20:45 client-req.csr\n-rw-r--r-- 1 student02 hpvs_students 1907 Feb 13 21:06 client.crt\n</code></pre> </li> <li> <p>Display your certificate in human-readable form to make sure your CA did their job correctly:</p> <pre><code>openssl x509 -noout -text -issuer -subject -in client.crt\n</code></pre> Example display of certificate <pre><code>Certificate:\n    Data:\n        Version: 1 (0x0)\n        Serial Number:\n            29:4a:dd:c7:66:81:ab:5a:1d:bb:20:76:a0:25:34:90:21:93:40:6b\n        Signature Algorithm: sha256WithRSAEncryption\n        Issuer: C = US, O = IBM WSC zSystems and LinuxONE, CN = CA for rsyslog for SE-enabled KVM guests\n        Validity\n            Not Before: Feb 14 01:58:14 2023 GMT\n            Not After : Feb 14 01:58:14 2024 GMT\n        Subject: C = US, O = IBM WSC zSystems and LinuxONE, CN = SE-enabled HPVS 2.1.3 Grep11 Server\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n                RSA Public-Key: (4096 bit)\n                Modulus:\n                    00:b0:38:b1:27:ee:a2:9f:35:10:dd:74:b2:46:e6:\n                    b8:2a:e4:c9:7f:7d:b3:1d:45:96:7d:bc:9d:5a:90:\n                    06:64:da:b8:23:73:f3:99:46:54:a3:2a:a8:8e:db:\n                    10:96:7e:de:04:65:81:ee:68:f1:5e:4d:a1:3d:db:\n                    2e:44:3a:ff:e2:fe:60:86:ad:90:b9:91:f1:4b:94:\n                    c9:43:4a:85:56:32:2a:ab:c9:2a:71:de:b7:fc:40:\n                    e2:1b:aa:17:08:3a:65:4a:b8:70:d8:5c:b4:b6:ca:\n                    4f:8d:a1:d0:03:04:20:4e:7e:23:26:20:85:45:e4:\n                    21:ec:bb:f8:38:64:36:6d:7c:a1:8a:d8:af:14:1b:\n                    72:bf:e8:cd:2f:2d:2c:0b:5a:39:4e:53:41:f8:a0:\n                    33:91:be:90:64:18:1c:cf:c2:d9:a0:bf:78:db:88:\n                    19:6b:be:0c:10:76:fc:96:fb:01:14:f5:90:8a:4d:\n                    a8:0c:0b:10:29:1d:fb:45:e1:f2:59:b5:33:e5:20:\n                    f8:76:22:c8:4d:d1:55:dc:de:10:79:66:b8:ff:fa:\n                    ee:e4:03:a5:77:9d:50:a1:f2:60:35:84:e1:44:ef:\n                    f4:be:be:a9:1b:17:5e:26:4a:ea:24:7d:ff:80:d2:\n                    d6:95:4f:1b:b6:5e:22:c6:f2:81:17:bb:fe:ce:f6:\n                    44:29:79:4e:ad:76:04:db:a7:8d:a4:db:8c:e3:cd:\n                    bf:48:37:99:4c:1c:e0:26:0f:9f:8b:a4:1f:48:71:\n                    44:d0:5f:ae:c6:93:83:ab:b8:7b:7b:b8:f3:1d:f1:\n                    7d:34:3b:d5:32:f0:74:d9:ee:0b:cd:e7:a9:54:49:\n                    2b:23:dc:1a:57:ae:a3:03:d8:9c:47:14:75:0c:47:\n                    c6:be:e3:84:61:e7:15:b8:fe:0b:5f:53:a0:f6:a8:\n                    92:e4:2c:c9:51:43:de:3f:be:0f:a6:c7:44:1f:81:\n                    c9:c0:9d:d3:3a:42:2f:b0:52:59:47:c6:da:96:93:\n                    ba:e7:11:f4:dd:ba:75:46:86:b5:ef:ee:49:34:92:\n                    36:03:32:00:99:71:ed:83:1a:cd:3f:e3:79:7b:ee:\n                    04:49:59:aa:01:ce:4d:67:0e:0f:88:e6:62:82:1e:\n                    0b:07:01:cf:74:38:20:7b:0d:69:f5:2e:09:e5:84:\n                    20:f3:82:15:7f:a4:0d:ae:35:da:de:f2:a9:30:6e:\n                    3e:e3:72:26:b3:18:10:6c:d7:df:4c:fc:bf:e3:33:\n                    8c:c6:e3:83:04:db:c9:a9:a8:41:d2:97:be:a0:ec:\n                    bd:f1:89:18:eb:c5:e7:0b:fc:47:30:c8:e1:cd:e6:\n                    54:cd:f1:e7:c3:23:51:48:4f:fd:89:49:43:6d:96:\n                    e0:cc:69\n                Exponent: 65537 (0x10001)\n    Signature Algorithm: sha256WithRSAEncryption\n        9f:41:62:18:0f:db:0a:84:f6:59:bc:cd:22:e4:73:d6:18:b0:\n        d0:4e:2a:da:8f:5c:46:06:f1:80:f3:4b:5d:cf:fe:a2:a3:97:\n        cc:bd:96:8e:d2:d4:58:ab:ac:56:dd:6f:12:3b:52:a8:df:e5:\n        4b:26:8e:92:b3:ed:28:9a:c3:28:6d:8b:f9:13:b0:01:fa:ed:\n        8f:48:08:08:07:ac:8f:61:00:fc:53:41:9e:d2:53:c5:b8:d7:\n        f4:f2:c9:cc:87:58:2d:48:f3:34:be:fe:0d:dc:9e:b6:11:74:\n        18:da:92:db:db:b3:c6:4f:10:63:6c:4c:fb:5f:86:36:9a:a8:\n        58:a9:d3:d9:7c:e0:8d:2f:96:f3:64:85:bf:8d:39:28:d2:06:\n        8b:63:93:d6:42:e3:ad:6d:5b:2e:d3:5a:3d:3c:af:1e:a2:61:\n        a0:d7:c7:a0:4f:b7:16:f1:3b:94:44:23:d8:16:6f:d7:38:36:\n        84:10:31:ac:e7:17:43:2a:24:04:26:5b:46:50:03:05:7c:8d:\n        cc:77:f5:c1:c1:e3:a2:04:4a:6d:7c:b2:c7:1e:e3:68:b0:4e:\n        24:92:63:dd:bd:87:3c:af:8c:63:a5:ea:2f:41:90:67:79:e3:\n        31:89:41:54:be:aa:44:89:45:65:85:2e:5e:b9:8c:af:7c:7e:\n        0f:08:9a:9b:97:7c:6f:fc:9f:30:e8:0c:30:c4:be:7a:0c:7d:\n        d0:45:71:f2:a7:35:c3:f9:f1:b7:2c:9e:1d:a1:da:3b:70:59:\n        5b:05:93:a3:fc:59:41:c5:db:bf:0f:20:ec:15:ef:64:61:7e:\n        52:3b:6a:a1:69:0b:73:93:52:a4:a3:79:ca:b3:0c:b8:cd:2b:\n        59:b5:19:03:2e:21:b8:b5:d3:8d:05:2e:d6:0d:b0:9a:7d:e9:\n        f9:e7:2b:96:3a:a5:e3:05:b6:d8:0a:e2:ea:2f:b0:02:42:ba:\n        a5:9c:1d:d8:29:7f:3b:bd:7c:73:1a:4a:ae:ca:3a:1d:50:16:\n        3a:42:3c:0c:23:6a:15:ed:57:01:88:f3:dc:b7:e3:3e:55:48:\n        31:07:4f:38:9c:dc:10:71:e8:8c:82:d3:9e:a6:97:ca:70:20:\n        e9:70:31:b2:46:09:79:03:20:93:b0:16:af:07:67:eb:0c:4f:\n        b0:c0:a9:e8:eb:bc:ab:74:37:93:76:89:92:82:f3:48:a5:a1:\n        16:62:39:2d:d5:79:67:e2:ea:6e:a9:6e:40:e1:7f:da:01:df:\n        f0:4f:6f:a0:36:80:ae:ab:a2:4d:07:6e:ba:14:bf:85:82:50:\n        e1:3d:df:64:bc:91:3d:60:c4:90:8c:3b:6f:0f:11:31:a6:5f:\n        4f:36:5a:69:04:05:88:b5\nissuer=C = US, O = IBM WSC zSystems and LinuxONE, CN = CA for rsyslog for SE-enabled KVM guests\nsubject=C = US, O = IBM WSC zSystems and LinuxONE, CN = SE-enabled HPVS 2.1.3 Grep11 Server\n</code></pre> </li> </ol> <p>Click the Next link at the bottom of the page to continue to the next part of the lab, where you will create the contract that HPVS 2.1.3 expects, so that you can run your GREP11 Server.</p>"},{"location":"lab/createGREP11Contract/","title":"Create Contract for GREP11 Server","text":"<p>You should be logged in to the RHEL 8.5 host</p> <p>This section assumes you are logged in to the RHEL 8.5 host, so we are not repeating the ssh command here.  If say you took a break and are logged out just click the Previous link at the bottom of this page, go to the bottom, scroll up until you see the ssh command.  The inconvenience of having you do this is outweighted by the inconvenience that would be caused by trying to log in when you are already logged in.  </p>"},{"location":"lab/createGREP11Contract/#overview-of-this-section","title":"Overview of this section","text":"<p>IBM provides the Secure Execution feature on z15 and newer generations of its IBM zSystems and LinuxONE servers.  Currently, that's z15 and LinuxONE III for the \"z15\" generation and z16 and LinuxONE Emperor 4 for the \"z16\" generation.</p> <p>You could create your own Secure Execution-enabled KVM guests and run a workload in it without Hyper Protect Virtual Servers 2.1.3.  However, there's non-trivial work involved in setting this up.  (Unlike the trivial effort you've expended so far in this lab, right?).  HPVS 2.1.3 has done that hard work for you, and provided a KVM guest image that will run your application workload as an OCI-compliant (again, think \"Docker\" in the popular vernacular) container within the HPVS 2.1.3 KVM guest.  There is still some work involved in setting up the contract that HPVS 2.1.3 expects- but this is work closer to the application or business level. There is also added value in HPVS 2.1.3 in areas such as:</p> <ul> <li> logging</li> <li> attestation</li> <li> verification during boot</li> <li> encryption</li> <li> persistent disk protection</li> <li> separation of duties</li> <li> even more</li> </ul> <p>In fact, this lab in its current iteration only covers a subset of these features (the checked boxes).  (We won't rest on our laurels until we've built this lab out to cover everything under the sun, but, as the saying goes, Rome wasn't built in a day).</p> <p>One of the things we just mentioned in the previous paragraph was separation of duties. In a real world situation, multiple personas could create different portions of the contract:</p> <ul> <li>an application owner deployer might create the workload section of the contract</li> <li>a systems administrator might create the environment section of the contract</li> </ul> <p>Then, you could imagine the following scenario taking place:</p> <ol> <li>application owner can encrypt their piece of the contract such that it can only be decrypted within the HPVS 2.1.3 runtime</li> <li>application owner passes their encrypted piece of the contract to the systems administrator</li> <li>the systems administrator encrypts their own section</li> <li>the systems administrator combines the two sections and signs the resultant contract so that it can be verified by the HPVS 2.1.3 runtime.</li> </ol> <p>Your inquiring mind may say, well that's all well and good, but what about the disk storage of the machine?</p> <p>If your workload requires persistent disk storage (to survive a container restart) then each of the two personas supplies part of a seed that is used in the calculation of an encryption key for the persistent disk. Neither persona has knowledge of the other's part of the seed if it is passed between parties encrypted, so that no human has the ability to decrypt the persistent disk.  The HPVS developers have thought through security very carefully!  </p> <p>Now our lab does not include all of the above features (yet)- for example, the GREP11 Server is stateless (this is a feature, not a bug) so we do not need persistent disk storage.  And for this lab, you have and will continue to wear many hats, including both the application owner workload deployer and the system administrator environment deployer.  We are not going to cover attestation in this lab either, but when the HPVS Product Manager reads this he will try to convince us into making this the next major addition to the lab, and he will succeed.</p>"},{"location":"lab/createGREP11Contract/#creation-of-directory-structure-for-contract","title":"Creation of directory structure for contract","text":"<p>This command will create the directory structure expected by the lab instructions:</p> <pre><code>mkdir -p ${HOME}/contract/grep11Server/{workload,environment}\n</code></pre> <p>A contract consists of a workload section and an environment section, so they each get their own directory. Then the sections are packaged together, and signed, and the signature is added as the third section.  This final result- the contract-  will be stored in your <code>${HOME}/contract/grep11Server</code> directory.</p> <p>It's easy to feel overwhelmed at first, but hopefully as you progress through the lab your level of enlightenment will increase. Most things in life that are worthwhile take a bit of effort.</p>"},{"location":"lab/createGREP11Contract/#create-workload-section-of-the-contract","title":"Create workload section of the contract","text":"<p>Switch to your workload directory:</p> <pre><code>cd ${HOME}/contract/grep11Server/workload\n</code></pre> <p>HPVS expects the contract to specify an OCI container specified by a Docker Compose file.  The Docker Compose file specifies an OCI image to run and other information necessary to configure the resulting container. Your workload is the GREP11 Server, so, yes, there's an OCI image for that. The container that runs the GREP11 Server will be configured with information such as:</p> <ul> <li>listening ports</li> <li>configuration file</li> <li>another configuration file that describes its connection to the CENA4SEE server</li> <li>certificates and keys to enable TLS communication with the CENA4SEE server</li> <li>certificates and keys to enable TLS communication between clients that call the GREP11 Server</li> </ul> <p>That's right, two more \"sets\" of X509 certificates, egads!!  You've already worked with one set for the rsyslog service, and yet you're still here! We'll offer the commands for these next two sets without as much commentary.</p> <p>A brief history of the term 'CENA4SEE', or, you say to-MAY-toe and I say to-MAH-toe<p>You will not see the term CENA4SEE in any official product documentation.  Try googling it. CENA4SEE is the instructor's abbreviation for Crypto Express Network API for Secure Execution Enclaves.  The product documentation often uses the term c16.  When the instructor inquired to the developers what c16 stood for, because he is sure that customers will ask that question, and was told that it doesn't stand for anything, he coined this acronym and will continue to use it until he is threatened with either legal action or involuntary termination of employment.  </p> </p> <p>You are going to put the building blocks for the workload section of the contract together in the following order:</p> <ol> <li> <p>Create docker-compose file</p> </li> <li> <p>Create GREP11 Server configuration file</p> </li> <li> <p>Create configuration file for the GREP11 Server to the CENA4SEE server connection</p> </li> <li> <p>Create x509 material to enable secure communication between GREP11 clients and the GREP11 Server </p> </li> <li> <p>Create x509 material to enable secure communication between GREP11 Server and the CENA4SEE server </p> </li> </ol>"},{"location":"lab/createGREP11Contract/#create-docker-compose-file","title":"Create docker-compose file","text":"<p>Create a directory and switch to it:</p> <pre><code>mkdir -p compose &amp;&amp; cd compose\n</code></pre> <p>Create the docker-compose file:</p> <pre><code>cat &lt;&lt; EOF &gt; docker-compose.yml\nservices:\n  $(whoami)-ep11server:\n    user: \"0\"\n    image: quay.io/gmoney23/grep11server@sha256:a864174faadc39650e61ca45d8a3ceb01ea88602cfe6f4bd4e35c48e60556900\n    ports:\n        - 9876:9876\n    volumes:\n        - ./c16client.yaml:/etc/c16/c16client.yaml\n        - ./c16-ca.pem:/cfg/c16-ca.pem\n        - ./c16-client.key:/cfg/c16-client.key\n        - ./c16-client.pem:/cfg/c16-client.pem\n        - ./grep11server.yaml:/etc/ep11server/ep11server.yaml\n        - ./grep11-ca.pem:/cfg/grep11-ca.pem\n        - ./grep11-server.pem:/cfg/grep11-server.pem\n        - ./grep11-server.key:/cfg/grep11-server.key\n\nEOF\n</code></pre> <p>Notice the value of the image key.  This is the GREP11 Server OCI image provided with the Crypto Express Network API for Secure Execution Enclaves 1.1.1.2 (CENA4SEE) that Garrett (gmoney23) has uploaded to his account on Quay.io for this lab. (Not for your production usage as it could disappear at any time).</p> <p>Notice the list of eight items under the volumes section.  You get to create them!  </p> <p>Each entry in the list has a filename on the host that you will create.  The value after the ':' specifies where that file is mapped to within the OCI container that will run in the HPVS 2.1.3 guest.  Taking the first item in the list as an example, you will create a file named c16client.yaml and then within the OCI container it will be available at /etc/c16/c16client.yaml.  (As an aside, you can also map entire directories from your host to a Docker container, although this example only maps individual files).</p>"},{"location":"lab/createGREP11Contract/#create-the-configuration-file-for-the-grep11-server","title":"Create the configuration file for the GREP11 server","text":"<p>Run this command to create the configuration file for the GREP11 server:</p> <pre><code>cat &lt;&lt; EOF &gt; grep11server.yaml\n#\n# Copyright IBM Corp. All Rights Reserved.\n#\n# SPDX-License-Identifier: Apache-2.0\n#\n\nlogging:\n  # Package log levels\n  # Levels: info, warning, debug, error, fatal, trace, and panic\n  levels:\n    entry: debug\n    # example below\n    # entry: info\n\n###################################\n## GRPC SERVICES TALKING TO GREP11 server ##\nep11crypto:\n  enabled: true\n  connection:\n    address: 0.0.0.0\n    port: 9876\n\n    # Secure connection TLS options\n    tls:\n        enabled: true\n        # certfile, keyfilie and cacert refer to the pem files that holds the certs\n        certfile: /cfg/grep11-server.pem\n        keyfile: /cfg/grep11-server.key\n\n        mutual: true\n        cacert: /cfg/grep11-ca.pem\n\n        # same as above, but instead of filename, contents of PEM can be in an environment\n        # variable (i.e. to avoid mounting files into docker container)\n        cacertbytes:\n        certfilebytes:\n        keyfilebytes:\n\n    # Server TCP/IP connection monitoring\n    # serverKeepaliveTime is the duration in seconds after which if the server\n    # does not see any activity from the client it pings the client to see\n    # if it is alive\n    # serverKeepaliveTimeout is the duration the server waits for a response\n    # from the client after sending a ping before closing the connection\n    keepalive:\n        serverKeepaliveTime: 30\n        serverKeepaliveTimeout: 5\n\n    # Comma-separated list of card.domain tuples. card and domain are hex numbers\n    # i.e. \"08.0016,0a.0016\" corresponds to 22nd (x16) domain on eighth card and 22nd domain on tenth (x0a) card\n  domain: \"08.0016,0a.0016\"\nEOF\n</code></pre>"},{"location":"lab/createGREP11Contract/#create-the-client-configuration-file-for-the-cena4see-server","title":"Create the client configuration file for the CENA4SEE server.","text":"<ol> <li> <p>Run this command to create the client configuration for the the CENA4SEE server:</p> <pre><code>cat &lt;&lt; EOF &gt; c16client.yaml\n#trace, debug, info, warn, err, error, critical, off\nloglevel: 'debug'\nservers:\n  - hostname: 192.168.22.80\n    port: 9001\n    mTLS: true\n    server_cert_file: \"/cfg/c16-ca.pem\"\n    client_key_file: \"/cfg/c16-client.key\"\n    client_cert_file: \"/cfg/c16-client.pem\"\n\nEOF\n</code></pre> <p>Debug log level for lab purposes</p> <p>For the two configuration files you just created, you set the log level to debug. We would probably not recommend a log level of debug for most normal production use cases but you won't be trodding too heavily on the server in the lab and it provides extra information for your current pursuit of knowledge.</p> <p>The value for the hostname in c16client.yaml,  192.168.22.80, is the IP address of the CENA4SEE server running on the SSC LPAR used in the lab.</p> </li> <li> <p>Pick out the names of the files you will be creating from the grep11server.yaml file with the following command:</p> <pre><code>grep -e 'file:' -e 'cacert:' grep11server.yaml\n</code></pre> <p>Your output should look like this:</p> You will create these files in the lab [Click me] <pre><code>    certfile: /cfg/grep11-server.pem\n    keyfile: /cfg/grep11-server.key\n    cacert: /cfg/grep11-ca.pem\n</code></pre> </li> <li> <p>Pick out the names of the files you will be creating or getting from the instructors from the c16client.yaml file with the following command:</p> <pre><code>grep 'file:' c16client.yaml\n</code></pre> You get the first file and create the other two [Click me] <pre><code>    server_cert_file: \"/cfg/c16-ca.pem\"\n    client_key_file: \"/cfg/c16-client.key\"\n    client_cert_file: \"/cfg/c16-client.pem\"\n</code></pre> </li> </ol>"},{"location":"lab/createGREP11Contract/#create-x509-material-for-grep11-client-to-grep11-server-communication","title":"Create x509 material for GREP11 client to GREP11 Server communication","text":"<p>Your GREP11 Server acts as both a server and a client. Its primary purpose is to be a server- to serve requests from GREP11 Clients.  But in order to get its job done, it must send requests to the CENA4SEE server, so it is a client to the CENA4SEE server.  (It is also a client to the rsyslog service so that it can send its log messages there). Yes, it's confusing, but that's why the IT profession offers a living wage in some parts of the world.</p> <p>In this section, you'll set up the material to enable GREP11 Server's role as a, well, GREP11 Server!</p> <ol> <li> <p>Create and change to a new directory which you will use for your self-signed GREP11 Server CA:</p> <pre><code>mkdir -p ${HOME}/GREP11CAwork &amp;&amp; cd ${HOME}/GREP11CAwork\n</code></pre> </li> <li> <p>Create an RSA private key for your self-signed GREP11 Server CA:</p> <pre><code>openssl genrsa -out grep11-ca-key.pem 2048\n</code></pre> </li> <li> <p>Create a configuration file to assist in creation of your self-signed CA for the GREP11 Server:</p> <pre><code>cat &lt;&lt; EOF &gt; ca.cnf\n\n[ req ]\ndefault_bits           = 2048\ndefault_keyfile        = keyfile.pem\ndistinguished_name     = req_distinguished_name\nattributes             = req_attributes\nprompt                 = no\noutput_password        = mypass\n\n[ req_distinguished_name ]\nC                      = US\nST                     = Virginia\nL                      = Herndon\nO                      = IBM\nOU                     = Washington Systems Center - IBM zSystems and LinuxONE\nCN                     = WSC $(whoami) HPVS CA\nemailAddress           = student@notreal.email.com\n\n[ req_attributes ]\nchallengePassword              = A challenge password\n\n[ x509_extensions ]\nsubjectKeyIdentifier   = hash\nauthorityKeyIdentifier = keyid,issuer\nbasicConstraints       = critical,CA:TRUE\n\nEOF\n</code></pre> </li> <li> <p>Create your self-signed CA for the GREP11 Server. Notice it uses the private key you created two commands ago and refers to the configuration file your last command created:</p> <pre><code>openssl req -new -x509 \\\n-key grep11-ca-key.pem \\\n-out grep11-ca.pem \\\n-days 395 -config ca.cnf \\\n-extensions x509_extensions\n</code></pre> </li> <li> <p>Display the CA certificate that you just created:</p> <pre><code>openssl x509 -noout -text -in grep11-ca.pem\n</code></pre> <p>Your output will look similar to this:</p> Example of display of certificate: <pre><code>Certificate:\n    Data:\n        Version: 3 (0x2)\n        Serial Number:\n            61:1d:d1:10:f4:34:bd:84:7b:ca:0b:59:2b:cf:1e:e2:16:5a:01:5c\n        Signature Algorithm: sha256WithRSAEncryption\n        Issuer: C = US, ST = Virginia, L = Herndon, O = IBM, OU = Washington Systems Center - IBM zSystems and LinuxONE, CN = WSC student02 HPVS CA, emailAddress = student@notreal.email.com.com\n        Validity\n            Not Before: Feb 14 14:36:41 2023 GMT\n            Not After : Mar 15 14:36:41 2024 GMT\n        Subject: C = US, ST = Virginia, L = Herndon, O = IBM, OU = Washington Systems Center - IBM zSystems and LinuxONE, CN = WSC student02 HPVS CA, emailAddress = student@notreal.email.com\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n                RSA Public-Key: (2048 bit)\n                Modulus:\n                    00:a6:56:f3:c4:81:58:e0:d5:cd:87:28:38:bc:6b:\n                    e3:0f:b4:c7:61:2e:bd:4e:17:b0:a2:65:2e:ad:63:\n                    d1:2a:b4:a2:45:d6:f3:9d:ba:8a:0d:66:72:fd:15:\n                    b1:d3:4c:08:ff:3c:8d:c0:c4:23:86:c2:65:18:19:\n                    35:03:bb:3c:d5:e2:7a:66:47:4a:6e:d1:eb:37:3f:\n                    f7:62:c0:35:45:5f:38:7a:2f:4a:1e:aa:f7:8b:4a:\n                    55:6f:bb:b4:e3:1e:a6:62:20:55:df:1f:04:1e:70:\n                    73:c5:32:b5:5e:77:6f:45:6d:43:fd:01:76:84:83:\n                    6f:c8:9a:6e:20:27:81:94:af:e7:fb:7c:c0:8c:91:\n                    bf:f1:47:d3:05:a7:56:69:29:bd:1b:59:0d:54:c0:\n                    53:e1:d8:58:a9:f1:d1:fb:d4:c0:e1:9d:f3:f2:36:\n                    51:ff:60:2a:91:28:9d:07:5e:27:5f:3a:68:f0:7e:\n                    5a:29:cb:1a:5e:b1:c5:98:e1:14:fa:38:29:67:81:\n                    4e:e3:4b:a2:bb:c7:c3:b5:24:c4:d4:c5:23:d8:70:\n                    2b:98:97:e2:ef:26:32:5a:ea:02:ea:3f:48:90:7f:\n                    a5:6f:b3:49:68:0a:31:d6:c9:18:c8:57:f7:7c:e0:\n                    4d:e4:46:f7:3c:30:7a:4a:16:df:f4:c9:b7:d8:c0:\n                    e7:bb\n                Exponent: 65537 (0x10001)\n        X509v3 extensions:\n            X509v3 Subject Key Identifier: \n                E3:62:2B:39:9A:DB:57:77:DE:A2:C5:7E:11:A6:76:22:5F:F7:91:9D\n            X509v3 Authority Key Identifier: \n                keyid:E3:62:2B:39:9A:DB:57:77:DE:A2:C5:7E:11:A6:76:22:5F:F7:91:9D\n\n            X509v3 Basic Constraints: critical\n                CA:TRUE\n    Signature Algorithm: sha256WithRSAEncryption\n        88:11:95:13:b8:fb:f8:b0:67:2c:a7:8f:d5:7b:27:24:e1:77:\n        45:4a:9d:af:fe:8b:34:f8:84:dc:80:69:a6:fb:50:5f:ce:86:\n        5d:a2:30:f5:f0:d9:1b:7a:92:9e:c1:69:78:f3:42:65:9f:2f:\n        3e:c9:61:96:bf:93:5a:4f:e9:70:16:de:b1:91:78:b7:0a:38:\n        2c:54:6c:21:32:be:90:e9:b5:25:29:d7:df:b2:a5:86:2d:bc:\n        04:9a:ca:ee:cb:1b:29:02:6e:59:4f:86:85:d9:06:a3:1b:8e:\n        94:df:9b:9b:56:20:f2:33:02:3c:ff:17:c3:46:04:2d:db:64:\n        1a:0f:9d:7b:2d:b6:af:dd:c4:5b:ad:70:89:09:5d:3b:02:b7:\n        74:24:79:e2:b5:a4:1a:ed:f9:8a:55:73:f6:20:4d:4f:88:42:\n        24:77:08:92:09:7d:42:2e:40:88:fa:42:1a:2b:10:b6:8f:28:\n        a1:b8:33:7c:99:fa:c6:29:0f:50:85:cd:f7:e0:b1:b7:ea:14:\n        0f:ac:a6:cd:16:3a:a9:7a:0e:f4:13:b5:35:f0:87:0d:5d:67:\n        d3:14:c3:e8:0e:b7:b1:4f:60:0b:c5:ca:23:93:6e:38:15:ee:\n        0b:e4:97:79:f9:97:43:ff:9d:42:f5:ea:80:96:d7:7b:b3:2b:\n        d1:4d:7f:36\n</code></pre> <p>Within your <code>${HOME}/GREP11CAWork</code> directory, you are a certification authority!</p> </li> <li> <p>If you change to this directory, you will be soon be a customer of your CA:</p> <pre><code>cd ${HOME}/contract/grep11Server/workload/compose\n</code></pre> </li> <li> <p>You want to create a certificate for your GREP11 Server to use for authenticating to GREP11 clients.  Start by creating an RSA private key:</p> <pre><code>openssl genrsa -out grep11-server.key 2048\n</code></pre> </li> <li> <p>Create a configuration file to assist the creation of your GREP11 Server's CSR:</p> <pre><code>cat &lt;&lt; EOF &gt; serverCSR.cnf\n# OpenSSL configuration file.\n#\n\n# Establish working directory.\n\ndir   = .\n\n[ ca ]\ndefault_ca  = CA_default\n\n[ CA_default ]\nserial   = $dir/serial\ndefault_days  = 365\ndefault_md  = sha256\npreserve  = no\nemail_in_dn  = no\nnameopt   = default_ca\ncertopt   = default_ca\ndefault_crl_days = 45\npolicy   = policy_match\n\n[ policy_match ]\ncountryName  = match\nstateOrProvinceName = optional\norganizationName = match\norganizationalUnitName = optional\ncommonName  = supplied\nemailAddress  = optional\n\n[ req ]\ndefault_md  = sha256\ndistinguished_name = req_distinguished_name\nprompt             = no\n\n[ req_distinguished_name ]\n\nC  = US\nST = Virginia\nL  = Herndon\nO  = IBM  \nOU = Washington Systems Center - IBM zSystems and LinuxONE\n\nCN = \\$ENV::COMMON_NAME\n\nEOF\n</code></pre> </li> <li> <p>Create the certificate signing request:</p> <pre><code>COMMON_NAME=${GREP11ServerIP}  openssl req -new -key grep11-server.key \\\n-out grep11-server.csr -config serverCSR.cnf\n</code></pre> </li> <li> <p>In your current directory, <code>${HOME}/contract/grep11Server/workload/compose</code>, you are a \"customer\" of the CA you created in <code>${HOME}/GREP11CAwork</code>.      Thus, \"send\" your CSR to your CA:</p> <pre><code>cp -ipv grep11-server.csr ${HOME}/GREP11CAwork/.\n</code></pre> </li> <li> <p>Put your CA hat back on and go to the CA directory:</p> <pre><code>cd ${HOME}/GREP11CAwork/\n</code></pre> </li> <li> <p>Create a configuration file to assist the creation of your GREP11 Server certificate:</p> <pre><code>cat &lt;&lt; EOF &gt; server.cnf\n# OpenSSL configuration file.\n#\n\n# Establish working directory.\n\ndir   = .\n\n[ ca ]\ndefault_ca  = CA_default\n\n[ CA_default ]\nserial   = $dir/serial\ndefault_days  = 365\ndefault_md  = sha256\npreserve  = no\nemail_in_dn  = no\nnameopt   = default_ca\ncertopt   = default_ca\ndefault_crl_days = 45\npolicy   = policy_match\n\n[ policy_match ]\ncountryName  = match\nstateOrProvinceName = optional\norganizationName = match\norganizationalUnitName = optional\ncommonName  = supplied\nemailAddress  = optional\n\n[ req ]\ndefault_md  = sha256\ndistinguished_name = req_distinguished_name\nprompt             = no\n\n[ req_distinguished_name ]\nC  = US\nST = Virginia\nL  = Herndon\nO  = IBM  \nOU = Washington Systems Center - IBM zSystems and LinuxONE\nCN = \\${ENV::COMMON_NAME}\n\n[ server ]\nbasicConstraints = CA:FALSE\nkeyUsage = digitalSignature, keyEncipherment, dataEncipherment\nextendedKeyUsage = serverAuth\nnsCertType = server\ncrlDistributionPoints = @crl\nsubjectAltName = \\${ENV::SUBJECT_ALT_NAME}\n\n[ crl ]\nURI=http://localhost/ca.crl\n\nEOF\n</code></pre> </li> <li> <p>Now, create the certificate:</p> <pre><code>SUBJECT_ALT_NAME=DNS:192.168.22.64:${GREP11ServerForwardedPort},IP:192.168.22.64,DNS:${GREP11ServerIP}:9876,IP:${GREP11ServerIP} \\\nCOMMON_NAME=${GREP11ServerIP} openssl x509 -sha256 -req \\\n-in grep11-server.csr -CA grep11-ca.pem -CAkey grep11-ca-key.pem \\\n-set_serial 8086 -extfile server.cnf -extensions server \\\n-days 390 -outform PEM -out grep11-server.pem\n</code></pre> Example output from certificate creation <pre><code>Signature ok\nsubject=C = US, ST = Virginia, L = Herndon, O = IBM, OU = Washington Systems Center - IBM zSystems and LinuxONE, CN = 172.16.0.61\nGetting CA Private Key\n</code></pre> </li> <li> <p>Display the info of the certificate you just created:</p> <pre><code>openssl x509 -noout -text -in grep11-server.pem\n</code></pre> <p>Your certificate will look similar to this:</p> Certificate info <pre><code>Certificate:\n    Data:\n        Version: 3 (0x2)\n        Serial Number: 8086 (0x1f96)\n        Signature Algorithm: sha256WithRSAEncryption\n        Issuer: C = US, ST = Virginia, L = Herndon, O = IBM, OU = Washington Systems Center - IBM zSystems and LinuxONE, CN = WSC student02 HPVS CA, emailAddress = student@notreal.email.com.com\n        Validity\n            Not Before: Feb 14 14:47:20 2023 GMT\n            Not After : Mar 10 14:47:20 2024 GMT\n        Subject: C = US, ST = Virginia, L = Herndon, O = IBM, OU = Washington Systems Center - IBM zSystems and LinuxONE, CN = 172.16.0.61\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n                RSA Public-Key: (2048 bit)\n                Modulus:\n                    00:ac:16:8c:e2:82:f2:18:4d:b0:c2:6b:1e:62:93:\n                    a2:6b:58:8f:eb:60:78:49:20:e1:68:64:d9:b7:a1:\n                    a7:3d:ce:ae:ca:f9:86:8e:c8:bd:f8:fc:e3:b6:bb:\n                    19:7d:d7:8d:59:36:c6:d6:63:44:d3:14:06:ff:92:\n                    d6:ee:c9:fe:ad:4c:a0:fe:c6:96:fa:5b:29:e4:bd:\n                    08:0b:da:1a:d0:38:eb:f6:90:12:a4:34:a4:b3:21:\n                    63:31:06:32:19:9b:33:d6:f1:93:36:f1:b7:27:c3:\n                    8f:9b:31:c7:ce:e9:b6:61:15:48:c7:a2:c6:80:18:\n                    46:79:73:75:67:6d:78:d1:ec:28:19:24:fc:72:38:\n                    37:49:be:05:60:54:0c:9f:fe:52:5f:a1:16:77:98:\n                    fc:a3:d8:2e:fe:f3:b2:4f:eb:2f:45:ad:b1:c9:35:\n                    05:f3:ab:e5:44:13:24:53:e9:67:93:47:08:a8:42:\n                    f3:68:61:66:14:65:d2:c1:fe:09:05:06:3d:5f:72:\n                    5c:8b:8b:6b:c4:13:3d:71:9b:f3:5b:29:95:33:e4:\n                    3e:d4:1a:04:9a:93:71:07:ec:02:58:c9:f2:47:b8:\n                    d3:dc:db:6f:c4:bc:ff:67:e9:b0:bb:f7:5e:f8:ca:\n                    a4:cf:5e:ef:05:cf:06:25:56:1e:c4:ee:24:0d:4e:\n                    c9:e7\n                Exponent: 65537 (0x10001)\n        X509v3 extensions:\n            X509v3 Basic Constraints: \n                CA:FALSE\n            X509v3 Key Usage: \n                Digital Signature, Key Encipherment, Data Encipherment\n            X509v3 Extended Key Usage: \n                TLS Web Server Authentication\n            Netscape Cert Type: \n                SSL Server\n            X509v3 CRL Distribution Points: \n\n                Full Name:\n                URI:http://localhost/ca.crl\n\n            X509v3 Subject Alternative Name: \n                DNS:192.168.22.64:19878, IP Address:192.168.22.64, DNS:172.16.0.61:9876, IP Address:172.16.0.61\n    Signature Algorithm: sha256WithRSAEncryption\n        84:1e:74:25:f5:7b:d5:c4:d1:7a:7e:5d:c6:84:87:96:2a:75:\n        7c:20:ce:40:c4:8d:54:d5:2a:cd:53:81:b6:c0:46:73:e8:55:\n        88:ac:8c:21:0e:71:3c:1a:8f:3e:25:34:55:fc:aa:23:dc:9b:\n        ba:0b:5f:4a:e3:c3:09:d6:c4:d7:4c:27:a1:d3:d2:0d:f0:a2:\n        e0:64:d2:89:b6:61:18:1e:c9:a7:ee:66:fb:36:53:58:3d:a9:\n        5c:03:4a:fa:5f:e7:10:08:5a:8b:e0:24:1a:90:48:b2:1c:5e:\n        63:d9:23:60:24:80:5f:f6:27:7e:9f:6c:d9:9e:58:98:71:80:\n        e3:ea:1b:fa:4a:dc:67:7e:e9:23:fe:5f:d1:09:a9:3f:bc:6e:\n        9b:09:47:3a:4e:df:50:8d:26:0f:e2:75:25:ec:ce:80:1d:a7:\n        38:29:ef:b2:d6:f0:4e:7d:68:c2:b4:7e:00:7a:ff:79:8f:32:\n        8e:c1:79:54:38:3a:40:de:6b:d3:b7:6f:31:7d:ac:71:7e:37:\n        27:ac:7c:e7:b9:7e:12:b2:78:41:68:f4:5e:35:77:8c:d9:3c:\n        94:f7:0f:95:1c:1b:31:62:9c:f9:99:09:2c:60:03:7c:9c:c1:\n        56:c7:a0:7e:7b:0e:c3:22:42:95:76:ee:9c:1a:b4:e5:a8:a8:\n        6d:0f:b3:1f\n</code></pre> </li> <li> <p>\"Send\" the completed certificate to the \"customer\":</p> <pre><code>cp -ipv grep11-server.pem ${HOME}/contract/grep11Server/workload/compose/.\n</code></pre> </li> <li> <p>Also send your public certificate to the customer as they will need it to verify certificates that are sent by their connection partners. (GREP11 clients in this case).</p> <pre><code>cp -ipv grep11-ca.pem ${HOME}/contract/grep11Server/workload/compose/.\n</code></pre> </li> <li> <p>Switch directories again:</p> <pre><code>cd ${HOME}/contract/grep11Server/workload/compose\n</code></pre> </li> </ol>"},{"location":"lab/createGREP11Contract/#create-x509-material-for-grep11-server-to-cena4see-server-communication","title":"Create x509 material for GREP11 Server to CENA4SEE Server communication","text":"<ol> <li> <p>Learn a new argument (--after-context) to the grep command and display just a portion of the docker-compose file:</p> <pre><code>grep --after-context 8 volumes docker-compose.yml\n</code></pre> Expected output <pre><code>    volumes:\n    - ./c16client.yaml:/etc/c16/c16client.yaml\n    - ./c16-ca.pem:/cfg/c16-ca.pem\n    - ./c16-client.key:/cfg/c16-client.key\n    - ./c16-client.pem:/cfg/c16-client.pem\n    - ./grep11server.yaml:/etc/ep11server/ep11server.yaml\n    - ./grep11-ca.pem:/cfg/grep11-ca.pem\n    - ./grep11-server.pem:/cfg/grep11-server.pem\n    - ./grep11-server.key:/cfg/grep11-server.key\n</code></pre> <p>Of the eight files, you have created five of them:</p> <ul> <li> 2 .yaml files</li> <li> 3 grep11-* files</li> <li> 3 c16-* files</li> </ul> </li> <li> <p>Now it is time to create or acquire the three files called for from c16client.yaml.</p> <p>There is only one CENA4SEE server that all of the lab students will use.  The instructors have set this up, and have created the \"self-signed\" CA that governs communication between the CENA4SEE server and its clients (each student's GREP11 Server is a client of the CENA4SEE server). You need to acquire the certificate of the CA the instructors created:</p> <pre><code>cp -ipv /data/lab/c16-ca-public/c16-ca.pem .\n</code></pre> </li> <li> <p>Create an RSA private key using certtool:</p> <p>Certtool</p> <p>You used openssl for your previous certificate work.  You will use another tool called certtool now.  </p> <pre><code>certtool --generate-privkey --outfile c16-client.key\n</code></pre> Output from private key creation <pre><code>Generating a 3072 bit RSA private key...\n</code></pre> </li> <li> <p>Create the following template file to avoid being asked questions from certtool:</p> <pre><code>cat &lt;&lt; EOF &gt; csr.cfg\n# The common name of the certificate owner.\ncn = \"c16client\"\n\n# The organizational unit of the subject.\nunit = \"IBM WSC zSystems and LinuxONE\"\n\n# The organization of the subject\norganization = \"IBM WSC\"\n\n# The location of the subject\nlocality = \"Herndon\"\n\n# The state of the subject.\nstate = \"Virginia\"\n\n# The country of the subject. Two letter code.\ncountry = \"US\"\n\n# The subject's domain component\ndc = \"bczkvm\"\n\n# A dnsname \ndns_name = ${GREP11ServerIP}\n\n# An IP address \nip_address = ${GREP11ServerIP}\n\n# Use certificate for TLS client\ntls_www_client\nEOF\n</code></pre> </li> <li> <p>Now create a CSR:</p> <pre><code>certtool --generate-request \\\n--load-privkey c16-client.key \\\n--template csr.cfg \\\n--outfile c16-client.csr </code></pre> Output from creating CSR <pre><code>Generating a PKCS #10 certificate request...\n</code></pre> </li> <li> <p>Display information about your CSR:</p> <pre><code>certtool --crq-info --infile c16-client.csr\n</code></pre> <p>Your output should look similar to this:</p> Example CSR info <pre><code>PKCS #10 Certificate Request Information:\n        Version: 1\n        Subject: DC=bczkvm,C=US,ST=Virginia,L=Herndon,O=IBM WSC,OU=IBM WSC zSystems and LinuxONE,CN=c16client\n        Subject Public Key Algorithm: RSA\n        Algorithm Security Level: High (3072 bits)\n            Modulus (bits 3072):\n                00:b8:89:6a:97:6f:fd:78:30:e0:c0:16:0e:64:42:fa\n                e6:b9:6b:b1:c2:fd:25:c2:0f:f6:9d:f8:29:14:c5:38\n                0f:a2:0e:57:07:30:4f:bb:23:03:af:52:fb:65:e5:5b\n                e6:fe:93:21:74:8d:5c:e3:de:e0:1c:3b:47:1f:2f:4d\n                c2:8d:e1:87:01:f7:6b:d9:c0:5d:c4:2e:53:d1:64:39\n                90:be:a9:76:38:5b:52:14:aa:26:b1:9c:1b:24:18:f4\n                7c:d7:02:27:3d:08:4a:16:b3:83:c5:70:37:d9:ae:a9\n                b4:94:cf:a9:77:d0:96:19:f1:06:5d:5e:b6:ff:76:85\n                d3:88:fe:b1:b3:40:a7:75:61:1b:d8:23:93:1f:01:3f\n                4a:5e:a3:4b:95:26:36:37:b7:3e:14:c8:dc:c2:d1:1c\n                ee:0a:60:a8:57:18:c1:ef:6f:9a:4f:e7:95:93:6a:a6\n                15:41:34:d1:9c:51:f6:74:28:5c:79:cb:61:86:f2:73\n                db:f0:7d:78:1b:4f:a2:08:92:c5:6d:8f:11:02:28:fd\n                70:27:17:88:7f:6c:42:d5:c5:90:06:06:34:a7:bc:cd\n                d9:c5:c3:4e:00:48:88:7b:d4:53:d2:63:9e:c6:6e:a8\n                6e:29:a5:57:38:7d:c3:02:05:8c:ec:83:95:43:b9:5e\n                28:fd:1d:a0:9d:b0:98:58:2e:31:b4:fd:78:75:e7:6a\n                40:60:eb:1c:53:eb:ef:31:6a:fd:96:49:c1:db:c7:53\n                c6:f8:ca:7c:db:c3:16:31:37:32:2e:25:ed:d4:96:08\n                4e:bc:ce:04:b2:ed:c4:91:c1:72:1b:b0:9f:16:3d:17\n                df:0f:b3:b7:4d:25:db:c4:ad:b4:42:b9:b2:a8:3c:41\n                52:5c:d7:20:40:62:61:29:cf:89:0f:29:db:e9:53:17\n                51:65:fc:50:0b:79:13:b5:d6:ab:cb:f8:92:e2:e9:b5\n                0d:87:d3:c9:5f:d1:dc:c7:03:c4:e9:6c:ce:f2:09:22\n                f1\n            Exponent (bits 24):\n                01:00:01\n    Signature Algorithm: RSA-SHA256\n        Attributes:\n            Extensions:\n                Subject Alternative Name (not critical):\n                    DNSname: 172.16.0.61\n                    IPAddress: 172.16.0.61\n                Basic Constraints (critical):\n                    Certificate Authority (CA): FALSE\n                Key Usage (critical):\n                    Digital signature.\n                Key Purpose (critical):\n                    TLS WWW Client.\nOther Information:\n        Public Key ID:\n            sha1:70d0427d152be23fc9015be370581d19f3c47ff7\n            sha256:8f5547027afe8e10cd64d840903692e6a703b61a63fdbaebf9e0f446013a2ee6\n        Public Key PIN:\n            pin-sha256:j1VHAnr+jhDNZNhAkDaS5qcDthpj/brr+eD0RgE6LuY=\n\nSelf signature: verified\n\n-----BEGIN NEW CERTIFICATE REQUEST-----\nMIIERDCCAqwCAQAwgZgxEjAQBgNVBAMTCWMxNmNsaWVudDEmMCQGA1UECxMdSUJN\nIFdTQyB6U3lzdGVtcyBhbmQgTGludXhPTkUxEDAOBgNVBAoTB0lCTSBXU0MxEDAO\nBgNVBAcTB0hlcm5kb24xETAPBgNVBAgTCFZpcmdpbmlhMQswCQYDVQQGEwJVUzEW\nMBQGCgmSJomT8ixkARkWBmJjemt2bTCCAaIwDQYJKoZIhvcNAQEBBQADggGPADCC\nAYoCggGBALiJapdv/Xgw4MAWDmRC+ua5a7HC/SXCD/ad+CkUxTgPog5XBzBPuyMD\nr1L7ZeVb5v6TIXSNXOPe4Bw7Rx8vTcKN4YcB92vZwF3ELlPRZDmQvql2OFtSFKom\nsZwbJBj0fNcCJz0IShazg8VwN9muqbSUz6l30JYZ8QZdXrb/doXTiP6xs0CndWEb\n2COTHwE/Sl6jS5UmNje3PhTI3MLRHO4KYKhXGMHvb5pP55WTaqYVQTTRnFH2dChc\necthhvJz2/B9eBtPogiSxW2PEQIo/XAnF4h/bELVxZAGBjSnvM3ZxcNOAEiIe9RT\n0mOexm6obimlVzh9wwIFjOyDlUO5Xij9HaCdsJhYLjG0/Xh152pAYOscU+vvMWr9\nlknB28dTxvjKfNvDFjE3Mi4l7dSWCE68zgSy7cSRwXIbsJ8WPRffD7O3TSXbxK20\nQrmyqDxBUlzXIEBiYSnPiQ8p2+lTF1Fl/FALeRO11qvL+JLi6bUNh9PJX9HcxwPE\n6WzO8gki8QIDAQABoGYwZAYJKoZIhvcNAQkOMVcwVTAcBgNVHREEFTATggsxNzIu\nMTYuMC42MYcErBAAPTAMBgNVHRMBAf8EAjAAMA8GA1UdDwEB/wQFAwMHgAAwFgYD\nVR0lAQH/BAwwCgYIKwYBBQUHAwIwDQYJKoZIhvcNAQELBQADggGBAA17uU7a2aJx\nFNi2syniSomFbZSVQBBTJop7mplzpdyH+/IN/2eJU6wakXuuvCp6Yo2UYd6wMD5V\njl9AuZssXYZZRxfCzLtZ/KhCmNzFqnJIGMPpaPW5W72Jtmo3GE1VRRYEnVGZGqbx\nhnUzY0uiHThT+M31P+ZwpYwsPZmWYm0zBT2NfMAPpgYC0EqXstSqUdksgK1Qxa/L\nT3pede66CtIDbO+cRCv2ITWyfElZ7HZU93fDAG+R9kSMQDxNyjFQQ1H/b0F155hZ\nDjkGJ/VSU5RAv59oud4ZUYkGFOFOXlH+4fRhszAGOA53mDGUxL+Oh1VuYijeWyWo\nkepWkbYZ1o39pb5Zj1PEN6V2pwrLVg1My0VWNoxgnOWVJOGUnAt1jFYo+1fNMBsg\nxx44AFTZKvKJmHoOnbcSw/maVqg8taeF4vyPHOddsrK9fC4lg5+ZWrLoqhh7t0Ac\nTNVxGDGmyklOsttcINyIfbyQGMUTURDEDYLl7xLNX8IFTcG+xtlS1g==\n-----END NEW CERTIFICATE REQUEST-----\n</code></pre> <p>The \"self-signed\" CA for the CENA4SEE server is under instructor control- since there is only one CENA4SEE for the class to share, there is only one CA.  Let the instructors know that you are ready to have a client certificate created and the instructors will create a certificate for you and place it in the same directory that you are presently working in.  </p> <p>How and why the instructors will create this certificate for you</p> <p>In the interests of transparency, this is the command the instructors will use to create your certificate (after setting the ${student} environment variable appropriately).  Don't try to run this command as it won't work for you because you do not have access to the \"self-signed\" CA's private key.  (You can try- if you succeed, you are either an excellent hacker, or the instructors are not excellent system administrators, or some combination thereof).</p> <pre><code>### for your information only\ncerttool --generate-certificate \\\n--load-request /home/${student}/contract/grep11Server/workload/compose/c16-client.csr \\\n--outfile ${student}-c16-client.pem \\\n--load-ca-certificate c16server-ca.pem \\\n--load-ca-privkey c16server-ca.key \\\n--template cert.cfg \n\ncp -ipv ${student}-c16-client.pem /home/${student}/contract/grep11Server/workload/compose/c16-client.pem\n\nchown ${student}:hpvs_students /home/${student}/contract/grep11Server/workload/compose/c16-client.pem </code></pre> <p>This is also for information only- it is the contents of the configuration file cert.cfg that the instructors use in the above command:</p> cert.cfg<pre><code># Expiration days\nexpiration_days = 300\n\n# Honor certificate request extensions \n#honor_crq_extensions\n\n# keyUsage \nhonor_crq_ext = 2.5.29.15\n\n# extKeyUsage\nhonor_crq_ext = 2.5.27.39\n\n# subjectAltName\nhonor_crq_ext = 2.5.29.17\n\n# basicConstraints\nhonor_crq_ext = 2.5.29.19\n\ntls_www_client\n</code></pre> </li> <li> <p>After the instructors notify you that your certificate is ready , display it:</p> <pre><code>certtool --certificate-info --infile c16-client.pem\n</code></pre> <p>Your certificate will look like this:</p> CENA4SEE client certificate info <pre><code>X.509 Certificate Information:\n        Version: 3\n        Serial Number (hex): 6c8e1ecbc1ee385c441c03bd1dd64759641c5073\n        Issuer: DC=hpvs1,C=US,ST=Virginia,L=Herndon,O=IBM WSC zSystems and LinuxONE,OU=IBM WSC,CN=c16server CA\n        Validity:\n            Not Before: Tue Feb 14 15:41:45 UTC 2023\n            Not After: Mon Dec 11 15:41:45 UTC 2023\n        Subject: DC=bczkvm,C=US,ST=Virginia,L=Herndon,O=IBM WSC,OU=IBM WSC zSystems and LinuxONE,CN=c16client\n        Subject Public Key Algorithm: RSA\n        Algorithm Security Level: High (3072 bits)\n            Modulus (bits 3072):\n                00:b8:89:6a:97:6f:fd:78:30:e0:c0:16:0e:64:42:fa\n                e6:b9:6b:b1:c2:fd:25:c2:0f:f6:9d:f8:29:14:c5:38\n                0f:a2:0e:57:07:30:4f:bb:23:03:af:52:fb:65:e5:5b\n                e6:fe:93:21:74:8d:5c:e3:de:e0:1c:3b:47:1f:2f:4d\n                c2:8d:e1:87:01:f7:6b:d9:c0:5d:c4:2e:53:d1:64:39\n                90:be:a9:76:38:5b:52:14:aa:26:b1:9c:1b:24:18:f4\n                7c:d7:02:27:3d:08:4a:16:b3:83:c5:70:37:d9:ae:a9\n                b4:94:cf:a9:77:d0:96:19:f1:06:5d:5e:b6:ff:76:85\n                d3:88:fe:b1:b3:40:a7:75:61:1b:d8:23:93:1f:01:3f\n                4a:5e:a3:4b:95:26:36:37:b7:3e:14:c8:dc:c2:d1:1c\n                ee:0a:60:a8:57:18:c1:ef:6f:9a:4f:e7:95:93:6a:a6\n                15:41:34:d1:9c:51:f6:74:28:5c:79:cb:61:86:f2:73\n                db:f0:7d:78:1b:4f:a2:08:92:c5:6d:8f:11:02:28:fd\n                70:27:17:88:7f:6c:42:d5:c5:90:06:06:34:a7:bc:cd\n                d9:c5:c3:4e:00:48:88:7b:d4:53:d2:63:9e:c6:6e:a8\n                6e:29:a5:57:38:7d:c3:02:05:8c:ec:83:95:43:b9:5e\n                28:fd:1d:a0:9d:b0:98:58:2e:31:b4:fd:78:75:e7:6a\n                40:60:eb:1c:53:eb:ef:31:6a:fd:96:49:c1:db:c7:53\n                c6:f8:ca:7c:db:c3:16:31:37:32:2e:25:ed:d4:96:08\n                4e:bc:ce:04:b2:ed:c4:91:c1:72:1b:b0:9f:16:3d:17\n                df:0f:b3:b7:4d:25:db:c4:ad:b4:42:b9:b2:a8:3c:41\n                52:5c:d7:20:40:62:61:29:cf:89:0f:29:db:e9:53:17\n                51:65:fc:50:0b:79:13:b5:d6:ab:cb:f8:92:e2:e9:b5\n                0d:87:d3:c9:5f:d1:dc:c7:03:c4:e9:6c:ce:f2:09:22\n                f1\n            Exponent (bits 24):\n                01:00:01\n        Extensions:\n            Key Usage (critical):\n                Digital signature.\n            Subject Alternative Name (not critical):\n                DNSname: 172.16.0.61\n                IPAddress: 172.16.0.61\n            Basic Constraints (critical):\n                Certificate Authority (CA): FALSE\n            Key Purpose (not critical):\n                TLS WWW Client.\n            Subject Key Identifier (not critical):\n                70d0427d152be23fc9015be370581d19f3c47ff7\n            Authority Key Identifier (not critical):\n                a9a6c37c6e9d71c63f44db39cb5d5fca84228467\n        Signature Algorithm: RSA-SHA256\n        Signature:\n            16:5d:90:43:8d:ab:7e:5a:d5:7f:3a:20:36:0c:8e:04\n            5d:58:32:27:e1:80:19:f2:7e:2a:9e:9d:c1:11:50:6e\n            11:03:16:f5:90:4a:32:32:73:b5:59:1d:ef:a0:2e:26\n            3b:dc:09:ee:9b:c9:02:99:97:7e:54:d5:93:b1:18:5d\n            42:4f:f8:29:5e:f0:60:2c:b0:51:28:52:a3:6f:5c:93\n            be:e3:38:2a:cf:23:bf:3e:ce:6e:39:ff:7f:02:44:c3\n            9e:2b:54:8a:a7:14:17:75:32:38:ea:e4:0f:12:db:22\n            0b:07:93:bd:8f:5a:5e:00:1f:40:67:77:4a:1c:6a:5e\n            bf:d2:46:53:42:80:87:d5:67:0e:54:dc:ce:60:92:9b\n            15:4f:0c:eb:d2:4a:cb:5e:c0:ad:1c:00:80:66:fb:22\n            b1:87:fd:cf:43:f1:21:0d:e6:76:03:ed:99:d0:01:e2\n            07:fb:e3:b1:d6:a9:b3:5f:28:8e:48:4b:0b:b8:fa:b3\n            3e:f6:c4:66:39:ea:2d:97:fe:56:38:69:52:bb:31:ba\n            bc:04:6f:99:ee:f5:0e:02:e7:d1:56:87:22:a8:cd:09\n            c2:be:1a:31:a4:87:42:ff:ba:f7:43:d5:b1:d7:f5:5d\n            8c:fc:18:8d:5c:78:ef:ce:83:30:76:7c:99:dd:98:d4\n            cd:3b:ba:24:5b:bf:a0:be:d4:e5:aa:c2:db:fb:ca:9a\n            52:99:6d:02:f4:c7:da:bc:f0:76:d3:54:3a:91:5d:55\n            37:13:84:e4:ca:71:6e:1d:24:8b:05:ad:54:15:ee:02\n            9d:66:04:2a:eb:82:9e:53:a1:90:7d:43:4d:0e:ab:61\n            76:2e:ba:32:4a:10:41:c5:8b:4c:e7:1f:11:0a:7b:17\n            37:4b:b6:28:60:5c:69:6c:ae:ac:53:6b:6a:e4:f7:2a\n            b6:d1:7d:c4:9b:ea:8c:88:d4:de:11:13:ee:15:7e:d7\n            3e:4a:37:bc:19:de:8e:8e:ac:3d:e7:55:bf:8f:8d:6c\nOther Information:\n        Fingerprint:\n            sha1:479b56297c57950ebc2a112e651f9e2031bb3e5f\n            sha256:63bbb36695023e4abcb92222eccb15b43d2b8bc8d80b9e35ec9eb89ea5dd816b\n        Public Key ID:\n            sha1:70d0427d152be23fc9015be370581d19f3c47ff7\n            sha256:8f5547027afe8e10cd64d840903692e6a703b61a63fdbaebf9e0f446013a2ee6\n        Public Key PIN:\n            pin-sha256:j1VHAnr+jhDNZNhAkDaS5qcDthpj/brr+eD0RgE6LuY=\n\n-----BEGIN CERTIFICATE-----\nMIIFWDCCA8CgAwIBAgIUbI4ey8HuOFxEHAO9HdZHWWQcUHMwDQYJKoZIhvcNAQEL\nBQAwgZoxFTATBgNVBAMTDGMxNnNlcnZlciBDQTEQMA4GA1UECxMHSUJNIFdTQzEm\nMCQGA1UEChMdSUJNIFdTQyB6U3lzdGVtcyBhbmQgTGludXhPTkUxEDAOBgNVBAcT\nB0hlcm5kb24xETAPBgNVBAgTCFZpcmdpbmlhMQswCQYDVQQGEwJVUzEVMBMGCgmS\nJomT8ixkARkWBWhwdnMxMB4XDTIzMDIxNDE1NDE0NVoXDTIzMTIxMTE1NDE0NVow\ngZgxEjAQBgNVBAMTCWMxNmNsaWVudDEmMCQGA1UECxMdSUJNIFdTQyB6U3lzdGVt\ncyBhbmQgTGludXhPTkUxEDAOBgNVBAoTB0lCTSBXU0MxEDAOBgNVBAcTB0hlcm5k\nb24xETAPBgNVBAgTCFZpcmdpbmlhMQswCQYDVQQGEwJVUzEWMBQGCgmSJomT8ixk\nARkWBmJjemt2bTCCAaIwDQYJKoZIhvcNAQEBBQADggGPADCCAYoCggGBALiJapdv\n/Xgw4MAWDmRC+ua5a7HC/SXCD/ad+CkUxTgPog5XBzBPuyMDr1L7ZeVb5v6TIXSN\nXOPe4Bw7Rx8vTcKN4YcB92vZwF3ELlPRZDmQvql2OFtSFKomsZwbJBj0fNcCJz0I\nShazg8VwN9muqbSUz6l30JYZ8QZdXrb/doXTiP6xs0CndWEb2COTHwE/Sl6jS5Um\nNje3PhTI3MLRHO4KYKhXGMHvb5pP55WTaqYVQTTRnFH2dChcecthhvJz2/B9eBtP\nogiSxW2PEQIo/XAnF4h/bELVxZAGBjSnvM3ZxcNOAEiIe9RT0mOexm6obimlVzh9\nwwIFjOyDlUO5Xij9HaCdsJhYLjG0/Xh152pAYOscU+vvMWr9lknB28dTxvjKfNvD\nFjE3Mi4l7dSWCE68zgSy7cSRwXIbsJ8WPRffD7O3TSXbxK20QrmyqDxBUlzXIEBi\nYSnPiQ8p2+lTF1Fl/FALeRO11qvL+JLi6bUNh9PJX9HcxwPE6WzO8gki8QIDAQAB\no4GVMIGSMA8GA1UdDwEB/wQFAwMHgAAwHAYDVR0RBBUwE4ILMTcyLjE2LjAuNjGH\nBKwQAD0wDAYDVR0TAQH/BAIwADATBgNVHSUEDDAKBggrBgEFBQcDAjAdBgNVHQ4E\nFgQUcNBCfRUr4j/JAVvjcFgdGfPEf/cwHwYDVR0jBBgwFoAUqabDfG6dccY/RNs5\ny11fyoQihGcwDQYJKoZIhvcNAQELBQADggGBABZdkEONq35a1X86IDYMjgRdWDIn\n4YAZ8n4qnp3BEVBuEQMW9ZBKMjJztVkd76AuJjvcCe6byQKZl35U1ZOxGF1CT/gp\nXvBgLLBRKFKjb1yTvuM4Ks8jvz7Objn/fwJEw54rVIqnFBd1Mjjq5A8S2yILB5O9\nj1peAB9AZ3dKHGpev9JGU0KAh9VnDlTczmCSmxVPDOvSSstewK0cAIBm+yKxh/3P\nQ/EhDeZ2A+2Z0AHiB/vjsdaps18ojkhLC7j6sz72xGY56i2X/lY4aVK7Mbq8BG+Z\n7vUOAufRVociqM0Jwr4aMaSHQv+690PVsdf1XYz8GI1ceO/OgzB2fJndmNTNO7ok\nW7+gvtTlqsLb+8qaUpltAvTH2rzwdtNUOpFdVTcThOTKcW4dJIsFrVQV7gKdZgQq\n64KeU6GQfUNNDqthdi66MkoQQcWLTOcfEQp7FzdLtihgXGlsrqxTa2rk9yq20X3E\nm+qMiNTeERPuFX7XPko3vBnejo6sPedVv4+NbA==\n-----END CERTIFICATE-----\n</code></pre> </li> <li> <p>Switch directories:</p> <pre><code>cd ${HOME}/contract/grep11Server/workload/.\n</code></pre> </li> <li> <p>Time to add a convenience script</p> <p>You are almost finished with the workload section.  One thing to do is to add a convenience script to the workload directory.  This script is not supplied with the product, but is very useful in the creation of the contract.  Create it now and feel free to peruse it but do not run it now. It will be called later by another script.  Comments have been added to help explain what the script does. </p> <pre><code>cat &lt;&lt;-EOF &gt; flow.workload\n# Create the workload section of the contract and add the contents in the workload.yaml file.\n\n# # The Docker Compose file and all supporting configuration files are assumed to be in the ./compose directory\n# There should not be any unnecessary files as they will get tarred up and added to the COMPOSE_B64 variable\n#\nCOMPOSE_B64=\\$(tar -czv -C compose . | base64 -w0)\n\n#\n# This specifies an intermediate file that could be deleted at the end of the script but # is left intact for lab learning purposes-  it is plaintext so keeping it implies that\n# you would have to protect it appropriately.  In production you'll probably want to delete it\n#\nWORKLOAD_PLAIN=./workload.yaml.plaintext\n\n#\n# This specifies a file will be encrypted and signed and is the primary output of this script.  # It is combined with the encrypted and signed environment section that is created by # another script (flow.signature which is one directory level higher)\n# Note: this file will also wind up one directory level higher\n#\nWORKLOAD=workload.yaml\n\necho \"  type: workload\ncompose:\narchive: \\${COMPOSE_B64}\" &gt; \\${WORKLOAD_PLAIN}\n\n#\n# This is the encryption certificate for Hyper Protect Container Runtime and it is\n# provided with the Hyper Protect Virtual Servers v2.1.3 product\n#\nCONTRACT_KEY=/disk/software/hpvs213/config/certs/ibm-hyper-protect-container-runtime-23.1.0-encrypt.crt\n\n#\n# This variable holds a random password:\n#\nPASSWORD_WORKLOAD=\"\\$(openssl rand 32 | base64 -w0)\"\n\n#\n# This variable holds the output of the command pipe that\n# takes your plaintext workload yaml ($WORKLOAD_PLAIN) and encrypts it using the password that \n# was generated above ($PASSWORD_WORKLOAD) and then base64 encodes this encrypted workload\n#\n# As long as nobody else knows your random password ($PASSWORD_WORKLOAD) your data is safe.  \n# But, the Hyper Protect Container Runtime has to encrypt it, so it needs your password. \n# How will it get that password securely?  Read the next set of comment lines to find out.\n#\nENCRYPTED_WORKLOAD=\"\\$(echo -n \"\\$PASSWORD_WORKLOAD\" | base64 -d | openssl enc -aes-256-cbc -pbkdf2 -pass stdin -in \"\\$WORKLOAD_PLAIN\" | base64 -w0)\"\n\n#\n# This variable provides secure passage of your random password.  How?  \n# It encrypts it with the encryption key of the Hyper Protect Container Runtime (HPCR).\n# (A key that is encrypted by another key is often called a wrapped key).\n# Only the HPCR image has the private key which can decrypt this. It is protected from \n# access from any administrators.  So, malicious actors cannot do anything with this\n# wrapped key, even if they were able to get a hold of it.\n# \n#\nENCRYPTED_WORKLOAD_PASSWORD=\"\\$(echo -n \"\\$PASSWORD_WORKLOAD\" | base64 -d | openssl rsautl -encrypt -inkey \\$CONTRACT_KEY -certin | base64 -w0 )\"\n\n#\n# Use the following command to get the encrypted section of the contract:\n# This variable holds the output of a concatenation of a header, \"hyper-protect-basic\",\n# Your wrapped key, and your encrypted workload. \n#\nWORKLOAD_ENCRYPTED=\"hyper-protect-basic.\\${ENCRYPTED_WORKLOAD_PASSWORD}.\\${ENCRYPTED_WORKLOAD}\"\n\n#\n# The above variable is echoed to the a file the directory one level above\n#\necho \"\\$WORKLOAD_ENCRYPTED\" &gt; ../\\$WORKLOAD\n\n# \n# NOTE: In a production scenario the plaintext workload section would be \n# deleted or stored securely but it has been left here for student perusal.  \n# The filename is workload.yaml.plaintext\n#\nEOF\n</code></pre> </li> </ol>"},{"location":"lab/createGREP11Contract/#create-environment-section-of-the-contract","title":"Create environment section of the contract","text":"<ol> <li> <p>Change to the directory where you will prepare for environment section of the contract:</p> <pre><code>cd ../environment\n</code></pre> </li> <li> <p>In the environment section of the contract you are going to specify the information in  order to have your GREP11 Server log to the rsyslog that you configured earlier in the lab.</p> <ol> <li> <p>Create a directory to gather some files you will need for this rsyslog configuration and change to it:</p> <pre><code>mkdir -p rsyslog &amp;&amp; cd rsyslog\n</code></pre> </li> <li> <p>You will need the CA certificate of the rsyslog service that you created on your Ubuntu KVM guest which you can get via scp:</p> <pre><code>scp student@${StudentGuestIP}:rsyslogWork/ca.crt .\n</code></pre> </li> <li> <p>Copy your rsyslog client certificate from your working directory:</p> <pre><code>cp -ipv ${HOME}/rsyslogClientWork/client.crt .\n</code></pre> </li> <li> <p>Convert the client certificate to PKCS#8 format</p> <p>The directory you just copied the client certificate from also has your private key that you need. However, the HPCR image requires this to be in PKCS#8  (Public Key Cryptography Standard #8) format. Therefore you can't just copy it over- you need to convert it to PKCS#8 format:</p> <pre><code>openssl pkcs8 -topk8 -inform PEM -outform PEM -nocrypt \\\n-in ${HOME}/rsyslogClientWork/client-key.pem \\\n-out client-key-pkcs8.pem\n</code></pre> </li> <li> <p>Go back up one directory level:</p> <pre><code>cd .. &amp;&amp; pwd\n</code></pre> </li> <li> <p>We have provided a convenience script to assist in creating the environment section of the contract</p> <p>This script is not supplied with the product, but is very useful in the creation of the contract. Create it now and feel free to peruse it but do not run it now. It will be called later by another script. Comments have been added to help explain what the script does. </p> <pre><code>cat &lt;&lt;-EOF &gt; flow.env\n# Create the env section of the contract and add the contents in the env.yaml file.\n\n#\n# set some file locations at the top of the file here\n#\nRSYSLOG_CA_CRT=\"./rsyslog/ca.crt\"\nRSYSLOG_CLIENT_CRT=\"./rsyslog/client.crt\"\nRSYSLOG_CLIENT_KEY=\"./rsyslog/client-key-pkcs8.pem\"\n\n#\n# This specifies an intermediate file that could be deleted at the end of the script but # is left intact for lab learning purposes-  it is plaintext so keeping it implies that\n# you would have to protect it appropriately.  In production you'll probably want to delete it\n#\nENV_PLAIN=\"./env.yaml.plaintext\"\n\n#\n# This specifies a file will be encrypted and signed and is the primary output of this script.  # It is combined with the encrypted and signed workload section that is created by # another script (flow.signature which is one directory level higher)\n# Note: this file will also wind up one directory level higher\n#\nENV=\"env.yaml\"\n\n#\n# This variable holds the output of taking all the newlines out of the rsyslog CA certificate and\n# replacing them with the \"\\n\" characters.  In other words, a multiple line file is squashed down \n# to one line.  The HPCR runtime image will then convert it back to the multiple line format\n#\nENV_RSYSLOG_SERVER=\\$(awk -vRS=\"\\n\" -vORS=\"\\\\\\\\\\n\" '1' \\${RSYSLOG_CA_CRT})\n\n#\n# This variable holds the output of taking all the newlines out of the client certificate that the\n# HPCR runtime uses for communicating with rsyslog and replacing them with the \"\\n\" characters.\n# In other words, a multiple line file is squashed down to one line. THe HPCR runtime image will \n# then convert it back to the multiple line format\n#\nENV_RSYSLOG_CERT=\\$(awk -vRS=\"\\n\" -vORS=\"\\\\\\\\\\n\" '1' \\${RSYSLOG_CLIENT_CRT})\n\n#\n# This variable holds the output of taking all the newlines out of the client private key that the\n# HPCR runtime uses for communicating with rsyslog and replacing them with the \"\\n\" characters.\n# In other words, a multiple line file is squashed down to one line. THe HPCR runtime image will \n# then convert it back to the multiple line format. Before this all happens, the Private Key is \n# converted to PKCS#8 format\n#\nENV_RSYSLOG_KEY=\\$(awk -vRS=\"\\n\" -vORS=\"\\\\\\\\\\n\" '1'  \\${RSYSLOG_CLIENT_KEY})\n\n\necho \"  type: env\nlogging:\nsyslog:\nhostname: \\\"\\${StudentGuestIP}\\\"\nport: 6514\nserver: \\\"\\${ENV_RSYSLOG_SERVER}\\\"\ncert: \\\"\\${ENV_RSYSLOG_CERT}\\\"\nkey: \\\"\\${ENV_RSYSLOG_KEY}\\\"\" &gt;\\${ENV_PLAIN}\n\n#\n# This command adds the public signing key to the plaintext environment yaml.  This key is used inside \n# the Hyper Protect Container Runtime image to verify the signature over workload and environment sections of\n# the contract. \n#\ncat ./pubSigningKey.yaml &gt;&gt; \\${ENV_PLAIN}\n\n# This is the encryption certificate for Hyper Protect Container Runtime and it is\n# provided with the Hyper Protect Virtual Servers v2.1.3 product\n#\nCONTRACT_KEY=/disk/software/hpvs213/config/certs/ibm-hyper-protect-container-runtime-23.1.0-encrypt.crt\n\n#\n# This variable holds a random password:\n#\nPASSWORD_ENV=\"\\$(openssl rand 32 | base64 -w0)\"\n\n#\n# This variable holds the output of the command pipe that\n# takes your plaintext environment yaml (\\$ENV_PLAIN) and encrypts it using the password that \n# was generated above (\\$PASSWORD_ENV) and then base64 encodes this encrypted environment yaml\n#\n# As long as nobody else knows your random password (\\$PASSWORD_ENV) your data is safe.  \n# But, the Hyper Protect Container Runtime has to encrypt it, so it needs your password. \n# How will it get that password securely?  Read the next set of comment lines to find out.\n#\nENCRYPTED_ENV=\"\\$(echo -n \"\\$PASSWORD_ENV\" | base64 -d | openssl enc -aes-256-cbc -pbkdf2 -pass stdin -in \"\\$ENV_PLAIN\" | base64 -w0)\"\n\n#\n# This variable provides secure passage for your random password.  How?  \n# It encrypts it with the encryption key of the Hyper Protect Container Runtime (HPCR).\n# (A key that is encrypted by another key is often called a wrapped key).\n# Only the HPCR image has the private key which can decrypt this. It is protected from \n# access from any administrators.  So, malicious actors cannot do anything with this\n# wrapped key, even if they were able to get a hold of it.\n#\nENCRYPTED_ENV_PASSWORD=\"\\$(echo -n \"\\$PASSWORD_ENV\" | base64 -d | openssl rsautl -encrypt -inkey \\$CONTRACT_KEY -certin | base64 -w0 )\"\n\n#\n# Use the following command to get the encrypted environment section of the contract:\n# This variable holds the output of a concatenation of a header, \"hyper-protect-basic\",\n# Your wrapped key, and your encrypted environment yaml.. \n#\nENV_ENCRYPTED=\"hyper-protect-basic.\\${ENCRYPTED_ENV_PASSWORD}.\\${ENCRYPTED_ENV}\"\n#\n# The above variable writes the encrypted environment section to the directory one level above\n#\necho \"\\$ENV_ENCRYPTED\" &gt; ../\\$ENV\nEOF\n</code></pre> </li> </ol> </li> <li> <p>Backup one more directory level:</p> <pre><code>cd ..\n</code></pre> </li> <li> <p>You will create three more files that are convenience scripts, similar to flow.workload and flow.env which you have already created:</p> <ol> <li> <p>The first script will provide some preparation steps.  Create it, peruse it, love it, but don't run it yet:</p> <pre><code>cat &lt;&lt; EOF &gt; flow.prepare\n\n# Use the following command to generate a key pair to sign the contract \nopenssl genrsa -aes128 -passout pass:test1234 -out private.pem 4096\nopenssl rsa -in private.pem -passin pass:test1234 -pubout -out public.pem\n\n# The following command is an example of how you can get the signing key:\nkey=\\$(awk -vRS=\"\\n\" -vORS=\"\\\\\\\\\\n\" '1' public.pem)\necho \"  signingKey: \\\"\\${key%\\\\\\\\n}\\\"\" &gt; environment/pubSigningKey.yaml\nEOF\n</code></pre> </li> <li> <p>Create the second script which signs the concatenated workload and environment sections of the contract and then appends the signature as the third and final element of the contract.  Don't run it yet!</p> <pre><code>cat &lt;&lt; EOF &gt; flow.signature\n# combine workload and environment\ncat workload.yaml env.yaml | tr -d '\\n' &gt; contract.yaml\n\n# Sign the combination from workload and env being approved\necho \\$( cat contract.yaml | openssl dgst -sha256 -sign private.pem | openssl enc -base64) | tr -d ' ' &gt; signature.yaml\n\n# Create user data and add signature:\necho \"workload: \\$(cat workload.yaml)\nenv: \\$(cat env.yaml)\nenvWorkloadSignature: \\$(cat signature.yaml)\" &gt; user_data.yaml\n\necho \"\"\necho \"import \\`pwd\\`/user_data.yaml into User Data or copy and paste from below:\"\necho \"\"\n\ncat user_data.yaml\nEOF\n</code></pre> </li> <li> <p>This script isn't strictly necessary for the lab for reasons stated in the comments in the script, but you can create it anyway:</p> <pre><code>cat &lt;&lt; EOF &gt; flow.clear\n#\n# It isn't really necessary to run this in our lab environment \n# because the other scripts will happy trod on these files \n# as necessary.\n#\n# It is more likely that you would run this after running the\n# other scripts in order to remove these files for security\n# reasons\n#\n# But if you ever had a need to save your signing key pair, \n# you would want to save private.pem somewhere safe.\n# \nrm private.pem public.pem\nrm environment/pubSigningKey.yaml environment/env.yaml.plaintext\nrm workload/workload.yaml.plaintext\nrm env.yaml workload.yaml contract.yaml signature.yaml user_data.yaml\nEOF\n</code></pre> </li> </ol> </li> </ol>"},{"location":"lab/createGREP11Contract/#encrypt-and-sign-the-contract","title":"Encrypt and sign the contract","text":"<ol> <li> <p>Create a final helper script which calls the flow.* scripts you created earlier:</p> <pre><code>cat &lt;&lt; EOF &gt; makeContract\n. ./flow.prepare\ncd workload\n. ./flow.workload\ncd ../environment\n. ./flow.env\ncd ..\n. ./flow.signature\n\nEOF\n</code></pre> <p>TODO: do we really need the passphrase for the signing key?</p> </li> <li> <p>Now run the helper script that you just created:</p> <pre><code>. ./makeContract\n</code></pre> </li> </ol> <p>The script creates the final contract in a file named <code>user_data.yaml</code>.  It also displays the contents of this file to the screen. At the bottom of the output you will see an envWorkloadSignature key.  If there is a gobbledygook value (base64-encoded text) associated with this key then things went well.</p>"},{"location":"lab/createGREP11Contract/#create-the-startup-file-for-the-hpvs-213-grep11-guest","title":"Create the startup file for the HPVS 2.1.3 GREP11 guest","text":"<ol> <li> <p>Create a copy of the <code>user_data.yaml</code> file that your created</p> <p>The contract that you just created is going to be packaged with some other files into a startup file for the HPVS 2.1.3 guest that will run your GREP11 Server. One of the files expected is a file named <code>user-data</code> that is just a copy of the <code>user_data.yaml</code> file that was just created</p> <pre><code>cp -ipv user_data.yaml user-data\n</code></pre> <p>Why didn't the script just do the above copy for me</p> <p>We kept user-data intact in case something went wrong in the process, in which case user_data.yaml may be rubbish but at least you haven't trampled on a good user-data that might already be in use.  </p> </li> <li> <p>Create <code>vendor-data</code> which is another file required by the process:</p> <pre><code>cat &lt;&lt; EOF &gt; vendor-data\n#cloud-config\nusers:\n- default\nEOF\n</code></pre> </li> <li> <p>Create <code>meta-data</code> which is also required, and it will have a hostname tailored for your userid:</p> <pre><code>cat &lt;&lt; EOF &gt; meta-data\nlocal-hostname: $(whoami)-grep11server\nEOF\n</code></pre> </li> <li> <p>Run this command (RHEL-specific, see product documentation for Ubuntu command) in order to create the startup file, ciiso.iso:</p> <pre><code>genisoimage -output /var/lib/libvirt/images/hpvslab/$(whoami)/ciiso.iso \\\n-volid cidata -joliet -rock user-data meta-data vendor-data\n</code></pre> <p>Your output will look like this:</p> Output from genisoimage command <pre><code>I: -input-charset not specified, using utf-8 (detected in locale settings)\nTotal translation table size: 0\nTotal rockridge attributes bytes: 414\nTotal directory bytes: 0\nPath table size(bytes): 10\nMax brk space used 0\n203 extents written (0 MB)\n</code></pre> </li> </ol> <p>Please click the Next link at the bottom of the page to continue with the lab.</p>"},{"location":"lab/hackMeIfYouCan/","title":"Demonstrate the protection of the Secure Execution-enabled HPVS 2.1.3 guest","text":""},{"location":"lab/hackMeIfYouCan/#overview-of-this-section","title":"Overview of this section","text":"<p>In this section you will demonstrate the protection offered by the Secure Execution-enabled HPVS 2.1.3 guest in contrast to the ease in which a malicious insider can eavesdrop on a regular KVM guest.</p>"},{"location":"lab/hackMeIfYouCan/#log-out-of-your-ubuntu-kvm-guest","title":"Log out of your Ubuntu KVM guest","text":"<p>All of the work in this section is performed on the RHEL 8.5 host, so log out of your Ubuntu KVM guest, so logo out of your Ubuntu KVM guest:</p> <pre><code>exit\n</code></pre>"},{"location":"lab/hackMeIfYouCan/#log-in-to-the-rhel-85-host","title":"Log in to the RHEL 8.5 host:","text":"<pre><code>logon -l ${StudentID} 192.168.22.64\n</code></pre>"},{"location":"lab/hackMeIfYouCan/#snoop-into-your-regular-kvm-guest-with-ease","title":"Snoop into your regular KVM guest with ease","text":"<p>A systems administrator at the host level does not have a difficult time getting into a regular KVM guest's business.  Try this command to dump the entire address space of your Ubuntu KVM guest:</p> <pre><code>sudo virsh dump $(whoami) $(whoami).dump\n</code></pre> <p>This will take a few seconds but you have just dumped the entire memory of your KVM guest.</p> <p>Look at the file size:</p> <pre><code>ls -lh ${whoami).dump\n</code></pre> <p>We suspect that a malicious actor might have a few more tools in their toolbag than what we will show you here, but try this command:</p> <pre><code>strings ${whoami}.dump\n</code></pre> <p>The above command will print out all of the strings it recognizes in the memory dump.  You are probably getting tired of seeing them pass by on your terminal screen, so type <code>Ctrl-C</code> when you want your command prompt back.</p> <p>Try this command to see how many strings were found in the file:</p> <pre><code>strings ${whoami}.dump | wc --lines\n</code></pre> <p>Your output may differ, but when we tried this command while writing up the lab, we had 2,397,409 strings found in our dump.  Now we didn't dig much deeper than this, but it's possible that a motivated hacker might find something among those millions of strings with which to make mischief.</p>"},{"location":"lab/hackMeIfYouCan/#go-ahead-and-try-to-hack-me-says-the-hpvs-213-guest","title":"Go ahead and try to hack me says the HPVS 2.1.3 guest","text":"<p>Try to snoop on your Secure Execution-enabled Hyper Protect Virtual Servers 2.1.3 guest that is running your GREP11 Server. See what happens:</p> <pre><code>suffix=$(temp=$(whoami) &amp;&amp; echo ${temp: -2}) ; sudo virsh dump grep11se${suffix} grep11se${suffix}.dump\n</code></pre> Shot down in flames, ain't it a shame <pre><code>error: Failed to core dump domain 'grep11se01' to grep11se01.dump\nerror: internal error: unable to execute QEMU command 'migrate': protected VMs are currently not migrateable.\n</code></pre> <p>The verdict is in:  protection of data in use is good.  Unprotected data in use is not so good.</p> <p>Please proceed to the next section of the lab for lab cleanup.</p>"},{"location":"lab/labCleanup/","title":"Clean up the resources you created during the lab","text":"<p>All of the work in this section is performed on the RHEL 8.5 host.  You should already be logged in to it if you have been following this lab in order.</p>"},{"location":"lab/labCleanup/#shut-down-your-regular-ubuntu-kvm-guest","title":"Shut down your regular Ubuntu KVM guest","text":"<p>Enter this command to shut down your regular Ubuntu KVM guest:</p> <pre><code>sudo virsh shutdown $(whoami)\n</code></pre>"},{"location":"lab/labCleanup/#shut-down-your-hpvs-213-guest-your-grep11-server","title":"Shut down your HPVS 2.1.3 guest (your GREP11 server):","text":"<pre><code>suffix=$(temp=$(whoami) &amp;&amp; echo ${temp: -2}) ; sudo virsh shutdown grep11se${suffix} </code></pre>"},{"location":"lab/labCleanup/#clean-up-the-home-directory-of-your-userid-on-the-rhel-85-host","title":"Clean up the home directory of your userid on the RHEL 8.5 host:","text":"<pre><code>cd ${HOME} &amp;&amp; rm -rf rsyslogWork GREP11CAwork contract $(whoami).dump\n</code></pre> <p>Thank you for cleaning up and congratulations on finishing the lab!  We hope you enjoyed it and learned from it and we welcome your feedback on how to make it better!</p> <p>There is no need to click the <code>Next</code> link at the bottom as that will take you to a page that is for instructor usage.  Feel free to check it out though, as it will give you insight into the tools that we use to create and update the lab. </p>"},{"location":"lab/launchGREP11guest/","title":"Start the GREP11 Server as a Secure Execution-enabled, HPVS 2.1.3 guest","text":""},{"location":"lab/launchGREP11guest/#launch-the-hpvs-213-grep11-server","title":"launch the HPVS 2.1.3 GREP11 server","text":"<p>This fancy command figures out the last two characters of your assigned userid and is used in other commands in this section, so that the lab instructions will work for everybody:</p> <pre><code>suffix=$(temp=$(whoami) &amp;&amp; echo ${temp: -2})\n</code></pre> <p>You aren't going to change anything here since it's already been defined for you by the instructors, but you can display the KVM guest definition of your HPVS 2.1.3 GREP11 Server:</p> <pre><code>sudo virsh dumpxml grep11se${suffix}\n</code></pre> Definition of KVM guest for GREP11 Server <pre><code>&lt;domain type='kvm'&gt;\n  &lt;name&gt;grep11se02&lt;/name&gt;\n  &lt;uuid&gt;2315f8ea-a340-4506-abbf-ae04cf7ea868&lt;/uuid&gt;\n  &lt;metadata&gt;\n    &lt;libosinfo:libosinfo xmlns:libosinfo=\"http://libosinfo.org/xmlns/libvirt/domain/1.0\"&gt;\n      &lt;libosinfo:os id=\"http://ubuntu.com/ubuntu/20.04\"/&gt;\n    &lt;/libosinfo:libosinfo&gt;\n  &lt;/metadata&gt;\n  &lt;memory unit='KiB'&gt;3903488&lt;/memory&gt;\n  &lt;currentMemory unit='KiB'&gt;3903488&lt;/currentMemory&gt;\n  &lt;vcpu placement='static'&gt;2&lt;/vcpu&gt;\n  &lt;os&gt;\n    &lt;type arch='s390x' machine='s390-ccw-virtio-rhel8.2.0'&gt;hvm&lt;/type&gt;\n    &lt;boot dev='hd'/&gt;\n  &lt;/os&gt;\n  &lt;cpu mode='host-model' check='partial'/&gt;\n  &lt;clock offset='utc'/&gt;\n  &lt;on_poweroff&gt;destroy&lt;/on_poweroff&gt;\n  &lt;on_reboot&gt;restart&lt;/on_reboot&gt;\n  &lt;on_crash&gt;destroy&lt;/on_crash&gt;\n  &lt;devices&gt;\n    &lt;emulator&gt;/usr/libexec/qemu-kvm&lt;/emulator&gt;\n    &lt;disk type='file' device='disk'&gt;\n      &lt;driver name='qemu' type='qcow2' iommu='on'/&gt;\n      &lt;source file='/var/lib/libvirt/images/hpcr/student02/ibm-hyper-protect-container-runtime-23.1.0.qcow2'/&gt;\n      &lt;backingStore/&gt;\n      &lt;target dev='vda' bus='virtio'/&gt;\n      &lt;address type='ccw' cssid='0xfe' ssid='0x0' devno='0x0000'/&gt;\n    &lt;/disk&gt;\n    &lt;disk type='file' device='disk'&gt;\n      &lt;driver name='qemu' type='raw' cache='none' io='native' iommu='on'/&gt;\n      &lt;source file='/home/student02/contract/grep11Server/ciiso.iso'/&gt;\n      &lt;target dev='vdc' bus='virtio'/&gt;\n      &lt;readonly/&gt;\n      &lt;address type='ccw' cssid='0xfe' ssid='0x0' devno='0x0002'/&gt;\n    &lt;/disk&gt;\n    &lt;controller type='pci' index='0' model='pci-root'/&gt;\n    &lt;interface type='network'&gt;\n      &lt;mac address='52:54:00:b1:e0:11'/&gt;\n      &lt;source network='default'/&gt;\n      &lt;model type='virtio'/&gt;\n      &lt;driver name='vhost' iommu='on'/&gt;\n      &lt;address type='ccw' cssid='0xfe' ssid='0x0' devno='0x0001'/&gt;\n    &lt;/interface&gt;\n    &lt;console type='pty'&gt;\n      &lt;target type='sclp' port='0'/&gt;\n    &lt;/console&gt;\n    &lt;audio id='1' type='none'/&gt;\n    &lt;memballoon model='none'/&gt;\n    &lt;panic model='s390'/&gt;\n  &lt;/devices&gt;\n&lt;/domain&gt;\n</code></pre> <p>Start your GREP11 Server and attach to its console.  Watch the messages carefully.  You should not see any failures:</p> <pre><code>sudo virsh start grep11se${suffix} --console\n</code></pre> This is what success looks like <pre><code>Domain 'grep11se02' started\nConnected to domain 'grep11se02'\nEscape character is ^] (Ctrl + ])\n# HPL11 build:23.1.0 enabler:22.11.6\n# Tue Feb 14 17:37:53 UTC 2023\n# delete old root partition...\n# create new root partition...\n# encrypt root partition...\n# create root filesystem...\n# write OS to root disk...\n# decrypt user-data...\n2 token decrypted, 0 encrypted token ignored\n# run attestation...\n# set hostname...\n# finish root disk setup...\n# Tue Feb 14 17:38:18 UTC 2023\n# HPL11 build:23.1.0 enabler:22.11.6\n# HPL11099I: bootloader end\nhpcr-dnslookup[889]: HPL14000I: Network connectivity check completed successfully.\nhpcr-logging[1094]: Configuring logging ...\nhpcr-logging[1095]: Version [1.1.74]\nhpcr-logging[1095]: Configuring logging, input [/var/hyperprotect/user-data.decrypted] ...\nhpcr-logging[1095]: HPL01010I: Logging has been setup successfully.\nhpcr-logging[1094]: Logging has been configured\nhpcr-catch-success[1391]: VSI Status is:  Success\nhpcr-catch-success[1391]: VSI has started successfully.\n</code></pre> <p>You will have to enter the <code>Ctrl + ]</code> key-combination to break out of the console.</p>"},{"location":"lab/launchGREP11guest/#verify-that-grep11-server-log-messages-are-received-by-rsyslog","title":"verify that GREP11 server log messages are received by rsyslog","text":"<p>The logging of the GREP11 server is going to the rsyslog service that you configure on your Ubuntu guest.  Log out from your session on the RHEL 8.5 host:</p> <pre><code>exit\n</code></pre> <p>Log in to your Ubuntu KVM guest:</p> <pre><code>ssh -p ${Student_SSH_Port} -l student 192.168.22.64\n</code></pre> <p>The arguments to the journalctl command here aren't the most elegant in the world, but, unless midnight passed since you started your GREP11 Server, you will be able to see messages in rsyslog from when you just started up your GREP11 Server:</p> <pre><code>journalctl --since today --no-pager\n</code></pre> <p>There are a lot of messages logged, a veritable trove of treasure for the curious.  Here is an example of what you should be able to see:</p> Log messages in rsyslog from starting the GREP11 Server <pre><code>Feb 14 17:38:20 ubuntu2204 vpcnode[1439]: authentication probe\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  Linux version 5.4.0-136-generic (buildd@bos02-s390x-017) (gcc version 9.4.0 (Ubuntu 9.4.0-1ubuntu1~20.04.1)) #153-Ubuntu SMP Thu Nov 24 15:57:18 UTC 2022 (Ubuntu 5.4.0-136.153-generic 5.4.218)\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  setup.289988: Linux is running under KVM in 64-bit mode\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  setup.b050d0: The maximum memory size is 3812MB\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  numa.196305: NUMA mode: plain\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  cpu.33a262: 2 configured CPUs, 0 standby CPUs\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  Write protected kernel read-only data: 14928k\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  Zone ranges:\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:    DMA      [mem 0x0000000000000000-0x000000007fffffff]\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:    Normal   [mem 0x0000000080000000-0x00000000ee3fffff]\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  Movable zone start for each node\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  Early memory node ranges\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:    node   0: [mem 0x0000000000000000-0x00000000ee3fffff]\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  Zeroed struct page in unavailable ranges: 7168 pages\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  Initmem setup node 0 [mem 0x0000000000000000-0x00000000ee3fffff]\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  On node 0 totalpages: 975872\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:    DMA zone: 8192 pages used for memmap\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:    DMA zone: 0 pages reserved\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:    DMA zone: 524288 pages, LIFO batch:63\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:    Normal zone: 7056 pages used for memmap\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:    Normal zone: 451584 pages, LIFO batch:63\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  percpu: Embedded 34 pages/cpu s98816 r8192 d32256 u139264\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  pcpu-alloc: s98816 r8192 d32256 u139264 alloc=34*4096\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  pcpu-alloc: [0] 0 [0] 1 \nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  Built 1 zonelists, mobility grouping on.  Total pages: 960624\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  Policy zone: Normal\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  Kernel command line: panic=0 blacklist=virtio_rng swiotlb=262144 cloud-init=disabled console=ttyS0 quiet loglevel=0 systemd.show_status=0 printk.time=0 systemd.getty_auto=0 systemd.firstboot=0 module.sig_enforce=1\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  Dentry cache hash table entries: 524288 (order: 10, 4194304 bytes, linear)\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  Inode-cache hash table entries: 262144 (order: 9, 2097152 bytes, linear)\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  mem auto-init: stack:off, heap alloc:on, heap free:off\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  software IO TLB: mapped [mem 0x5fffc000-0x7fffc000] (512MB)\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  Memory: 3277624K/3903488K available (9216K kernel code, 1716K rwdata, 5708K rodata, 3436K init, 960K bss, 625864K reserved, 0K cma-reserved)\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  SLUB: HWalign=256, Order=0-3, MinObjects=0, CPUs=2, Nodes=1\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  ftrace: allocating 29715 entries in 117 pages\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  rcu: Hierarchical RCU implementation.\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  rcu: #011RCU restricting CPUs from NR_CPUS=512 to nr_cpu_ids=2.\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  #011Tasks RCU enabled.\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  rcu: RCU calculated value of scheduler-enlistment delay is 10 jiffies.\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  rcu: Adjusting geometry for rcu_fanout_leaf=16, nr_cpu_ids=2\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  NR_IRQS: 3, nr_irqs: 3, preallocated irqs: 3\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  clocksource: tod: mask: 0xffffffffffffffff max_cycles: 0x3b0a9be803b0a9, max_idle_ns: 1805497147909793 ns\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  random: crng init done\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  Console: colour dummy device 80x25\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  printk: console [ttyS0] enabled\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  printk: console [ttysclp0] enabled\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  Calibrating delay loop (skipped)... 24038.00 BogoMIPS preset\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  pid_max: default: 32768 minimum: 301\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  LSM: Security Framework initializing\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  Yama: becoming mindful.\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  AppArmor: AppArmor initialized\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  Mount-cache hash table entries: 8192 (order: 4, 65536 bytes, linear)\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  Mountpoint-cache hash table entries: 8192 (order: 4, 65536 bytes, linear)\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  *** VALIDATE tmpfs ***\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  *** VALIDATE proc ***\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  *** VALIDATE cgroup1 ***\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  *** VALIDATE cgroup2 ***\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  rcu: Hierarchical SRCU implementation.\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  smp: Bringing up secondary CPUs ...\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  smp: Brought up 1 node, 2 CPUs\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  devtmpfs: initialized\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  futex hash table entries: 512 (order: 5, 131072 bytes, linear)\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  NET: Registered protocol family 16\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  audit: initializing netlink subsys (disabled)\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  audit: type=2000 audit(1676396272.929:1): state=initialized audit_enabled=0 res=1\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  Spectre V2 mitigation: etokens\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  HugeTLB registered 1.00 MiB page size, pre-allocated 0 pages\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  iommu: Default domain type: Translated \nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  SCSI subsystem initialized\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  NetLabel: Initializing\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  NetLabel:  domain hash size = 128\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  NetLabel:  protocols = UNLABELED CIPSOv4 CALIPSO\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  NetLabel:  unlabeled traffic allowed by default\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  *** VALIDATE bpf ***\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  VFS: Disk quotas dquot_6.6.0\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  VFS: Dquot-cache hash table entries: 512 (order 0, 4096 bytes)\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  *** VALIDATE ramfs ***\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  *** VALIDATE hugetlbfs ***\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  AppArmor: AppArmor Filesystem Enabled\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  NET: Registered protocol family 2\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  IP idents hash table entries: 65536 (order: 7, 524288 bytes, linear)\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  tcp_listen_portaddr_hash hash table entries: 2048 (order: 3, 32768 bytes, linear)\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  TCP established hash table entries: 32768 (order: 6, 262144 bytes, linear)\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  TCP bind hash table entries: 32768 (order: 7, 524288 bytes, linear)\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  TCP: Hash tables configured (established 32768 bind 32768)\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  UDP hash table entries: 2048 (order: 4, 65536 bytes, linear)\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  UDP-Lite hash table entries: 2048 (order: 4, 65536 bytes, linear)\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  NET: Registered protocol family 1\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  NET: Registered protocol family 44\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  Trying to unpack rootfs image as initramfs...\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  Freeing initrd memory: 8780K\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  kvm-s390.a3074b: SIE is not available\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  hypfs.7f5705: The hardware system does not support hypfs\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  Initialise system trusted keyrings\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  Key type blacklist registered\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  workingset: timestamp_bits=42 max_order=20 bucket_order=0\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  zbud: loaded\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  squashfs: version 4.0 (2009/01/31) Phillip Lougher\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  fuse: init (API version 7.31)\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  *** VALIDATE fuse ***\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  *** VALIDATE fuse ***\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  Platform Keyring initialized\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  Key type asymmetric registered\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  Asymmetric key parser 'x509' registered\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  Block layer SCSI generic (bsg) driver version 0.4 loaded (major 250)\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  io scheduler mq-deadline registered\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  hvc_iucv.691dff: The z/VM IUCV HVC device driver cannot be used without z/VM\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  loop: module loaded\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  tun: Universal TUN/TAP device driver, 1.6\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  device-mapper: uevent: version 1.0.3\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  device-mapper: ioctl: 4.41.0-ioctl (2019-09-16) initialised: dm-devel@redhat.com\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  cio.b5d5f6: Channel measurement facility initialized using format extended (mode autodetected)\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  sclp_sd.ef2911: Store Data request failed (eq=2, di=3, response=0x40f0, flags=0x00, status=0, rc=-5)\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  ap.3677f7: The hardware system does not support AP instructions\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  drop_monitor: Initializing network drop monitor service\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  NET: Registered protocol family 10\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  Segment Routing with IPv6\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  NET: Registered protocol family 17\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  Key type dns_resolver registered\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  registered taskstats version 1\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  Loading compiled-in X.509 certificates\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  Loaded X.509 cert 'Build time autogenerated kernel key: 33ff8022a129d630916009cb7675eb5fd18109f5'\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  Loaded X.509 cert 'Canonical Ltd. Live Patch Signing: 14df34d1a87cf37625abec039ef2bf521249b969'\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  Loaded X.509 cert 'Canonical Ltd. Kernel Module Signing: 88f752e560a1e0737e31163a466ad7b70a850c19'\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  blacklist: Loading compiled-in revocation X.509 certificates\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  Loaded X.509 cert 'Canonical Ltd. Secure Boot Signing: 61482aa2830d0ab2ad5af10b7250da9033ddcef0'\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  zswap: loaded using pool lzo/zbud\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  Key type ._fscrypt registered\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  Key type .fscrypt registered\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  Key type big_key registered\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  Key type encrypted registered\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  AppArmor: AppArmor sha1 policy hashing enabled\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  ima: No TPM chip found, activating TPM-bypass!\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  ima: Allocated hash algorithm: sha1\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  ima: No architecture policies found\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  evm: Initialising EVM extended attributes:\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  evm: security.selinux\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  evm: security.SMACK64\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  evm: security.SMACK64EXEC\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  evm: security.SMACK64TRANSMUTE\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  evm: security.SMACK64MMAP\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  evm: security.apparmor\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  evm: security.ima\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  evm: security.capability\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  evm: HMAC attrs: 0x1\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  Freeing unused kernel memory: 3436K\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  Write protected read-only-after-init data: 88k\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  Run /init as init process\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  virtio_blk virtio1: [vda] 816 512-byte logical blocks (418 kB/408 KiB)\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  virtio_blk virtio0: [vdb] 209715200 512-byte logical blocks (107 GB/100 GiB)\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:   vdb: vdb1 vdb2\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  EXT4-fs (dm-0): mounted filesystem with ordered data mode. Opts: (null)\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  EXT4-fs (vdb1): mounted filesystem with ordered data mode. Opts: (null)\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  ISO 9660 Extensions: Microsoft Joliet Level 3\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  ISO 9660 Extensions: RRIP_1991A\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  EXT4-fs (dm-0): re-mounted. Opts: (null)\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  systemd 245.4-4ubuntu3.19 running in system mode. (+PAM +AUDIT +SELINUX +IMA +APPARMOR +SMACK +SYSVINIT +UTMP +LIBCRYPTSETUP +GCRYPT +GNUTLS +ACL +XZ +LZ4 +SECCOMP +BLKID +ELFUTILS +KMOD +IDN2 -IDN +PCRE2 default-hierarchy=hybrid)\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Detected virtualization kvm.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Detected architecture s390x.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Set hostname to &lt;student02-grep11server&gt;.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Initializing machine ID from D-Bus machine ID.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Installed transient /etc/machine-id file.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  /usr/lib/systemd/system-generators/s390-cpi-vars failed with exit status 1.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Created slice system-modprobe.slice.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Created slice system-systemd\\x2dfsck.slice.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Created slice User and Session Slice.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Started Forward Password Requests to Wall Directory Watch.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Set up automount Arbitrary Executable File Formats File System Automount Point.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Reached target Slices.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Reached target Swap.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Listening on Device-mapper event daemon FIFOs.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Listening on LVM2 poll daemon socket.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Listening on multipathd control socket.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Listening on Syslog Socket.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Listening on fsck to fsckd communication Socket.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Listening on initctl Compatibility Named Pipe.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Listening on Journal Audit Socket.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Listening on Journal Socket (/dev/log).\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Listening on Journal Socket.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Listening on Network Service Netlink Socket.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Listening on udev Control Socket.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Listening on udev Kernel Socket.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Mounting Huge Pages File System...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Mounting POSIX Message Queue File System...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Mounting Kernel Debug File System...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Mounting Kernel Trace File System...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Journal Service...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Set the console keyboard layout...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Create list of static device nodes for the current kernel...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Monitoring of LVM2 mirrors, snapshots etc. using dmeventd or progress polling...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Load Kernel Module chromeos_pstore...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Load Kernel Module drm...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Load Kernel Module efi_pstore...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Load Kernel Module pstore_blk...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Load Kernel Module pstore_zone...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Load Kernel Module ramoops...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Condition check resulted in OpenVSwitch configuration for cleanup being skipped.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Condition check resulted in Set Up Additional Binary Formats being skipped.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting File System Check on Root Device...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Load Kernel Modules...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting udev Coldplug all Devices...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Mounted Huge Pages File System.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Mounted POSIX Message Queue File System.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Mounted Kernel Debug File System.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Mounted Kernel Trace File System.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Finished Create list of static device nodes for the current kernel.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  modprobe@chromeos_pstore.service: Succeeded.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Finished Load Kernel Module chromeos_pstore.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  modprobe@efi_pstore.service: Succeeded.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Finished Load Kernel Module efi_pstore.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  modprobe@pstore_blk.service: Succeeded.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Finished Load Kernel Module pstore_blk.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  modprobe@pstore_zone.service: Succeeded.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Finished Load Kernel Module pstore_zone.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Finished Load Kernel Modules.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Mounting FUSE Control File System...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Mounting Kernel Configuration File System...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Apply Kernel Variables...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Mounted FUSE Control File System.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Started File System Check Daemon to report status.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Mounted Kernel Configuration File System.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Finished File System Check on Root Device.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Remount Root and Kernel File Systems...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Finished Apply Kernel Variables.\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  EXT4-fs (dm-0): re-mounted. Opts: errors=remount-ro\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Finished Remount Root and Kernel File Systems.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Condition check resulted in Rebuild Hardware Database being skipped.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Load/Save Random Seed...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Create System Users...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Finished Create System Users.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Create Static Device Nodes in /dev...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Finished udev Coldplug all Devices.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting udev Wait for Complete Device Initialization...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Finished Create Static Device Nodes in /dev.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting udev Kernel Device Manager...\nFeb 14 17:38:21 ubuntu2204 systemd-journald[1439]:  Journal started\nFeb 14 17:38:21 ubuntu2204 systemd-journald[1439]:  Runtime Journal (/run/log/journal/1dcc72ccd9744ca4bf0ed36a45a64fde) is 4.0M, max 32.1M, 28.1M free.\nFeb 14 17:38:21 ubuntu2204 systemd-modules-load[1439]:  Failed to find module 'ipmi-devintf'\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Started Journal Service.\nFeb 14 17:38:21 ubuntu2204 systemd-sysctl[1439]:  Not setting net/ipv4/conf/all/promote_secondaries (explicit setting exists).\nFeb 14 17:38:21 ubuntu2204 systemd-journald[1439]:  Time spent on flushing to /var/log/journal/1dcc72ccd9744ca4bf0ed36a45a64fde is 1.088ms for 239 entries.\nFeb 14 17:38:21 ubuntu2204 systemd-journald[1439]:  System Journal (/var/log/journal/1dcc72ccd9744ca4bf0ed36a45a64fde) is 8.0M, max 4.0G, 3.9G free.\nFeb 14 17:38:21 ubuntu2204 systemd-sysctl[1439]:  Not setting net/ipv4/conf/default/promote_secondaries (explicit setting exists).\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Flush Journal to Persistent Storage...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Finished Load/Save Random Seed.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  modprobe@drm.service: Succeeded.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Finished Load Kernel Module drm.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  modprobe@ramoops.service: Succeeded.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Finished Load Kernel Module ramoops.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Condition check resulted in Platform Persistent Storage Archival being skipped.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Started udev Kernel Device Manager.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Network Service...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Finished Flush Journal to Persistent Storage.\nFeb 14 17:38:21 ubuntu2204 systemd-fsck[1439]:  /dev/mapper/luks-83ed88f3-2a74-47bb-b3c1-1b0a2ff3dc03: clean, 27572/6291456 files, 785365/25161728 blocks\nFeb 14 17:38:21 ubuntu2204 systemd-networkd[1439]:  Enumeration completed\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Started Network Service.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Wait for Network to be Configured...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Finished Wait for Network to be Configured.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Finished Set the console keyboard layout.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Condition check resulted in Show Plymouth Boot Screen being skipped.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Started Dispatch Password Requests to Console Directory Watch.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Condition check resulted in Forward Password Requests to Plymouth Directory Watch being skipped.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Reached target Local Encrypted Volumes.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Reached target Paths.\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  VFIO - User Level meta-driver version: 0.3\nFeb 14 17:38:21 ubuntu2204 systemd-udevd[1439]:  ethtool: autonegotiation is unset or enabled, the speed and duplex are not writable.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Found device /dev/disk/by-uuid/8b336c4a-74e3-4ca8-a907-4c445428b8b7.\nFeb 14 17:38:21 ubuntu2204 systemd-udevd[1439]:  Using default interface naming scheme 'v245'.\nFeb 14 17:38:21 ubuntu2204 systemd-udevd[1439]:  ethtool: autonegotiation is unset or enabled, the speed and duplex are not writable.\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  virtio_net virtio2 enc1: renamed from eth0\nFeb 14 17:38:21 ubuntu2204 udevadm[1439]:  systemd-udev-settle.service is deprecated.\nFeb 14 17:38:21 ubuntu2204 systemd-networkd[1439]:  eth0: Interface name change detected, eth0 has been renamed to enc1.\nFeb 14 17:38:21 ubuntu2204 systemd-udevd[1439]:  Using default interface naming scheme 'v245'.\nFeb 14 17:38:21 ubuntu2204 systemd-udevd[1439]:  ethtool: autonegotiation is unset or enabled, the speed and duplex are not writable.\nFeb 14 17:38:21 ubuntu2204 systemd-networkd[1439]:  enc1: IPv6 successfully enabled\nFeb 14 17:38:21 ubuntu2204 systemd-networkd[1439]:  enc1: Link UP\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Finished udev Wait for Complete Device Initialization.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Device-Mapper Multipath Device Controller...\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  alua: device handler registered\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  emc: device handler registered\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  rdac: device handler registered\nFeb 14 17:38:21 ubuntu2204 multipathd[1439]:  --------start up--------\nFeb 14 17:38:21 ubuntu2204 multipathd[1439]:  read /etc/multipath.conf\nFeb 14 17:38:21 ubuntu2204 multipathd[1439]:  path checkers start up\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Started Device-Mapper Multipath Device Controller.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Finished Monitoring of LVM2 mirrors, snapshots etc. using dmeventd or progress polling.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Reached target Local File Systems (Pre).\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting File System Check on /dev/disk/by-uuid/8b336c4a-74e3-4ca8-a907-4c445428b8b7...\nFeb 14 17:38:21 ubuntu2204 systemd-fsck[1439]:  /dev/vdb1: clean, 13/262144 files, 119488/1048064 blocks\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Finished File System Check on /dev/disk/by-uuid/8b336c4a-74e3-4ca8-a907-4c445428b8b7.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Mounting /boot...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Mounted /boot.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Reached target Local File Systems.\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  EXT4-fs (vdb1): mounted filesystem with ordered data mode. Opts: (null)\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Set console font and keymap...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Apply Control Program Identification (CPI)...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Create final runtime dir for shutdown pivot root...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Condition check resulted in LXD - agent - 9p mount being skipped.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Condition check resulted in LXD - agent being skipped.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Tell Plymouth To Write Out Runtime Data...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Condition check resulted in Store a System Token in an EFI Variable being skipped.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Commit a transient machine-id on disk...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Create Volatile Files and Directories...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Finished Create final runtime dir for shutdown pivot root.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Finished Set console font and keymap.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Finished Create Volatile Files and Directories.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Network Name Resolution...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Network Time Synchronization...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Update UTMP about System Boot/Shutdown...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  plymouth-read-write.service: Succeeded.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Finished Tell Plymouth To Write Out Runtime Data.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Finished Update UTMP about System Boot/Shutdown.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  etc-machine\\x2did.mount: Succeeded.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Finished Commit a transient machine-id on disk.\nFeb 14 17:38:21 ubuntu2204 cpictl[1439]:  /lib/s390-tools/cpictl: line 112: echo: write error: Operation not supported\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  cpi.service: Succeeded.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Finished Apply Control Program Identification (CPI).\nFeb 14 17:38:21 ubuntu2204 systemd-resolved[1439]:  Positive Trust Anchors:\nFeb 14 17:38:21 ubuntu2204 systemd-resolved[1439]:  . IN DS 20326 8 2 e06d44b80b8f1d39a95c0b0d7c65d08458e880409bbc683457104237c7f8ec8d\nFeb 14 17:38:21 ubuntu2204 systemd-resolved[1439]:  Negative trust anchors: 10.in-addr.arpa 16.172.in-addr.arpa 17.172.in-addr.arpa 18.172.in-addr.arpa 19.172.in-addr.arpa 20.172.in-addr.arpa 21.172.in-addr.arpa 22.172.in-addr.arpa 23.172.in-addr.arpa 24.172.in-addr.arpa 25.172.in-addr.arpa 26.172.in-addr.arpa 27.172.in-addr.arpa 28.172.in-addr.arpa 29.172.in-addr.arpa 30.172.in-addr.arpa 31.172.in-addr.arpa 168.192.in-addr.arpa d.f.ip6.arpa corp home internal intranet lan local private test\nFeb 14 17:38:21 ubuntu2204 systemd-resolved[1439]:  Using system hostname 'student02-grep11server'.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Started Network Name Resolution.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Reached target Network.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Reached target Network is Online.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Reached target Host and Network Name Lookups.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Condition check resulted in Login to default iSCSI targets being skipped.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Reached target Remote File Systems (Pre).\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Reached target Remote File Systems.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Availability of block devices...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Started Network Time Synchronization.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Reached target System Initialization.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Started Daily Cleanup of Temporary Directories.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Reached target System Time Set.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Reached target System Time Synchronized.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Started Daily apt download activities.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Started Daily apt upgrade and clean activities.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Started Periodic ext4 Online Metadata Check for All Filesystems.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Started Discard unused blocks once a week.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Started Refresh fwupd metadata regularly.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Started Daily rotation of log files.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Started Daily man-db regeneration.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Started Message of the Day.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Started Timer for calling verify disk encryption invoker service.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Reached target Timers.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Listening on D-Bus System Message Bus Socket.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Docker Socket for the API.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Listening on Open-iSCSI iscsid Socket.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Listening on UUID daemon activation socket.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Listening on Docker Socket for the API.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Reached target Sockets.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Reached target Basic System.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Deferred execution scheduler...\nFeb 14 17:38:21 ubuntu2204 cron[1439]:  (CRON) INFO (pidfile fd = 3)\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting containerd container runtime...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Condition check resulted in CPACF statistics collection daemon process for Linux on System z being skipped.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Started Regular background program processing daemon.\nFeb 14 17:38:21 ubuntu2204 cron[1439]:  (CRON) INFO (Running @reboot jobs)\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Started D-Bus System Message Bus.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Started Save initial kernel messages after boot.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Configure dump on panic for System z...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Remove Stale Online ext4 Metadata Check Snapshots...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Discard unused blocks on filesystems from /etc/fstab...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Condition check resulted in getty on tty2-tty6 if dbus and logind are not available being skipped.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Reached target Login Prompts.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Started irqbalance daemon.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Condition check resulted in Set the CPU Frequency Scaling governor being skipped.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Authorization Manager...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Condition check resulted in Pollinate to seed the pseudo random number generator being skipped.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Condition check resulted in fast remote file copy program daemon being skipped.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Logging Configuration...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Login Service...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Permit User Sessions...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Disk Manager...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Rotate log files...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Daily man-db regeneration...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Finished Availability of block devices.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Started Deferred execution scheduler.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Finished Permit User Sessions.\nFeb 14 17:38:21 ubuntu2204 journal[1439]:  udisks daemon version 2.8.4 starting\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Hold until boot process finishes up...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Terminate Plymouth Boot Screen...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  plymouth-quit-wait.service: Succeeded.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Finished Hold until boot process finishes up.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Set console scheme...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Finished Set console scheme.\nFeb 14 17:38:21 ubuntu2204 dbus-daemon[1439]:  [system] AppArmor D-Bus mediation is enabled\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  man-db.service: Succeeded.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Finished Daily man-db regeneration.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  e2scrub_reap.service: Succeeded.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Finished Remove Stale Online ext4 Metadata Check Snapshots.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  plymouth-quit.service: Succeeded.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Finished Terminate Plymouth Boot Screen.\nFeb 14 17:38:21 ubuntu2204 dumpconf[1439]:  stop on panic configured.\nFeb 14 17:38:21 ubuntu2204 polkitd[1439]:  started daemon version 0.105 using authority implementation `local' version `0.105'\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  logrotate.service: Succeeded.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Finished Rotate log files.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Started Authorization Manager.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Modem Manager...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Finished Configure dump on panic for System z.\nFeb 14 17:38:21 ubuntu2204 journal[1439]:  failed to load module mdraid: libbd_mdraid.so.2: cannot open shared object file: No such file or directory\nFeb 14 17:38:21 ubuntu2204 ModemManager[1439]:  &lt;info&gt;  ModemManager (version 1.18.6) starting in system bus...\nFeb 14 17:38:21 ubuntu2204 journal[1439]:  Failed to load the 'mdraid' libblockdev plugin\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Started Modem Manager.\nFeb 14 17:38:21 ubuntu2204 systemd-logind[1439]:  New seat seat0.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Started Login Service.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Started Disk Manager.\nFeb 14 17:38:21 ubuntu2204 journal[1439]:  Acquired the name org.freedesktop.UDisks2 on the system message bus\nFeb 14 17:38:21 ubuntu2204 fstrim[1439]:  /boot: 3.6 GiB (3803447296 bytes) trimmed on /dev/vdb1\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.283295581Z\" level=info msg=\"starting containerd\" revision= version=\"1.5.9-0ubuntu1~20.04.6\"\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  fstrim.service: Succeeded.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Finished Discard unused blocks on filesystems from /etc/fstab.\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.322989175Z\" level=info msg=\"loading plugin \\\"io.containerd.content.v1.content\\\"...\" type=io.containerd.content.v1\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.324771036Z\" level=info msg=\"loading plugin \\\"io.containerd.snapshotter.v1.aufs\\\"...\" type=io.containerd.snapshotter.v1\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  aufs 5.4.3-20200302\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.329621227Z\" level=info msg=\"loading plugin \\\"io.containerd.snapshotter.v1.btrfs\\\"...\" type=io.containerd.snapshotter.v1\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.329814187Z\" level=info msg=\"skip loading plugin \\\"io.containerd.snapshotter.v1.btrfs\\\"...\" error=\"path /var/lib/containerd/io.containerd.snapshotter.v1.btrfs (ext4) must be a btrfs filesystem to be used with the btrfs snapshotter: skip plugin\" type=io.containerd.snapshotter.v1\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.329853950Z\" level=info msg=\"loading plugin \\\"io.containerd.snapshotter.v1.devmapper\\\"...\" type=io.containerd.snapshotter.v1\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.329893496Z\" level=warning msg=\"failed to load plugin io.containerd.snapshotter.v1.devmapper\" error=\"devmapper not configured\"\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.329921482Z\" level=info msg=\"loading plugin \\\"io.containerd.snapshotter.v1.native\\\"...\" type=io.containerd.snapshotter.v1\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.330054237Z\" level=info msg=\"loading plugin \\\"io.containerd.snapshotter.v1.overlayfs\\\"...\" type=io.containerd.snapshotter.v1\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.330186987Z\" level=info msg=\"loading plugin \\\"io.containerd.snapshotter.v1.zfs\\\"...\" type=io.containerd.snapshotter.v1\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.330298845Z\" level=info msg=\"skip loading plugin \\\"io.containerd.snapshotter.v1.zfs\\\"...\" error=\"path /var/lib/containerd/io.containerd.snapshotter.v1.zfs must be a zfs filesystem to be used with the zfs snapshotter: skip plugin\" type=io.containerd.snapshotter.v1\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.330332378Z\" level=info msg=\"loading plugin \\\"io.containerd.metadata.v1.bolt\\\"...\" type=io.containerd.metadata.v1\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.330358166Z\" level=warning msg=\"could not use snapshotter devmapper in metadata plugin\" error=\"devmapper not configured\"\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.330383266Z\" level=info msg=\"metadata content store policy set\" policy=shared\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.331033245Z\" level=info msg=\"loading plugin \\\"io.containerd.differ.v1.walking\\\"...\" type=io.containerd.differ.v1\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.331071842Z\" level=info msg=\"loading plugin \\\"io.containerd.gc.v1.scheduler\\\"...\" type=io.containerd.gc.v1\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.331120214Z\" level=info msg=\"loading plugin \\\"io.containerd.service.v1.introspection-service\\\"...\" type=io.containerd.service.v1\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.331183804Z\" level=info msg=\"loading plugin \\\"io.containerd.service.v1.containers-service\\\"...\" type=io.containerd.service.v1\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.331224800Z\" level=info msg=\"loading plugin \\\"io.containerd.service.v1.content-service\\\"...\" type=io.containerd.service.v1\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.331281253Z\" level=info msg=\"loading plugin \\\"io.containerd.service.v1.diff-service\\\"...\" type=io.containerd.service.v1\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.331333354Z\" level=info msg=\"loading plugin \\\"io.containerd.service.v1.images-service\\\"...\" type=io.containerd.service.v1\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.331371665Z\" level=info msg=\"loading plugin \\\"io.containerd.service.v1.leases-service\\\"...\" type=io.containerd.service.v1\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.331407044Z\" level=info msg=\"loading plugin \\\"io.containerd.service.v1.namespaces-service\\\"...\" type=io.containerd.service.v1\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.331436391Z\" level=info msg=\"loading plugin \\\"io.containerd.service.v1.snapshots-service\\\"...\" type=io.containerd.service.v1\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.331473287Z\" level=info msg=\"loading plugin \\\"io.containerd.runtime.v1.linux\\\"...\" type=io.containerd.runtime.v1\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.331544044Z\" level=info msg=\"loading plugin \\\"io.containerd.runtime.v2.task\\\"...\" type=io.containerd.runtime.v2\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.331607188Z\" level=info msg=\"loading plugin \\\"io.containerd.monitor.v1.cgroups\\\"...\" type=io.containerd.monitor.v1\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.331966367Z\" level=info msg=\"loading plugin \\\"io.containerd.service.v1.tasks-service\\\"...\" type=io.containerd.service.v1\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.332026406Z\" level=info msg=\"loading plugin \\\"io.containerd.internal.v1.restart\\\"...\" type=io.containerd.internal.v1\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.332087354Z\" level=info msg=\"loading plugin \\\"io.containerd.grpc.v1.containers\\\"...\" type=io.containerd.grpc.v1\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.332122235Z\" level=info msg=\"loading plugin \\\"io.containerd.grpc.v1.content\\\"...\" type=io.containerd.grpc.v1\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.332152723Z\" level=info msg=\"loading plugin \\\"io.containerd.grpc.v1.diff\\\"...\" type=io.containerd.grpc.v1\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.332187646Z\" level=info msg=\"loading plugin \\\"io.containerd.grpc.v1.events\\\"...\" type=io.containerd.grpc.v1\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.332216938Z\" level=info msg=\"loading plugin \\\"io.containerd.grpc.v1.healthcheck\\\"...\" type=io.containerd.grpc.v1\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.332250263Z\" level=info msg=\"loading plugin \\\"io.containerd.grpc.v1.images\\\"...\" type=io.containerd.grpc.v1\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.332279562Z\" level=info msg=\"loading plugin \\\"io.containerd.grpc.v1.leases\\\"...\" type=io.containerd.grpc.v1\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.332305604Z\" level=info msg=\"loading plugin \\\"io.containerd.grpc.v1.namespaces\\\"...\" type=io.containerd.grpc.v1\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.332327281Z\" level=info msg=\"loading plugin \\\"io.containerd.internal.v1.opt\\\"...\" type=io.containerd.internal.v1\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.332722776Z\" level=info msg=\"loading plugin \\\"io.containerd.grpc.v1.snapshots\\\"...\" type=io.containerd.grpc.v1\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.332754771Z\" level=info msg=\"loading plugin \\\"io.containerd.grpc.v1.tasks\\\"...\" type=io.containerd.grpc.v1\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.332788017Z\" level=info msg=\"loading plugin \\\"io.containerd.grpc.v1.version\\\"...\" type=io.containerd.grpc.v1\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.332812904Z\" level=info msg=\"loading plugin \\\"io.containerd.grpc.v1.cri\\\"...\" type=io.containerd.grpc.v1\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.332902355Z\" level=info msg=\"Start cri plugin with config {PluginConfig:{ContainerdConfig:{Snapshotter:overlayfs DefaultRuntimeName:runc DefaultRuntime:{Type: Engine: PodAnnotations:[] ContainerAnnotations:[] Root: Options:map[] PrivilegedWithoutHostDevices:false BaseRuntimeSpec:} UntrustedWorkloadRuntime:{Type: Engine: PodAnnotations:[] ContainerAnnotations:[] Root: Options:map[] PrivilegedWithoutHostDevices:false BaseRuntimeSpec:} Runtimes:map[runc:{Type:io.containerd.runc.v2 Engine: PodAnnotations:[] ContainerAnnotations:[] Root: Options:map[BinaryName: CriuImagePath: CriuPath: CriuWorkPath: IoGid:0 IoUid:0 NoNewKeyring:false NoPivotRoot:false Root: ShimCgroup: SystemdCgroup:false] PrivilegedWithoutHostDevices:false BaseRuntimeSpec:}] NoPivot:false DisableSnapshotAnnotations:true DiscardUnpackedLayers:false} CniConfig:{NetworkPluginBinDir:/opt/cni/bin NetworkPluginConfDir:/etc/cni/net.d NetworkPluginMaxConfNum:1 NetworkPluginConfTemplate:} Registry:{ConfigPath: Mirrors:map[] Configs:map[] Auths:map[] Headers:map[]} ImageDecryption:{KeyModel:node} DisableTCPService:true StreamServerAddress:127.0.0.1 StreamServerPort:0 StreamIdleTimeout:4h0m0s EnableSelinux:false SelinuxCategoryRange:1024 SandboxImage:k8s.gcr.io/pause:3.5 StatsCollectPeriod:10 SystemdCgroup:false EnableTLSStreaming:false X509KeyPairStreaming:{TLSCertFile: TLSKeyFile:} MaxContainerLogLineSize:16384 DisableCgroup:false DisableApparmor:false RestrictOOMScoreAdj:false MaxConcurrentDownloads:3 DisableProcMount:false UnsetSeccompProfile: TolerateMissingHugetlbController:true DisableHugetlbController:true IgnoreImageDefinedVolumes:false NetNSMountsUnderStateDir:false} ContainerdRootDir:/var/lib/containerd ContainerdEndpoint:/run/containerd/containerd.sock RootDir:/var/lib/containerd/io.containerd.grpc.v1.cri StateDir:/run/containerd/io.containerd.grpc.v1.cri}\"\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.332985899Z\" level=info msg=\"Connect containerd service\"\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.333039151Z\" level=info msg=\"Get image filesystem path \\\"/var/lib/containerd/io.containerd.snapshotter.v1.overlayfs\\\"\"\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.333598171Z\" level=error msg=\"failed to load cni during init, please check CRI plugin status before setting up network for pods\" error=\"cni config load failed: no network config found in /etc/cni/net.d: cni plugin not initialized: failed to load cni config\"\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.333706212Z\" level=info msg=\"loading plugin \\\"io.containerd.grpc.v1.introspection\\\"...\" type=io.containerd.grpc.v1\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.333894993Z\" level=info msg=serving... address=/run/containerd/containerd.sock.ttrpc\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.333934483Z\" level=info msg=serving... address=/run/containerd/containerd.sock\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.333979581Z\" level=info msg=\"containerd successfully booted in 0.051063s\"\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Started containerd container runtime.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Docker Application Container Engine...\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.341347775Z\" level=info msg=\"Start subscribing containerd event\"\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.341427731Z\" level=info msg=\"Start recovering state\"\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.341503299Z\" level=info msg=\"Start event monitor\"\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.341527042Z\" level=info msg=\"Start snapshots syncer\"\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.341554437Z\" level=info msg=\"Start cni network conf syncer\"\nFeb 14 17:38:21 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:19.341577669Z\" level=info msg=\"Start streaming server\"\nFeb 14 17:38:21 ubuntu2204 dockerd[1439]:  time=\"2023-02-14T17:38:19.417162288Z\" level=info msg=\"Starting up\"\nFeb 14 17:38:21 ubuntu2204 dockerd[1439]:  time=\"2023-02-14T17:38:19.417747593Z\" level=info msg=\"detected 127.0.0.53 nameserver, assuming systemd-resolved, so using resolv.conf: /run/systemd/resolve/resolv.conf\"\nFeb 14 17:38:21 ubuntu2204 dockerd[1439]:  time=\"2023-02-14T17:38:19.418433441Z\" level=info msg=\"parsed scheme: \\\"unix\\\"\" module=grpc\nFeb 14 17:38:21 ubuntu2204 dockerd[1439]:  time=\"2023-02-14T17:38:19.418471524Z\" level=info msg=\"scheme \\\"unix\\\" not registered, fallback to default scheme\" module=grpc\nFeb 14 17:38:21 ubuntu2204 dockerd[1439]:  time=\"2023-02-14T17:38:19.418512027Z\" level=info msg=\"ccResolverWrapper: sending update to cc: {[{unix:///run/containerd/containerd.sock  &lt;nil&gt; 0 &lt;nil&gt;}] &lt;nil&gt; &lt;nil&gt;}\" module=grpc\nFeb 14 17:38:21 ubuntu2204 dockerd[1439]:  time=\"2023-02-14T17:38:19.418545665Z\" level=info msg=\"ClientConn switching balancer to \\\"pick_first\\\"\" module=grpc\nFeb 14 17:38:21 ubuntu2204 dockerd[1439]:  time=\"2023-02-14T17:38:19.421022900Z\" level=info msg=\"parsed scheme: \\\"unix\\\"\" module=grpc\nFeb 14 17:38:21 ubuntu2204 dockerd[1439]:  time=\"2023-02-14T17:38:19.421069661Z\" level=info msg=\"scheme \\\"unix\\\" not registered, fallback to default scheme\" module=grpc\nFeb 14 17:38:21 ubuntu2204 dockerd[1439]:  time=\"2023-02-14T17:38:19.421103752Z\" level=info msg=\"ccResolverWrapper: sending update to cc: {[{unix:///run/containerd/containerd.sock  &lt;nil&gt; 0 &lt;nil&gt;}] &lt;nil&gt; &lt;nil&gt;}\" module=grpc\nFeb 14 17:38:21 ubuntu2204 dockerd[1439]:  time=\"2023-02-14T17:38:19.421137414Z\" level=info msg=\"ClientConn switching balancer to \\\"pick_first\\\"\" module=grpc\nFeb 14 17:38:21 ubuntu2204 dockerd[1439]:  time=\"2023-02-14T17:38:19.494902961Z\" level=info msg=\"[graphdriver] using prior storage driver: overlay2\"\nFeb 14 17:38:21 ubuntu2204 dockerd[1439]:  time=\"2023-02-14T17:38:19.506175790Z\" level=warning msg=\"Your kernel does not support swap memory limit\"\nFeb 14 17:38:21 ubuntu2204 dockerd[1439]:  time=\"2023-02-14T17:38:19.506186302Z\" level=warning msg=\"Your kernel does not support CPU realtime scheduler\"\nFeb 14 17:38:21 ubuntu2204 dockerd[1439]:  time=\"2023-02-14T17:38:19.506190862Z\" level=warning msg=\"Your kernel does not support cgroup blkio weight\"\nFeb 14 17:38:21 ubuntu2204 dockerd[1439]:  time=\"2023-02-14T17:38:19.506194842Z\" level=warning msg=\"Your kernel does not support cgroup blkio weight_device\"\nFeb 14 17:38:21 ubuntu2204 dockerd[1439]:  time=\"2023-02-14T17:38:19.506304997Z\" level=info msg=\"Loading containers: start.\"\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  bridge: filtering via arp/ip/ip6tables is no longer available by default. Update your scripts to load br_netfilter if you need this.\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  Bridge firewalling registered\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  bpfilter: Loaded bpfilter_umh pid 960\nFeb 14 17:38:21 ubuntu2204 journal[1439]:  Started bpfilter\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  Initializing XFRM netlink socket\nFeb 14 17:38:21 ubuntu2204 systemd-networkd[1439]:  rtnl: received neighbor for link '3' we don't know about, ignoring.\nFeb 14 17:38:21 ubuntu2204 systemd-networkd[1439]:   message repeated 3 times: [rtnl: received neighbor for link '3' we don't know about, ignoring.]\nFeb 14 17:38:21 ubuntu2204 systemd-udevd[1439]:  ethtool: autonegotiation is unset or enabled, the speed and duplex are not writable.\nFeb 14 17:38:21 ubuntu2204 systemd-networkd[1439]:  docker0: Link UP\nFeb 14 17:38:21 ubuntu2204 dockerd[1439]:  time=\"2023-02-14T17:38:19.581343022Z\" level=info msg=\"Default bridge (docker0) is assigned with an IP address 172.17.0.0/16. Daemon option --bip can be used to set a preferred IP address\"\nFeb 14 17:38:21 ubuntu2204 dockerd[1439]:  time=\"2023-02-14T17:38:19.597014467Z\" level=info msg=\"Loading containers: done.\"\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  var-lib-docker-overlay2-opaque\\x2dbug\\x2dcheck013158240-merged.mount: Succeeded.\nFeb 14 17:38:21 ubuntu2204 dockerd[1439]:  time=\"2023-02-14T17:38:19.613641614Z\" level=info msg=\"Docker daemon\" commit=\"20.10.12-0ubuntu2~20.04.1\" graphdriver(s)=overlay2 version=20.10.12\nFeb 14 17:38:21 ubuntu2204 dockerd[1439]:  time=\"2023-02-14T17:38:19.613739452Z\" level=info msg=\"Daemon has completed initialization\"\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Started Docker Application Container Engine.\nFeb 14 17:38:21 ubuntu2204 dockerd[1439]:  time=\"2023-02-14T17:38:19.630818138Z\" level=info msg=\"API listen on /run/docker.sock\"\nFeb 14 17:38:21 ubuntu2204 systemd-networkd[1439]:  enc1: Gained carrier\nFeb 14 17:38:21 ubuntu2204 systemd-timesyncd[1439]:  Network configuration changed, trying to establish connection.\nFeb 14 17:38:21 ubuntu2204 systemd-networkd[1439]:  enc1: DHCPv4 address 172.16.0.62/24 via 172.16.0.1\nFeb 14 17:38:21 ubuntu2204 dbus-daemon[1439]:  [system] Activating via systemd: service name='org.freedesktop.hostname1' unit='dbus-org.freedesktop.hostname1.service' requested by ':1.1' (uid=100 pid=761 comm=\"/lib/systemd/systemd-networkd \" label=\"unconfined\")\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Hostname Service...\nFeb 14 17:38:21 ubuntu2204 kernel[1439]:  IPv6: ADDRCONF(NETDEV_CHANGE): enc1: link becomes ready\nFeb 14 17:38:21 ubuntu2204 dbus-daemon[1439]:  [system] Successfully activated service 'org.freedesktop.hostname1'\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Started Hostname Service.\nFeb 14 17:38:21 ubuntu2204 systemd-hostnamed[1439]:  Changed host name to 'grep11se02'\nFeb 14 17:38:21 ubuntu2204 systemd-timesyncd[1439]:  Initial synchronization to time server 185.125.190.58:123 (ntp.ubuntu.com).\nFeb 14 17:38:21 ubuntu2204 hpcr-dnslookup[1439]:  HPL14000I: Network connectivity check completed successfully.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Finished Logging Configuration.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Reached target Early Initialization.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Reached target Logging to remote monitoring server is initiated..\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Logging Configuration...\nFeb 14 17:38:21 ubuntu2204 hpcr-logging[1439]:  Configuring logging ...\nFeb 14 17:38:21 ubuntu2204 hpcr-logging[1439]:  Version [1.1.74]\nFeb 14 17:38:21 ubuntu2204 hpcr-logging[1439]:  Configuring logging, input [/var/hyperprotect/user-data.decrypted] ...\nFeb 14 17:38:21 ubuntu2204 hpcr-logging[1439]:  ValidateContractE ...\nFeb 14 17:38:21 ubuntu2204 hpcr-logging[1439]:  config written: /etc/rsyslog.d/22-logging.conf\nFeb 14 17:38:21 ubuntu2204 hpcr-logging[1439]:  HPL01010I: Logging has been setup successfully.\nFeb 14 17:38:21 ubuntu2204 hpcr-logging[1439]:  Logging has been configured\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Finished Logging Configuration.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting System Logging Service...\nFeb 14 17:38:21 ubuntu2204 rsyslogd[1439]:  rsyslogd's groupid changed to 110\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Started System Logging Service.\nFeb 14 17:38:21 ubuntu2204 rsyslogd[1439]:  rsyslogd's userid changed to 104\nFeb 14 17:38:21 ubuntu2204 rsyslogd[1439]:  [origin software=\"rsyslogd\" swVersion=\"8.2001.0\" x-pid=\"1099\" x-info=\"https://www.rsyslog.com\"] start\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Reached target Synchronizes the Logging Target.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Reached target Logging to remote log server is initiated..\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Service that does validation of contract...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting HPCR Registry Authentication...\nFeb 14 17:38:21 ubuntu2204 rsyslogd[1439]:  imjournal: No statefile exists, /var/spool/rsyslog/journal_state will be created (ignore if this is first run): No such file or directory [v8.2001.0 try https://www.rsyslog.com/e/2040 ]\nFeb 14 17:38:21 ubuntu2204 hpcr-registry-auth[1439]:  Starting Registry Authentication ...\nFeb 14 17:38:21 ubuntu2204 hpcr-registry-auth[1439]:  Version [1.0.38]\nFeb 14 17:38:21 ubuntu2204 hpcr-registry-auth[1439]:  Writing auth config: /root/.docker/config.json\nFeb 14 17:38:21 ubuntu2204 hpcr-contract[1439]:  Welcome to SE Contract Validator\nFeb 14 17:38:21 ubuntu2204 hpcr-contract[1439]:  Contract file passed is:  /var/hyperprotect/user-data.decrypted\nFeb 14 17:38:21 ubuntu2204 hpcr-registry-auth[1439]:  Registry Authentication started\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Finished HPCR Registry Authentication.\nFeb 14 17:38:21 ubuntu2204 rsyslogd[1439]:  imjournal: journal files changed, reloading...  [v8.2001.0 try https://www.rsyslog.com/e/0 ]\nFeb 14 17:38:21 ubuntu2204 hpcr-contract[1439]:  Contract file is valid.\nFeb 14 17:38:21 ubuntu2204 hpcr-contract[1439]:  Extracting workload from /var/hyperprotect/user-data.decrypted to /var/hyperprotect/workload-data.decrypted\nFeb 14 17:38:21 ubuntu2204 hpcr-contract[1439]:  Extraction completed\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Finished Service that does validation of contract.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Service that does signature validation of Env Workload of contract...\nFeb 14 17:38:21 ubuntu2204 hpcr-signature[1439]:  Welcome to SE ENV Workload Signature Validator\nFeb 14 17:38:21 ubuntu2204 hpcr-signature[1439]:  Decrypted Contract file passed is:  /var/hyperprotect/workload-data.decrypted\nFeb 14 17:38:21 ubuntu2204 hpcr-signature[1439]:  Encrypted Contract file passed is:  /var/hyperprotect/cidata/user-data\nFeb 14 17:38:21 ubuntu2204 hpcr-signature[1439]:  Check Dependency params Public key and EnvWorkload signature\nFeb 14 17:38:21 ubuntu2204 hpcr-signature[1439]:  Access Public key and EnvWorkload signature\nFeb 14 17:38:21 ubuntu2204 hpcr-signature[1439]:  Create combined EnvWorkload contract content\nFeb 14 17:38:21 ubuntu2204 hpcr-signature[1439]:  Verify signing key, signature and combined EnvWorkload contract\nFeb 14 17:38:21 ubuntu2204 hpcr-signature[1439]:  Verified OK\nFeb 14 17:38:21 ubuntu2204 hpcr-signature[1439]:  Successfully verified contract with signature and signing key\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Finished Service that does signature validation of Env Workload of contract.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Reached target Contract is unpacked and ready for consumption..\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Set docker image policy...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Service that waits until the user devices are ready...\nFeb 14 17:38:21 ubuntu2204 hpcr-image[1439]:  Starting image service...\nFeb 14 17:38:21 ubuntu2204 hpcr-image[1439]:  Contract yaml file: /var/hyperprotect/workload-data.decrypted\nFeb 14 17:38:21 ubuntu2204 hpcr-image[1439]:  Extracting image contract\nFeb 14 17:38:21 ubuntu2204 hpcr-image[1439]:  Successfully extracted Image contract\nFeb 14 17:38:21 ubuntu2204 hpcr-image[1439]:  Extracting container contract\nFeb 14 17:38:21 ubuntu2204 hpcr-image[1439]:  Checking for image with digest\nFeb 14 17:38:21 ubuntu2204 hpcr-image[1439]:  No image for DCT verification\nFeb 14 17:38:21 ubuntu2204 hpcr-image[1439]:  Image service completed successfully\nFeb 14 17:38:21 ubuntu2204 hpcr-disk-standby[1439]:  Waiting for devices ...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Finished Set docker image policy.\nFeb 14 17:38:21 ubuntu2204 hpcr-disk-standby[1439]:  Version [1.0.32]\nFeb 14 17:38:21 ubuntu2204 hpcr-disk-standby[1439]:  WaitForDevices input=[/var/hyperprotect/user-data.decrypted], timeout=[2023-02-14 17:53:20.390068206 +0000 UTC m=+900.005943373]\nFeb 14 17:38:21 ubuntu2204 hpcr-disk-standby[1439]:  ParseContract ...\nFeb 14 17:38:21 ubuntu2204 hpcr-disk-standby[1439]:  ValidateContract ...\nFeb 14 17:38:21 ubuntu2204 hpcr-disk-standby[1439]:  MergeVolumes ...\nFeb 14 17:38:21 ubuntu2204 hpcr-disk-standby[1439]:  Waiting for devices done done\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Finished Service that waits until the user devices are ready.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Service that mounts the data volumes after they are ready...\nFeb 14 17:38:21 ubuntu2204 hpcr-disk-mount[1439]:  Mounting volumes ...\nFeb 14 17:38:21 ubuntu2204 hpcr-disk-mount[1439]:  Version [1.0.32]\nFeb 14 17:38:21 ubuntu2204 hpcr-disk-mount[1439]:  MountVolumes input=[/var/hyperprotect/user-data.decrypted]\nFeb 14 17:38:21 ubuntu2204 hpcr-disk-mount[1439]:  ParseContract ...\nFeb 14 17:38:21 ubuntu2204 hpcr-disk-mount[1439]:  ValidateContract ...\nFeb 14 17:38:21 ubuntu2204 hpcr-disk-mount[1439]:  MergeVolumes ...\nFeb 14 17:38:21 ubuntu2204 hpcr-disk-mount[1439]:  Mounting volumes ...\nFeb 14 17:38:21 ubuntu2204 hpcr-disk-mount[1439]:  Mounting volumes done\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Finished Service that mounts the data volumes after they are ready.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Reached target Data volumes are mounted ready to be used..\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Starting Service that creates a set of containers...\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Started Service that verifies all disks are encrypted and logs output to systemd journal.\nFeb 14 17:38:21 ubuntu2204 systemd[1439]:  Started Service that periodically logs entry to trigger verify disk encryption service.\nFeb 14 17:38:21 ubuntu2204 verify-disk-encryption[1439]:  Verify disk encryption started...\nFeb 14 17:38:21 ubuntu2204 hpcr-container[1439]:  Starting container service...\nFeb 14 17:38:21 ubuntu2204 hpcr-container[1439]:  Validating contract...\nFeb 14 17:38:21 ubuntu2204 hpcr-container[1439]:  Compose folder /data1/compose created\nFeb 14 17:38:21 ubuntu2204 hpcr-container[1439]:  Contract yaml file: /var/hyperprotect/workload-data.decrypted\nFeb 14 17:38:21 ubuntu2204 hpcr-container[1439]:  Compose folder: /data1/compose\nFeb 14 17:38:21 ubuntu2204 hpcr-container[1439]:  Validation completed\nFeb 14 17:38:21 ubuntu2204 hpcr-container[1439]:  Parsing contract...\nFeb 14 17:38:21 ubuntu2204 hpcr-container[1439]:  Parsing of the Contract File completed successfully\nFeb 14 17:38:21 ubuntu2204 hpcr-container[1439]:  Extracting compose...\nFeb 14 17:38:21 ubuntu2204 hpcr-container[1439]:  Extracting done...\nFeb 14 17:38:21 ubuntu2204 hpcr-container[1439]:  Extracting the ENV Contents...\nFeb 14 17:38:21 ubuntu2204 hpcr-container[1439]:  Writing new env file /data1/compose/.env ...\nFeb 14 17:38:21 ubuntu2204 hpcr-container[1439]:  Reading existing env file /data1/compose/.env ...\nFeb 14 17:38:21 ubuntu2204 hpcr-container[1439]:  Extracting of environment contents done\nFeb 14 17:38:21 ubuntu2204 hpcr-container[1439]:  Check if docker is ready\nFeb 14 17:38:21 ubuntu2204 hpcr-container[1439]:  docker-compose.yml file is present in the directory\nFeb 14 17:38:21 ubuntu2204 hpcr-container[1439]:  Starting workload containers...\nFeb 14 17:38:21 ubuntu2204 dockerd[1439]:  time=\"2023-02-14T17:38:20.740416835Z\" level=warning msg=\"reference for unknown type: \" digest=\"sha256:a864174faadc39650e61ca45d8a3ceb01ea88602cfe6f4bd4e35c48e60556900\" remote=\"quay.io/gmoney23/grep11server@sha256:a864174faadc39650e61ca45d8a3ceb01ea88602cfe6f4bd4e35c48e60556900\"\nFeb 14 17:38:22 ubuntu2204 systemd-networkd[1439]:  enc1: Gained IPv6LL\nFeb 14 17:38:22 ubuntu2204 systemd-networkd[1439]:  rtnl: received neighbor for link '4' we don't know about, ignoring.\nFeb 14 17:38:22 ubuntu2204 systemd-networkd[1439]:   message repeated 3 times: [rtnl: received neighbor for link '4' we don't know about, ignoring.]\nFeb 14 17:38:22 ubuntu2204 systemd-udevd[1439]:  ethtool: autonegotiation is unset or enabled, the speed and duplex are not writable.\nFeb 14 17:38:22 ubuntu2204 systemd-networkd[1439]:  br-a0e686f1e37f: Link UP\nFeb 14 17:38:22 ubuntu2204 systemd[1439]:  var-lib-docker-overlay2-fe252209f8cfc5596c5db84b758e7bffdba1c82197aef3950e7b8521eca255d5\\x2dinit-merged.mount: Succeeded.\nFeb 14 17:38:23 ubuntu2204 systemd-udevd[1439]:  ethtool: autonegotiation is unset or enabled, the speed and duplex are not writable.\nFeb 14 17:38:23 ubuntu2204 systemd-udevd[1439]:  veth3f0ef8a: Could not generate persistent MAC: No data available\nFeb 14 17:38:23 ubuntu2204 systemd-udevd[1439]:  ethtool: autonegotiation is unset or enabled, the speed and duplex are not writable.\nFeb 14 17:38:23 ubuntu2204 systemd-udevd[1439]:  vetha7147ab: Could not generate persistent MAC: No data available\nFeb 14 17:38:23 ubuntu2204 systemd-networkd[1439]:  vetha7147ab: Link UP\nFeb 14 17:38:23 ubuntu2204 kernel[1439]:  br-a0e686f1e37f: port 1(vetha7147ab) entered blocking state\nFeb 14 17:38:23 ubuntu2204 kernel[1439]:  br-a0e686f1e37f: port 1(vetha7147ab) entered disabled state\nFeb 14 17:38:23 ubuntu2204 kernel[1439]:  device vetha7147ab entered promiscuous mode\nFeb 14 17:38:23 ubuntu2204 kernel[1439]:  br-a0e686f1e37f: port 1(vetha7147ab) entered blocking state\nFeb 14 17:38:23 ubuntu2204 kernel[1439]:  br-a0e686f1e37f: port 1(vetha7147ab) entered forwarding state\nFeb 14 17:38:23 ubuntu2204 kernel[1439]:  br-a0e686f1e37f: port 1(vetha7147ab) entered disabled state\nFeb 14 17:38:23 ubuntu2204 dockerd[1439]:  time=\"2023-02-14T17:38:22.985307486Z\" level=info msg=\"No non-localhost DNS nameservers are left in resolv.conf. Using default external servers: [nameserver 8.8.8.8 nameserver 8.8.4.4]\"\nFeb 14 17:38:23 ubuntu2204 dockerd[1439]:  time=\"2023-02-14T17:38:22.985477569Z\" level=info msg=\"IPv6 enabled; Adding default IPv6 external servers: [nameserver 2001:4860:4860::8888 nameserver 2001:4860:4860::8844]\"\nFeb 14 17:38:23 ubuntu2204 containerd[1439]:  time=\"2023-02-14T17:38:23.025615368Z\" level=info msg=\"starting signal loop\" namespace=moby path=/run/containerd/io.containerd.runtime.v2.task/moby/af2cd1486e7fe84a95c95ec9f22141a516de4eb42826e3e81ca565dc1476c931 pid=1305\nFeb 14 17:38:23 ubuntu2204 systemd[1439]:  run-docker-runtime\\x2drunc-moby-af2cd1486e7fe84a95c95ec9f22141a516de4eb42826e3e81ca565dc1476c931-runc.rizuDd.mount: Succeeded.\nFeb 14 17:38:23 ubuntu2204 kernel[1439]:  cgroup: cgroup: disabling cgroup2 socket matching due to net_prio or net_cls activation\nFeb 14 17:38:23 ubuntu2204 kernel[1439]:  eth0: renamed from veth3f0ef8a\nFeb 14 17:38:23 ubuntu2204 systemd-networkd[1439]:  vetha7147ab: Gained carrier\nFeb 14 17:38:23 ubuntu2204 systemd-networkd[1439]:  br-a0e686f1e37f: Gained carrier\nFeb 14 17:38:23 ubuntu2204 kernel[1439]:  IPv6: ADDRCONF(NETDEV_CHANGE): vetha7147ab: link becomes ready\nFeb 14 17:38:23 ubuntu2204 kernel[1439]:  br-a0e686f1e37f: port 1(vetha7147ab) entered blocking state\nFeb 14 17:38:23 ubuntu2204 kernel[1439]:  br-a0e686f1e37f: port 1(vetha7147ab) entered forwarding state\nFeb 14 17:38:23 ubuntu2204 kernel[1439]:  IPv6: ADDRCONF(NETDEV_CHANGE): br-a0e686f1e37f: link becomes ready\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  Docker Compose Logs:\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:   student02-ep11server Pulling\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  620e494ced91 Pulling fs layer\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  6c8a4d0d91d5 Pulling fs layer\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  870d2d701868 Pulling fs layer\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  17cad8585d31 Pulling fs layer\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  957151557b52 Pulling fs layer\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  356d6d7e116b Pulling fs layer\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  e90fb9a2f971 Pulling fs layer\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  6792527a66d0 Pulling fs layer\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  c5f3a9d4fd2b Pulling fs layer\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  f23b28cea2a0 Pulling fs layer\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  17cad8585d31 Waiting\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  957151557b52 Waiting\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  356d6d7e116b Waiting\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  e90fb9a2f971 Waiting\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  6792527a66d0 Waiting\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  c5f3a9d4fd2b Waiting\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  f23b28cea2a0 Waiting\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  620e494ced91 Downloading [==================================&gt;                ]     613B/890B\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  620e494ced91 Downloading [==================================================&gt;]     890B/890B\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  620e494ced91 Verifying Checksum\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  620e494ced91 Download complete\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  620e494ced91 Extracting [==================================================&gt;]     890B/890B\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  620e494ced91 Extracting [==================================================&gt;]     890B/890B\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  6c8a4d0d91d5 Downloading [&gt;                                                  ]  1.979kB/113.9kB\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  870d2d701868 Downloading [&gt;                                                  ]  189.2kB/18.69MB\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  6c8a4d0d91d5 Downloading [==================================================&gt;]  113.9kB/113.9kB\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  6c8a4d0d91d5 Verifying Checksum\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  6c8a4d0d91d5 Download complete\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  620e494ced91 Pull complete\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  6c8a4d0d91d5 Extracting [==============&gt;                                    ]  32.77kB/113.9kB\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  870d2d701868 Downloading [====================&gt;                              ]  7.829MB/18.69MB\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  6c8a4d0d91d5 Extracting [==================================================&gt;]  113.9kB/113.9kB\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  6c8a4d0d91d5 Extracting [==================================================&gt;]  113.9kB/113.9kB\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  6c8a4d0d91d5 Pull complete\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  870d2d701868 Downloading [==============================================&gt;    ]  17.42MB/18.69MB\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  957151557b52 Downloading [==================================================&gt;]     167B/167B\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  957151557b52 Verifying Checksum\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  957151557b52 Download complete\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  870d2d701868 Verifying Checksum\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  870d2d701868 Download complete\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  870d2d701868 Extracting [&gt;                                                  ]  196.6kB/18.69MB\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  17cad8585d31 Downloading [&gt;                                                  ]  73.12kB/6.994MB\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  870d2d701868 Extracting [=======&gt;                                           ]  2.949MB/18.69MB\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  356d6d7e116b Downloading [==================================================&gt;]     174B/174B\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  356d6d7e116b Verifying Checksum\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  356d6d7e116b Download complete\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  e90fb9a2f971 Downloading [==================================================&gt;]     156B/156B\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  e90fb9a2f971 Verifying Checksum\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  e90fb9a2f971 Download complete\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  870d2d701868 Extracting [===============&gt;                                   ]  5.702MB/18.69MB\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  17cad8585d31 Downloading [======================================&gt;            ]  5.355MB/6.994MB\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  17cad8585d31 Verifying Checksum\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  17cad8585d31 Download complete\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  c5f3a9d4fd2b Downloading [==================================================&gt;]     145B/145B\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  6792527a66d0 Downloading [==================================================&gt;]     139B/139B\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  c5f3a9d4fd2b Verifying Checksum\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  c5f3a9d4fd2b Download complete\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  6792527a66d0 Verifying Checksum\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  6792527a66d0 Download complete\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  870d2d701868 Extracting [=======================&gt;                           ]  8.847MB/18.69MB\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  870d2d701868 Extracting [==================================================&gt;]  18.69MB/18.69MB\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  870d2d701868 Pull complete\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  17cad8585d31 Extracting [&gt;                                                  ]   98.3kB/6.994MB\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  f23b28cea2a0 Downloading [==================================================&gt;]     142B/142B\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  f23b28cea2a0 Verifying Checksum\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  f23b28cea2a0 Download complete\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  17cad8585d31 Extracting [==========&gt;                                        ]  1.475MB/6.994MB\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  17cad8585d31 Extracting [===================================&gt;               ]  5.014MB/6.994MB\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  17cad8585d31 Extracting [==================================================&gt;]  6.994MB/6.994MB\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  17cad8585d31 Pull complete\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  957151557b52 Extracting [==================================================&gt;]     167B/167B\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  957151557b52 Extracting [==================================================&gt;]     167B/167B\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  957151557b52 Pull complete\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  356d6d7e116b Extracting [==================================================&gt;]     174B/174B\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  356d6d7e116b Extracting [==================================================&gt;]     174B/174B\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  356d6d7e116b Pull complete\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  e90fb9a2f971 Extracting [==================================================&gt;]     156B/156B\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  e90fb9a2f971 Extracting [==================================================&gt;]     156B/156B\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  e90fb9a2f971 Pull complete\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  6792527a66d0 Extracting [==================================================&gt;]     139B/139B\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  6792527a66d0 Extracting [==================================================&gt;]     139B/139B\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  6792527a66d0 Pull complete\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  c5f3a9d4fd2b Extracting [==================================================&gt;]     145B/145B\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  c5f3a9d4fd2b Extracting [==================================================&gt;]     145B/145B\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  c5f3a9d4fd2b Pull complete\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  f23b28cea2a0 Extracting [==================================================&gt;]     142B/142B\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  f23b28cea2a0 Extracting [==================================================&gt;]     142B/142B\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  f23b28cea2a0 Pull complete\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  student02-ep11server Pulled\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  Network compose_default  Creating\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  Network compose_default  Created\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  Container compose-student02-ep11server-1  Creating\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  Container compose-student02-ep11server-1  Created\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  Container compose-student02-ep11server-1  Starting\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  Container compose-student02-ep11server-1  Started\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  #033[37mDEBU#033[0m[2023-02-14 17:38:23.375] Setting log level [debug] for module util    \nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  #033[37mDEBU#033[0m[2023-02-14 17:38:23.375] Setting log level [debug] for module keyprotect \nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  #033[37mDEBU#033[0m[2023-02-14 17:38:23.375] Setting log level [debug] for module ep11server \nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  #033[37mDEBU#033[0m[2023-02-14 17:38:23.375] Setting log level [debug] for module config  \nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  #033[37mDEBU#033[0m[2023-02-14 17:38:23.375] Setting log level [debug] for module main    \nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  #033[37mDEBU#033[0m[2023-02-14 17:38:23.375] Setting log level [debug] for module entry   \nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  #033[37mDEBU#033[0m[2023-02-14 17:38:23.375] Service recoverykeyseedtemplate not found     #033[37mmodule#033[0m=entry\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  #033[37mDEBU#033[0m[2023-02-14 17:38:23.375] Service connectiontemplate not found          #033[37mmodule#033[0m=entry\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  #033[37mDEBU#033[0m[2023-02-14 17:38:23.375] Service basevoteridtemplate not found         #033[37mmodule#033[0m=entry\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  #033[37mDEBU#033[0m[2023-02-14 17:38:23.375] Service logging not found                     #033[37mmodule#033[0m=entry\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  #033[37mDEBU#033[0m[2023-02-14 17:38:23.375] Service clientconnectiontemplate not found    #033[37mmodule#033[0m=entry\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  #033[37mDEBU#033[0m[2023-02-14 17:38:23.375] Service ep11manager not found                 #033[37mmodule#033[0m=entry\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  #033[37mDEBU#033[0m[2023-02-14 17:38:23.375] Service domaintemplate not found              #033[37mmodule#033[0m=entry\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  #033[37mDEBU#033[0m[2023-02-14 17:38:23.375] Service remoteconfig not found                #033[37mmodule#033[0m=entry\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  #033[37mDEBU#033[0m[2023-02-14 17:38:23.375] Service directiamauthtemplate not found       #033[37mmodule#033[0m=entry\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  #033[37mDEBU#033[0m[2023-02-14 17:38:23.375] Service tls not found                         #033[37mmodule#033[0m=entry\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  #033[37mDEBU#033[0m[2023-02-14 17:38:23.375] Service postgrestemplate not found            #033[37mmodule#033[0m=entry\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  #033[36mINFO#033[0m[2023-02-14 17:38:23.396] Starting GREP11 server []                     #033[36mmodule#033[0m=entry\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  #033[36mINFO#033[0m[2023-02-14 17:38:23.396] TLS is enabled                                #033[36mmodule#033[0m=config\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  #033[37mDEBU#033[0m[2023-02-14 17:38:23.396] Creating new listener for *config.EP11CryptoOpts  #033[37mmodule#033[0m=entry\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  [c16client][debug] hostname:port=192.168.22.80:9001\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  [c16client][debug] c16client::c16OpenAdapter: Entering ...\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  [c16client][debug] c16client::c16OpenAdapter: server_idx=0\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  [c16client][debug] c16client::makeNewC16ClientStub: target_str=192.168.22.80:9001\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  [c16client][debug] c16client::c16OpenAdapter: Done.\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  [c16client][debug] c16client::c16Request: Entering ...\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  [c16client][debug] c16client::c16DoEP11Request: Checking target i=0, ap_id=8, dom_id=22\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  [c16client][debug] c16client:c16DoEP11Request: Target still on same server\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  [c16client][debug] c16client:c16DoEP11Request: Target list check passed. (server_idx=0)\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  [c16client][debug] C16ClientStub::DoRequest: targets_num: 1\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  [c16client][debug] C16ClientStub::DoRequest: req_len: 37\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  [c16client][debug] C16ClientStub::DoRequest: Setting resp_len: 54\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  [c16client][debug] c16client::c16Request: Done.\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  [c16client][debug] c16client::c16OpenAdapter: Entering ...\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  [c16client][debug] c16client::c16OpenAdapter: server_idx=0\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  [c16client][debug] c16client::makeNewC16ClientStub: target_str=192.168.22.80:9001\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  [c16client][debug] c16client::c16OpenAdapter: Done.\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  [c16client][debug] c16client::c16Request: Entering ...\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  [c16client][debug] c16client::c16DoEP11Request: Checking target i=0, ap_id=10, dom_id=22\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  [c16client][debug] c16client:c16DoEP11Request: Target still on same server\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  [c16client][debug] c16client:c16DoEP11Request: Target list check passed. (server_idx=0)\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  [c16client][debug] C16ClientStub::DoRequest: targets_num: 1\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  [c16client][debug] C16ClientStub::DoRequest: req_len: 37\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  Docker compose result:\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:   CONTAINER ID   IMAGE                           COMMAND                 CREATED        STATUS                  PORTS                                                  NAMES\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  af2cd1486e7f   quay.io/gmoney23/grep11server   \"/usr/bin/ep11server\"   1 second ago   Up Less than a second   0.0.0.0:9876-&gt;9876/tcp, :::9876-&gt;9876/tcp, 50052/tcp   compose-student02-ep11server-1\nFeb 14 17:38:23 ubuntu2204 hpcr-container[1439]:  Container service completed successfully\nFeb 14 17:38:23 ubuntu2204 systemd[1439]:  Finished Service that creates a set of containers.\nFeb 14 17:38:23 ubuntu2204 systemd[1439]:  Reached target Workload is up and running..\nFeb 14 17:38:23 ubuntu2204 systemd[1439]:  Starting Phase2 Catch Service...\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  [c16client][debug] C16ClientStub::DoRequest: Setting resp_len: 54\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  [c16client][debug] c16client::c16Request: Done.\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  [c16client][debug] c16client::c16Request: Entering ...\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  [c16client][debug] c16client::c16DoEP11Request: Checking target i=0, ap_id=8, dom_id=22\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  [c16client][debug] c16client:c16DoEP11Request: Target still on same server\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  [c16client][debug] c16client::c16DoEP11Request: Checking target i=1, ap_id=10, dom_id=22\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  [c16client][debug] c16client:c16DoEP11Request: Target still on same server\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  [c16client][debug] c16client:c16DoEP11Request: Target list check passed. (server_idx=0)\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  [c16client][debug] C16ClientStub::DoRequest: targets_num: 2\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  [c16client][debug] C16ClientStub::DoRequest: req_len: 46\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  [c16client][debug] C16ClientStub::DoRequest: Setting resp_len: 438\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  [c16client][debug] c16client::c16Request: Done.\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  [c16client][debug] c16client::c16Request: Entering ...\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  [c16client][debug] c16client::c16DoEP11Request: Checking target i=0, ap_id=8, dom_id=22\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  [c16client][debug] c16client:c16DoEP11Request: Target still on same server\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  [c16client][debug] c16client::c16DoEP11Request: Checking target i=1, ap_id=10, dom_id=22\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  [c16client][debug] c16client:c16DoEP11Request: Target still on same server\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  [c16client][debug] c16client:c16DoEP11Request: Target list check passed. (server_idx=0)\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  [c16client][debug] C16ClientStub::DoRequest: targets_num: 2\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  [c16client][debug] C16ClientStub::DoRequest: req_len: 58\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  [c16client][debug] C16ClientStub::DoRequest: Setting resp_len: 254\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  [c16client][debug] c16client::c16Request: Done.\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  #033[36mINFO#033[0m[2023-02-14 17:38:23.440] admin.ep11.go:ep11server.(*CryptoServer).adminCommand:53: m_admin returned an error  #033[36merror code#033[0m=CKR_IBM_TARGET_INVALID #033[36mmodule#033[0m=util\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  #033[36mINFO#033[0m[2023-02-14 17:38:23.441] admin.ep11.go:ep11server.(*CryptoServer).adminCommand:53: m_admin returned an error  #033[36merror code#033[0m=CKR_IBM_TARGET_INVALID #033[36mmodule#033[0m=util\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:   message repeated 6 times: [#033[36mINFO#033[0m[2023-02-14 17:38:23.441] admin.ep11.go:ep11server.(*CryptoServer).adminCommand:53: m_admin returned an error  #033[36merror code#033[0m=CKR_IBM_TARGET_INVALID #033[36mmodule#033[0m=util]\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  #033[36mINFO#033[0m[2023-02-14 17:38:23.442] admin.ep11.go:ep11server.(*CryptoServer).adminCommand:53: m_admin returned an error  #033[36merror code#033[0m=CKR_IBM_TARGET_INVALID #033[36mmodule#033[0m=util\nFeb 14 17:38:23 ubuntu2204 hpcr-catch-success[1439]:  Catch service start\nFeb 14 17:38:23 ubuntu2204 hpcr-catch-success[1439]:  VSI Status is:  Success\nFeb 14 17:38:23 ubuntu2204 hpcr-catch-success[1439]:  VSI has started successfully.\nFeb 14 17:38:23 ubuntu2204 hpcr-catch-success[1439]:  Catch service completed successfully\nFeb 14 17:38:23 ubuntu2204 systemd[1439]:  Finished Phase2 Catch Service.\nFeb 14 17:38:23 ubuntu2204 systemd[1439]:  Reached target Multi-User System.\nFeb 14 17:38:23 ubuntu2204 systemd[1439]:  Reached target Graphical Interface.\nFeb 14 17:38:23 ubuntu2204 systemd[1439]:  Starting Update UTMP about System Runlevel Changes...\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  #033[36mINFO#033[0m[2023-02-14 17:38:23.443] admin.ep11.go:ep11server.(*CryptoServer).adminCommand:53: m_admin returned an error  #033[36merror code#033[0m=CKR_IBM_TARGET_INVALID #033[36mmodule#033[0m=util\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  #033[36mINFO#033[0m[2023-02-14 17:38:23.449] admin.ep11.go:ep11server.(*CryptoServer).adminCommand:53: m_admin returned an error  #033[36merror code#033[0m=CKR_IBM_TARGET_INVALID #033[36mmodule#033[0m=util\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  #033[36mINFO#033[0m[2023-02-14 17:38:23.450] admin.ep11.go:ep11server.(*CryptoServer).adminCommand:53: m_admin returned an error  #033[36merror code#033[0m=CKR_IBM_TARGET_INVALID #033[36mmodule#033[0m=util\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  #033[36mINFO#033[0m[2023-02-14 17:38:23.450] admin.ep11.go:ep11server.(*CryptoServer).adminCommand:53: m_admin returned an error  #033[36merror code#033[0m=CKR_IBM_TARGET_INVALID #033[36mmodule#033[0m=util\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  #033[37mDEBU#033[0m[2023-02-14 17:38:23.450] Creating service backing server for *config.EP11CryptoOpts  #033[37mmodule#033[0m=entry\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  #033[36mINFO#033[0m[2023-02-14 17:38:23.450] Loading ep11crypto service                    #033[36mmodule#033[0m=entry\nFeb 14 17:38:23 ubuntu2204 compose-student02-ep11server-1[1439]:  #033[36mINFO#033[0m[2023-02-14 17:38:23.450] GRPC Server listening on [::]:9876 with TLS enabled  #033[36mmodule#033[0m=entry\nFeb 14 17:38:23 ubuntu2204 systemd[1439]:  systemd-update-utmp-runlevel.service: Succeeded.\nFeb 14 17:38:23 ubuntu2204 systemd[1439]:  Finished Update UTMP about System Runlevel Changes.\nFeb 14 17:38:23 ubuntu2204 systemd[1439]:  Startup finished in 26.715s (kernel) + 4.878s (userspace) = 31.594s.\nFeb 14 17:38:23 ubuntu2204 systemd[1439]:  dmesg.service: Succeeded.\nFeb 14 17:38:24 ubuntu2204 systemd-networkd[1439]:  br-a0e686f1e37f: Gained IPv6LL\nFeb 14 17:38:25 ubuntu2204 systemd-networkd[1439]:  vetha7147ab: Gained IPv6LL\nFeb 14 17:38:25 ubuntu2204 verify-disk-encryption[1439]:  HPL13000I: Verify LUKS Encryption\nFeb 14 17:38:25 ubuntu2204 systemd[1439]:  verify-disk-encryption-invoker.service: Succeeded.\nFeb 14 17:38:26 ubuntu2204 verify-disk-encryption[1439]:  Return value for disk-encrypt: 0\nFeb 14 17:38:26 ubuntu2204 verify-disk-encryption[1439]:  Executed cmd: ('lsblk', '-b', '-n', '-o', 'NAME,SIZE')\nFeb 14 17:38:26 ubuntu2204 verify-disk-encryption[1439]:  Return value: 0\nFeb 14 17:38:26 ubuntu2204 verify-disk-encryption[1439]:  Stdout: vda                                                 417792\nFeb 14 17:38:26 ubuntu2204 verify-disk-encryption[1439]:  vdb                                           107374182400\nFeb 14 17:38:26 ubuntu2204 verify-disk-encryption[1439]:  \u251c\u2500vdb1                                          4292870144\nFeb 14 17:38:26 ubuntu2204 verify-disk-encryption[1439]:  \u2514\u2500vdb2                                        103079215104\nFeb 14 17:38:26 ubuntu2204 verify-disk-encryption[1439]:    \u2514\u2500luks-83ed88f3-2a74-47bb-b3c1-1b0a2ff3dc03 103062437888\nFeb 14 17:38:26 ubuntu2204 verify-disk-encryption[1439]:  List of volumes greater than or equal to 10GB are: ['/dev/vdb']\nFeb 14 17:38:26 ubuntu2204 verify-disk-encryption[1439]:  Updated Volumes list: ['/dev/vdb2']\nFeb 14 17:38:26 ubuntu2204 verify-disk-encryption[1439]:  Executed cmd: ('lsblk', '/dev/vdb2', '-b', '-n', '-o', 'NAME,MOUNTPOINT')\nFeb 14 17:38:26 ubuntu2204 verify-disk-encryption[1439]:  Return value: 0\nFeb 14 17:38:26 ubuntu2204 verify-disk-encryption[1439]:  Stdout: vdb2\nFeb 14 17:38:26 ubuntu2204 verify-disk-encryption[1439]:  \u2514\u2500luks-83ed88f3-2a74-47bb-b3c1-1b0a2ff3dc03 /\nFeb 14 17:38:26 ubuntu2204 verify-disk-encryption[1439]:  Boot volume is /dev/vdb2\nFeb 14 17:38:26 ubuntu2204 verify-disk-encryption[1439]:  Volume /dev/vdb2 has mount point /\nFeb 14 17:38:26 ubuntu2204 verify-disk-encryption[1439]:  List of mounted volumes are: ['/dev/vdb2']\nFeb 14 17:38:26 ubuntu2204 verify-disk-encryption[1439]:  Verifying the boot disk /dev/vdb2 is encrypted or not\nFeb 14 17:38:26 ubuntu2204 verify-disk-encryption[1439]:  Executed cmd: ('lsblk', '/dev/vdb2', '-b', '-n', '-o', 'NAME,TYPE')\nFeb 14 17:38:26 ubuntu2204 verify-disk-encryption[1439]:  Return value: 0\nFeb 14 17:38:26 ubuntu2204 verify-disk-encryption[1439]:  Stdout: vdb2                                        part\nFeb 14 17:38:26 ubuntu2204 verify-disk-encryption[1439]:  \u2514\u2500luks-83ed88f3-2a74-47bb-b3c1-1b0a2ff3dc03 crypt\nFeb 14 17:38:26 ubuntu2204 verify-disk-encryption[1439]:  Executed cmd: ('cryptsetup', 'isLuks', '/dev/vdb2')\nFeb 14 17:38:26 ubuntu2204 verify-disk-encryption[1439]:  Return value: 0\nFeb 14 17:38:26 ubuntu2204 verify-disk-encryption[1439]:  Executed cmd: ('cryptsetup', 'luksDump', '/dev/vdb2')\nFeb 14 17:38:26 ubuntu2204 verify-disk-encryption[1439]:  Return value: 0\nFeb 14 17:38:26 ubuntu2204 verify-disk-encryption[1439]:  Checked for mount point /, LUKS encryption with 1 key slot found\nFeb 14 17:38:26 ubuntu2204 verify-disk-encryption[1439]:  HPL13001I: Boot volume and all the data volumes are encrypted\nFeb 14 17:38:49 ubuntu2204 systemd[1439]:  systemd-fsckd.service: Succeeded.\nFeb 14 17:38:50 ubuntu2204 systemd[1439]:  systemd-hostnamed.service: Succeeded.\nFeb 14 17:39:15 ubuntu2204 systemd[1439]:  Starting Online ext4 Metadata Check for All Filesystems...\nFeb 14 17:39:15 ubuntu2204 systemd[1439]:  e2scrub_all.service: Succeeded.\nFeb 14 17:39:15 ubuntu2204 systemd[1439]:  Finished Online ext4 Metadata Check for All Filesystems.\n</code></pre> <p>Congratulations! You have reached a significant milestone in the lab.  You have successfully configured and launched your HPVS 2.1.3 GREP11 Server. Now all that is left is to test its functionality with some sample GREP11 client code.  You will set that up on your Ubuntu KVM guest that are currently logged on to.  Click Next at the bottom right of the page to continue.</p>"},{"location":"lab/launchKVMguest/","title":"Start Ubuntu KVM Guest","text":""},{"location":"lab/launchKVMguest/#set-environment-variable-for-your-student-id","title":"Set environment variable for your student ID","text":"<p>Each student has a unique userid assigned to them. It may have been set for you already. Check this by entering this echo command:</p> <pre><code>echo ${StudentID}\n</code></pre> Example output [click to expand me] <pre><code>silliman@nat-147 ~ % echo ${StudentID}\nstudent02\n</code></pre> <p>If no output is returned, set this variable to the userid assigned to you by the instructor.  E.g., if the instructor assigned you the userid <code>student00</code>, enter this command:     <pre><code>export StudentID=student00\n</code></pre> If you had to use the previous <code>export</code> command, repeat the prior <code>echo</code> command to ensure this was set correctly. Now, you should see your userid displayed:     <pre><code>echo ${StudentID}\n</code></pre></p> Example output [click to expand me] <pre><code>silliman@nat-147 ~ % echo ${StudentID}         \nstudent02\n</code></pre> <p>Why did you make me do this?</p> <p>This way we could provide instructions throughout this lab that are generic enough that every student can just copy and paste most commands \"as-is\" from the lab guide. (At least that was our goal).</p>"},{"location":"lab/launchKVMguest/#optional-but-highly-recommended-add-your-studentid-environment-variable-to-your-shell-startup-script","title":"Optional but highly recommended- add your StudentID environment variable to your shell startup script","text":"<p>If we had our way in supplying a system from which you are running the lab, you are probably using bash.</p> <p>If you are using your own workstation or laptop, if it is running Linux you are probably either using bash or you are savvy enough to figure out which shell you are running. </p> <p>If you are running it on Apple hardware then you are probably running zsh or bash or are savvy enough to figure out which shell you are running.</p> <p>If you are running on a Windows machine then we hope that you are using a modern enough version of Windows so that you can use the Windows Subsystem for Linux and pretend that you are using a Linux machine.</p> <p>If you are running on an older Windows machine then you should ask your manager for a new laptop. If that doesn't work out for you then ask the instructors for help (but not for a new laptop).</p> <p>If you are not sure what shell you're using, you can use this command to find out what your shell is:</p> <pre><code>echo ${SHELL}\n</code></pre> Example output when using zsh [click to expand me] <pre><code>silliman@nat-147 ~ % echo ${SHELL}\n/bin/zsh\n</code></pre> <p>Don't be ashamed of your shell.  Garrett uses <code>bash</code> 5.x on his Mac.  Barry uses <code>zsh</code> - <code>zsh</code> being the default shell on newer versions of MacOS.</p> <p>We will show two commands to add the environment variable to your shell startup script, one for <code>bash</code> and one for <code>zsh</code>.  If you are using a different shell, we trust you'll be able to figure out the equivalent command.  </p> <p>The Copy Button is Your Friend!</p> <p>Please enter the appropriate command exactly as shown using the copy button whenever possible.  Approximately 0.47% of students think they have to make the variable substitution before entering the command.  That doesn't end well.  This advice applies generally to every command in this lab unless we explicitly state otherwise.</p> <p>For users of <code>bash</code>:    <pre><code>echo \"export StudentID='${StudentID}'\" &gt;&gt; \"${HOME}/.bashrc\" </code></pre></p> <p>For users of <code>zsh</code>:    <pre><code>echo \"export StudentID='${StudentID}'\" &gt;&gt; \"${HOME}/.zshrc\"\n</code></pre></p> <p>Why did I just do that?</p> <p>If you use more than one terminal window to do this lab, then this would allow new terminal windows to be set with this StudentID variable so that you do not have to re-enter it.  This will be handy if you either want to use multiple terminal windows for the lab or if you need to open a new window due to an old one closing for whatever reason.  We are here to make your flight as comfortable as possible.</p>"},{"location":"lab/launchKVMguest/#log-in-to-the-rhel-85-host","title":"Log in to the RHEL 8.5 host","text":"<p>You will now sign into our z15 LPAR running Red Hat Enterprise Linux 8.5.  This is a system that has been enabled for Secure Execution and so can run workloads provisioned with IBM Hyper Protect Virtual Servers 2.1.3.  </p> <p>Run this command:</p> <pre><code>ssh -l ${StudentID} 192.168.22.64\n</code></pre> <p>One of two things should happen:  </p> <p>a. If you are on an instructor-provided system and the instructors have had the time to load it with an appropriate RSA private key that matches an RSA public key that has been loaded into your assigned userid's account on the Linux LPAR</p> <ul> <li>you will be able to sign in without a password!</li> </ul> <p>OR</p> <p>b. If you are not on an instructor-provided system or we did not have a chance to load the parts of the RSA key pair in the appropriate locations</p> <ul> <li>you will be prompted to enter a password.  Your instructor will provide you a password by some clandestine means, surely we're not going to put it on a page on the Internet !</li> </ul> Example messages upon login [Click me] <pre><code>*\n*  IBM Washington Systems Center (WSC)   .....\n*    IBM zSystems and LinuxONE          C C  /\n*                                      /&lt;   /\n*                       ___ __________/_#__=o\n*                      /(- /(\\_\\________   \\\n*                      \\ ) \\ )_      \\o     \\\n*                      /|\\ /|\\       |'     |\n*                                    |     _|\n*  Red Hat Enterprise Linux 8.5      /o   __\\\n*                                   / '     |\n*                                  / /      |\n*                                 /_/\\______|\n*                                (   _(    &lt;\n*  KVM Hypervisor for Blockchain  \\    \\    \\\n*       and Hyper Protect          \\    \\    \\\n*       and Digital Assets          \\____\\____\\\n*    on IBM zSystems and LinuxONE ____\\_\\__\\_\\\n*                                /`   /`     o\\\n*           \"It's alive!\"        |___ |_______|..o-o-o-(#)\n*\nActivate the web console with: systemctl enable --now cockpit.socket\n\nRegister this system with Red Hat Insights: insights-client --register\nCreate an account or view all your systems at https://red.ht/insights-dashboard\nLast login: Mon Feb 13 16:50:14 2023 from 192.168.215.147\n[student02@bczkvm(192.168.22.64) ~ [19:11:51] (0)]$ \n</code></pre>"},{"location":"lab/launchKVMguest/#start-your-ubuntu-kvm-guest","title":"Start your Ubuntu KVM guest","text":"<p>A KVM Guest has been defined for each student by the instructors.  This guest has the Ubuntu 22.04.1 operating system installed on it.  A very straightforward installation path was taken with no additional software packages selected during the installation. You will add additional software packages as necessary during the lab. This guest does not take advantage of the additional protection offered by Secure Execution and HPVS.  It could have, but you will already be creating another KVM Guest that is protected by Secure Execution and HPVS.  This also helps to make the point that you can run \"regular\", i.e., non-Secure Execution-protected guests, and Secure Execution-protected guests on the same LPAR.</p> <p>Display your KVM guest's definition with this command:</p> <pre><code>sudo virsh dumpxml `whoami`\n</code></pre> <p>We named your Ubuntu KVM guest the same as your userid on the RHEL host, which is why you can use the <code>whoami</code> command.</p> Example virsh dumpxml output [Click me] <pre><code>&lt;domain type='kvm'&gt;\n  &lt;name&gt;student02&lt;/name&gt;\n  &lt;uuid&gt;531199d9-3671-424e-a9c9-74ff5ca3980b&lt;/uuid&gt;\n  &lt;memory unit='KiB'&gt;2097152&lt;/memory&gt;\n  &lt;currentMemory unit='KiB'&gt;2097152&lt;/currentMemory&gt;\n  &lt;vcpu placement='static'&gt;2&lt;/vcpu&gt;\n  &lt;os&gt;\n    &lt;type arch='s390x' machine='s390-ccw-virtio-rhel8.6.0'&gt;hvm&lt;/type&gt;\n    &lt;boot dev='hd'/&gt;\n  &lt;/os&gt;\n  &lt;cpu mode='host-model' check='partial'/&gt;\n  &lt;clock offset='utc'/&gt;\n  &lt;on_poweroff&gt;destroy&lt;/on_poweroff&gt;\n  &lt;on_reboot&gt;restart&lt;/on_reboot&gt;\n  &lt;on_crash&gt;destroy&lt;/on_crash&gt;\n  &lt;devices&gt;\n    &lt;emulator&gt;/usr/libexec/qemu-kvm&lt;/emulator&gt;\n    &lt;disk type='file' device='disk'&gt;\n      &lt;driver name='qemu' type='qcow2'/&gt;\n      &lt;source file='/var/lib/libvirt/images/hpvslab/student02/student02-ubuntu22.04.qcow2'/&gt;\n      &lt;target dev='vda' bus='virtio'/&gt;\n      &lt;address type='ccw' cssid='0xfe' ssid='0x0' devno='0x0000'/&gt;\n    &lt;/disk&gt;\n    &lt;disk type='file' device='cdrom'&gt;\n      &lt;driver name='qemu' type='raw'/&gt;\n      &lt;target dev='sda' bus='scsi'/&gt;\n      &lt;readonly/&gt;\n      &lt;address type='drive' controller='0' bus='0' target='0' unit='0'/&gt;\n    &lt;/disk&gt;\n    &lt;controller type='scsi' index='0' model='virtio-scsi'&gt;\n      &lt;address type='ccw' cssid='0xfe' ssid='0x0' devno='0x0002'/&gt;\n    &lt;/controller&gt;\n    &lt;controller type='pci' index='0' model='pci-root'/&gt;\n    &lt;controller type='virtio-serial' index='0'&gt;\n      &lt;address type='ccw' cssid='0xfe' ssid='0x0' devno='0x0003'/&gt;\n    &lt;/controller&gt;\n    &lt;interface type='network'&gt;\n      &lt;mac address='52:54:00:67:e5:c1'/&gt;\n      &lt;source network='default'/&gt;\n      &lt;model type='virtio'/&gt;\n      &lt;address type='ccw' cssid='0xfe' ssid='0x0' devno='0x0001'/&gt;\n    &lt;/interface&gt;\n    &lt;console type='pty'&gt;\n      &lt;target type='sclp' port='0'/&gt;\n    &lt;/console&gt;\n    &lt;channel type='unix'&gt;\n      &lt;target type='virtio' name='org.qemu.guest_agent.0'/&gt;\n      &lt;address type='virtio-serial' controller='0' bus='0' port='1'/&gt;\n    &lt;/channel&gt;\n    &lt;audio id='1' type='none'/&gt;\n    &lt;memballoon model='virtio'&gt;\n      &lt;address type='ccw' cssid='0xfe' ssid='0x0' devno='0x0004'/&gt;\n    &lt;/memballoon&gt;\n    &lt;panic model='s390'/&gt;\n  &lt;/devices&gt;\n&lt;/domain&gt;\n</code></pre> <p>Look for the your userid in the output of the virsh dumpxml command.  You'll see it in two places- at the top where it names your guest, and then within the filepath and filename of the qcow2 image that provides your KVM guest.  </p> <p>Run this command to start your Ubuntu KVM guest:</p> <pre><code>sudo virsh start `whoami`\n</code></pre> Expected output <pre><code>Domain 'student02' started\n</code></pre> Your domain (i.e., your KVM guest) has startedYour domain didn't start for whatever reason <p>You are off to a smashing start! </p> <p>Log out of the RHEL 8.5 host because in the next section of the lab you are going to log into the KVM guest that you just started.</p> <pre><code>exit\n</code></pre> <p>You have departed from the happy path... </p> <p>Please ask your instructor for help.</p>"}]}