{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Confidential Computing LinuxONE Workshop","text":"<p>Welcome to our Confidential Computing LinuxONE workshop. Organizations can leverage secure execution to protect Linux\u00ae workloads on IBM Z and LinuxONE. This workshop will cover how to get started with this technology on-premises using Hyper Protect Virtual Servers 2.1.x.</p>"},{"location":"#agenda","title":"Agenda","text":""},{"location":"#introductory-presentations","title":"Introductory Presentations","text":"<ul> <li>Introduction to Hyper Protect Virtual Servers 2.1.x</li> </ul>"},{"location":"#lab-build-and-deploy-a-grep11-server-using-hyper-protect-virtual-servers-21x","title":"Lab: Build and Deploy a GREP11 Server Using Hyper Protect Virtual Servers 2.1.x","text":"<p>In this lab, you will deploy a Hyper Protect Virtual Servers 2.1.x GREP11 instance and connect to it to secure your transactions. 1</p>"},{"location":"#workshop-authors","title":"Workshop authors","text":"<ul> <li>Barry Silliman</li> <li>Garrett Woodworth</li> </ul> <ol> <li> <p>For the purposes of this lab, you are fulfilling the requirements of a fictional organization. These requirements could change for your specific organization but would follow a similar pattern with different specifics.\u00a0\u21a9</p> </li> </ol>"},{"location":"access/","title":"Lab Access","text":"<p>You will be performing your lab from what we refer to as a RHEL Jumpbox.</p> <p>You can access the lab guide from anywhere on the public Internet. Actually performing the lab from anywhere other than the RHEL Jumpbox is another matter altogether-  it can't be done for the following reasons.</p> <ol> <li> <p>The lab system is in the Washington Systems Center's (WSC) data center in Herndon, Virginia, USA, and is only accessible from the Internet via a VPN connection. The instructors have already logged the student jumpboxes into the WSC data center.</p> </li> <li> <p>One unfortunate limitation of the jumpbox is that you cannot copy and paste from between the jumpbox browser window and other windows on your own laptop or workstation.  You are going to be doing a lot of copying and pasting in this lab.</p> </li> </ol> <p>Therefore you will have to open up Firefox in your jumpbox and access the lab from there.  We've set Firefox's home page in your jumpbox to the lab in order to make things easier for you.</p> <p>Your instructors will provide the URL in the WebEx chat for you to use to sign in and reserve a jumpbox. They will also provide you with the password that you will need to be able to reserve a jumpbox.</p> <p>So while we intend to always make the lab guide itself accessible to the public, actual access to the lab is restricted to students of our classes, and only for the duration of the class, as we reset the access credentials after each class.</p>"},{"location":"additionalResources/","title":"Additional Resources","text":"<p>This page is under construction.</p>"},{"location":"localdocbuild/","title":"Building the Documentation Yourself","text":"<p>For Documentation Contributors Only</p> <p>This is for people who want to update the documentation of <code>Confidential Computing LinuxONE Workshop</code> and see the updates locally or if you are a regular user and are curious on how to do it. In most cases, just accessing the documentation via this site (https://ibm-wsc.github.io/ConfidentialComputingOnLinuxONE/) is best. If you want to access the documentation without internet access, instead of following this documentation, you should navigate to the print page (which displays the documentation in printable format). Then, Print-&gt;Save to pdf in your web browser and access the PDF freely offline.</p>"},{"location":"localdocbuild/#installing-necessary-pre-requisites","title":"Installing Necessary Pre-requisites","text":"<ol> <li>Install pip3 on your computer, if it's not already installed (instructions vary depending on Operating System)</li> <li> <p>Install mkdocs and plugins used in <code>Confidential Computing LinuxONE Workshop</code> documentation</p> <pre><code>pip3 install mkdocs mkdocs-material mkdocs-git-revision-date-localized-plugin mkdocs-print-site-plugin\n</code></pre> </li> <li> <p>Get a local copy of the source code with:</p> HTTPSSSH <pre><code>git clone https://github.com/ibm-wsc/ConfidentialComputingOnLinuxONE.git\n</code></pre> <pre><code>git clone git@github.com:ibm-wsc/ConfidentialComputingOnLinuxONE.git\n</code></pre> </li> <li> <p>Change into the source code directory in your terminal</p> </li> <li> <p>Serve the documentation in a terminal while in your source code directory with:</p> <pre><code>mkdocs serve\n</code></pre> </li> <li> <p>Open a web browser and access the documentation</p> <p>The above <code>mkdocs serve</code> command should output an address to access the documentation which by default is: http://127.0.0.1:8000 which is over localhost (only accessible locally). Go to this address to access the documentation.</p> <p>Documentation updates automatically</p> <p>If you leave the terminal tab where you ran <code>mkdocs serve</code> open, the docs will update automatically when your save your changes to the file. This way as you make changes you can check your changes at the given web site, displaying in the same way as it will when displayed as a static website on GitHub.</p> </li> <li> <p>Make edits to the relevant markdown files in the <code>docs/</code> subfolder, and watch the changes display in realtime in your web browser when you save your file updates.</p> </li> </ol> <p>Special Documentation Features</p> <p>To use the special features of <code>mkdocs-material</code> and the plugins used in these docs that enhance the documentation from traditional markdown, please take a look at the syntax for the various features. You can find examples of them in action in the markdown of this site by either:</p> <ul> <li> <p>Inspecting a given page of the site in your web browser</p> <ol> <li>scroll to the top of a page with a feature you want to see how to use</li> <li>click the page with an eye icon to the right of the title</li> <li>Inspect the markdown for the part of the page with the given feature</li> </ol> </li> </ul> <p>OR</p> <ul> <li>See the markdown for the entire site in the <code>docs/</code> subfolder of the GitHub project, navigating the markdown files for each page</li> </ul> <p>Additionally, you can find more examples and explainers on the mkdocs-material reference page.</p>"},{"location":"lab/cloud/","title":"IBM Cloud-based labs","text":"<p>This is a set of four labs that will introduce the student to IBM Hyper Protect Virtual Servers for Virtual Private Cloud. </p> <p>We will often refer to this service throughout these labs with the shorthand of Hyper Protect Virtual Servers.  This service is based on IBM's Secure Execution for Linux technology, which is IBM's strategic foundation for implementing confidential computing within the IBM Z and LinuxONE brands.  </p> <p>There was an earlier version of Hyper Protect Virtual Servers that was based on an older technology called Secure Service Containers and is still available in IBM Cloud as a service named Hyper Protect Virtual Server for Classic.  </p> <p>This lab focuses on the newer, strategic IBM Hyper Protect Virtual Servers for Virtual Private Cloud service, so our shorthand of Hyper Protect Virtual Servers should be interpreted as a reference to the newer service.  References to the earlier service will be explicitly referred to as IBM Hyper Protect Virtual Server for Classic.</p>"},{"location":"lab/cloud/cleanup/cleanup/","title":"Delete the resources you created in the IBM Cloud-based labs","text":"<p>Danger</p> <p>We get a little nervous when telling students to delete things on their IBM Cloud account, but we promised to help you minimize any costs associated with this lab. </p> <p>Be aware that the these cleanup instructions make two important assumptions.  </p> <p>The first is that you created a new Virtual Private Cloud (VPC) just for these labs so that you can delete the entire VPC without impacting any other users or resources.  </p> <p>The second assumption is that you created a new IBM Log Analysis instance just for these labs so that you can delete the IBM Log Analysis instance without impacting any other users or resources.</p> <p>If you used a pre-existing virtual private cloud or a pre-existing IBM Log Analysis instance, do not follow these instructions verbatim but take extreme care instead in deleting only the resources you created for theses labs.  Our assumption is that if you were confident enough to use pre-existing resources, then you are confident enough to know what to delete afterwards and what not to delete. Please, err on the side of caution-  ask an instructor or the appropriate person(s) in your company for help if you are unsure!  </p>"},{"location":"lab/cloud/cleanup/cleanup/#delete-your-virtual-private-cloud","title":"Delete your virtual private cloud","text":"<p>Warning</p> <p>Skip this step if you used a pre-existing Virtual Private Cloud that you or others in your company are using for any purposes other than these labs.  </p> <p>Navigate to your Virtual Private Cloud and from the \"vertical dots\" icon on the right, select the Delete choice.</p> <p></p> <p>You may be presented with a list of attached resources that will also be deleted when you delete the VPC, similar to what is shown here:</p> <p></p> <ol> <li> <p>Select the checkbox to confirm that you agree to these attached resources.</p> </li> <li> <p>Click the blue Delete all button in the lower right to start the deletion.</p> </li> </ol> <p>Wait until you see the message that your VPC and all attached resources have been deleted:</p> <p></p>"},{"location":"lab/cloud/cleanup/cleanup/#delete-your-storage-volume","title":"Delete your storage volume","text":"<p>After deleting your VPC your storage volume remains assigned to you.  To delete it, select Block storage volumes to see your data volume in a list:</p> <p></p> <p>From the \"vertical dots\" menu on the right select the Delete action:</p> <p></p> <p>Confirm the deletion of your storage volume:</p> <p></p>"},{"location":"lab/cloud/cleanup/cleanup/#delete-your-ibm-log-analysis-instance","title":"Delete your IBM Log Analysis instance","text":"<p>Warning</p> <p>Skip this step if you used a pre-existing IBM Log Analysis instance that you or others in your company are using for any purposes other than these labs</p> <ol> <li> <p>Go to your resources list</p> </li> <li> <p>Expand  the Logging and Monitoring category</p> </li> <li> <p>Find your IBM Log Analysis instance and find the Delete option from the 'vertical dots' menu</p> </li> </ol> <p>The below screenshot shows what it looks like after completing the above three steps:</p> <p></p> <ol> <li>Click Delete and confim the deletion if prompted.</li> </ol>"},{"location":"lab/cloud/cleanup/cleanup/#congratulations","title":"Congratulations!!","text":"<p>Congratulations on finishing the labs and cleaning up afterwards.  We hope you learned something useful in the labs and we know there is always room for improvement, so constructive criticism on the current labs or ideas for new labs are always welcome, either by a GitHub issue if you are comfortable with that (click the GitHub link on the right side of the banner at the top of the page) or via email to the authors.</p>"},{"location":"lab/cloud/lab1/","title":"Lab 1 - simple plaintext contract","text":"<p>In the first lab, you will provide a simple, plaintext contract in order to get a clear view of what a Hyper Protect Virtual Servers contract looks like. This is for learning purposes-  most production use cases will require an encrypted, and possibly signed, contract. </p> <p>The lab will also introduce you to persistent disk volumes.</p> <p>Your first step will be to prepare the contract on your prep system.  Click the Next link at the lower right to continue.</p>"},{"location":"lab/cloud/lab1/createinstance/","title":"Create an instance","text":"<p>Note: There are often multiple ways to perform a task. The lab instructions may describe a particular way to go about things, but if you have prior experience with the IBM Cloud Web user interface and can perform the same task through different methods, feel free to do so.  The lab instructions themselves may provide alternative ways to accomplish the tasks in different sections of the labs.</p> <p>These instructions assume you are logged in to the IBM Cloud Web UI.  If not, please log in before proceeding.</p> <ol> <li> <p>Go to your VPC</p> <p>One way to do this is to start by clicking the \"hamburger\" menu in the top left (the icon will then turn into an \"x\" as shown in the screen snippet below), then click VPC Infrastucture and then VPCs:</p> <p></p> <p>Then, select the link for your VPC from the list that is shown:</p> <p></p> </li> <li> <p>Click the link to create a virtual server instance</p> <p>You may have to scroll down on the page- find and click on the \"Create a virtual server instance\" link:</p> <p></p> </li> <li> <p>In the Architecture section, click the IBM Z, LinuxONE tile.  At this point, a Confidential Computing toggle should appear.  Click it to select it.  Then, ensure that you select the correct Zone- that is, the one for whch you created a subnet earlier (assuming you followed the lab instructions and created only one subnet).   You are not finished filling out this screen yet, but see the below screen snippet for hints:</p> <p></p> </li> <li> <p>Give your instance a name in the Name field in the Details section.  We chose lab-was-hpvs-lab1 in the screen shot below.  Then, it is very important to select the Version that ends in \"-12\". If this version is not the default selection, click the Change image link to select it.  Hopefully this screen snippet clarifies this:</p> <p></p> </li> <li> <p>These labs are going to demonstrate data persistence across virtual server instances, and for this you will need a data volume.  You will create the data volume in this lab and then reuse it in subsequent labs. In the Storage section, click the Create button in the Data volumes section:</p> <p></p> <p>In the Create data volume panel that slides in from the right, give your new data volume a name, give it the smallest possible size (10 GB) and then click the blue Create button:</p> <p></p> <p>You should then see the volume you just created listed in the Data volumes subsection of the Storage section:</p> <p></p> </li> <li> <p>Scroll down and in the Advanced options section, within the Instance configuration subsection, click the arrow at the right of the User data item.  Drag the lower right corner of the User data box that appears in order to enlarge it a bit, like we've done in the screen shot below:</p> <p></p> </li> <li> <p>At the end of the previous section of the lab, Prepare the contract, in the very last instruction, you displayed the contents of your <code>user_data.yaml</code>, on your prep system.  Go back to your prep system and copy the file contents that you displayed to your clipboard.  Then paste them into the user data box.  It should look similar to what is shown below-  we've redacted our IBM Log Analysis ingestion key from the screen shot, but you'll want your actual ingestion key to be in there. Also, for the purposes of the screen shot, we enlarged our User data box to be large enough to show the entire contract.  This isn't necessary to do, and for most larger contracts it will often not be possible to do so- you'll always be able to scroll in this area to see the entirety of what you pasted. See the screenshot below:</p> <p></p> </li> <li> <p>Go to your IBM Log Analysis Dashboard so you can verify that you receive log messages from the instance that you're about to create.</p> <p>Open another tab in your browser and go to cloud.ibm.com.  Log in if necessary.  Assuming you're logged in, the below screenshot provides guidance on one way to get to your list of IBM Log Analysis instances:</p> <p></p> <p>From the list, click the Open dashboard link:</p> <p></p> </li> <li> <p>Now, go back to the tab where you were setting up your virtual server instance-  click the blue Create virtual server button in the lower right.  Reminder: you may incur costs for this action, and these costs are your responsibility. We will provide instructions to delete resources that are no longer needed to help you minimize any costs you might incur.</p> <p></p> </li> <li> <p>Verify that your instance came up successfully.</p> <p>Within a couple of minutes of starting your instance, you should see many messages appear in your IBM Log Analysis Dashboard.  After startup completes, you should see some simple messages every thirty seconds greeting Lab 1 Student and telling them what time it is. Our workload is rather simple isn't it, but it is useful for demonstrating disk persistence. </p> <p>If something went wrong in your setup of the contract that the hyper protect container runtime detects, your instance will automatically be stopped in five minutes.  So if you receive no messages within five minutes of starting your instance, it is time to contact your instructor.</p> </li> <li> <p>Delete your instance.</p> <p>Your instance either started successfully- as evidenced by greetings to Lab 1 Student, or it failed to start successfully.  In either case you will want to delete your instance at this point.  Future labs will use the data volume that you created, but your current instance is no longer needed- in fact, leaving it around hinders subsequent labs-  you won't be able to reuse your disk volume if it is still attached to this instance. </p> <p>The screenshot below shows how you can delete this instance if you are currently displaying it-  by clicking the blue Actions button in the upper right, then choosing Delete.  From there, follow the instructions to confirm your intention to delete the instance.  </p> <p></p> </li> <li> <p>Proceed to lab 2 if your instance was successful or seek help from the instructors if your instance creation was not successful.</p> </li> </ol>"},{"location":"lab/cloud/lab1/prepcontract/","title":"Prepare the contract","text":""},{"location":"lab/cloud/lab1/prepcontract/#ensure-necessary-environment-variables-are-set","title":"Ensure necessary environment variables are set","text":"<ol> <li> <p>Go to a command prompt on your prep system</p> </li> <li> <p>You should have each of these environment variables set on your prep system:</p> <pre><code>echo LAB_WORKDIR is ${LAB_WORKDIR}\necho LAB_TAR is ${LAB_TAR}\necho LOG_INGESTION_KEY is ${LOG_INGESTION_KEY}\necho LOG_HOSTNAME is ${LOG_HOSTNAME}\n</code></pre> <p>If any of the above commands do not display a value after the is then revisit the section on setting environment variables.</p> </li> </ol>"},{"location":"lab/cloud/lab1/prepcontract/#make-the-directory-hierarchy-for-lab-1","title":"Make the directory hierarchy for Lab 1","text":"<ol> <li> <p>Make a fresh directory structure and change in to it:</p> <pre><code>mkdir -p ${LAB_WORKDIR}/lab1/play &amp;&amp; cd ${LAB_WORKDIR}/lab1\n</code></pre> </li> </ol>"},{"location":"lab/cloud/lab1/prepcontract/#create-a-pod-descriptor-to-specify-the-application-workload","title":"Create a Pod descriptor to specify the application workload","text":"<ol> <li> <p>Switch to the directory that will hold a Pod descriptor:</p> <pre><code>cd play\n</code></pre> </li> <li> <p>Create the Pod descriptor::</p> <pre><code>cat &lt;&lt; EOF &gt; play.yml    \n  play:\n    resources:\n      - apiVersion: v1\n        kind: Pod\n        metadata:\n          name: busybox\n        spec:\n          containers:\n          - name: main\n            image: docker.io/library/busybox@sha256:3614ca5eacf0a3a1bcc361c939202a974b4902b9334ff36eb29ffe9011aaad83\n            command: [\"/bin/sh\", \"-c\"]\n            args:\n            - mkdir -p /data/cloudlabs ;\n              env | tee -a /data/cloudlabs/env.out ;\n              cat /data/cloudlabs/env.out ;\n              head -20 /data/cloudlabs/env.out ;\n              head -20 /data/cloudlabs/greetings.out ;\n              tail -20 /data/cloudlabs/greetings.out ;\n              while true ;\n              do echo Hi \\${name:-World} the time is \\$(date) | tee -a /data/cloudlabs/greetings.out ;\n              sleep \\${interval:-60} ; \n              done\n            envFrom:\n            - configMapRef:\n                name: contract.config.map\n                optional: false\n            volumeMounts: \n              - mountPath: /data\n                name: data-vol\n                readOnly: false\n          restartPolicy: Never\n          volumes:\n            - hostPath:\n                path: /mnt/data\n                type: Directory\n              name: data-vol\nEOF\n</code></pre> </li> <li> <p>Display the file's content.</p> <pre><code>cat play.yml\n</code></pre> </li> </ol>"},{"location":"lab/cloud/lab1/prepcontract/#create-the-contract","title":"Create the contract","text":"<ol> <li> <p>Change to the directory one level higher than your current location (and display it):</p> <pre><code>cd .. &amp;&amp; pwd\n</code></pre> </li> <li> <p>Create the contract.</p> <pre><code>cat &lt;&lt; EOF &gt; user_data.yaml\nenv: |\n  type: env\n  logging:\n    logDNA:\n      hostname: ${LOG_HOSTNAME}\n      ingestionKey: ${LOG_INGESTION_KEY}\n      port: 6514\n  volumes:\n    data:\n      seed: seed-supplied-by-env-persona\n  env:\n    name: Lab 1 Student\n    interval: \"30\"\nworkload: |\n  type: workload\n  volumes:\n    data:\n      filesystem: ext4\n      mount: /mnt/data\n      seed: seed-supplied-by-workload-persona\n$(cat play/play.yml)\nEOF\n</code></pre> </li> <li> <p>Display your contract data. Keep your terminal session handy- later on in the next section you will be directed to copy these contents into the IBM Cloud Web UI. </p> <pre><code>cat user_data.yaml\n</code></pre> </li> </ol> <p>Proceed to the next section to create your Hyper Protect Virtual Servers for IBM Cloud VPC instance.</p>"},{"location":"lab/cloud/lab2/","title":"Lab 2 - partially encrypted contract","text":"<p>This lab builds upon lab 1 by encrypting part of the contract, illustrating separation of responsibilities. It also demonstrates data persistence by using the same data volume used in lab 1.</p>"},{"location":"lab/cloud/lab2/createinstance/","title":"Create an instance","text":"<p>Note: There are often multiple ways to perform a task. The lab instructions may describe a particular way to go about things, but if you have prior experience with the IBM Cloud Web user interface and can perform the same task through different methods, feel free to do so.  The lab instructions themselves may provide alternative ways to accomplish the tasks in different sections of the labs.</p> <p>These instructions assume you are logged in to the IBM Cloud Web UI.  If not, please log in before proceeding.</p> <ol> <li> <p>Go to your VPC</p> <p>One way to do this is to start by clicking the \"hamburger\" menu in the top left (the icon will then turn into an \"x\" as shown in the screen snippet below), then click VPC Infrastucture and then VPCs:</p> <p></p> <p>Then, select the link for your VPC from the list that is shown:</p> <p></p> </li> <li> <p>Click the link to create a virtual server instance</p> <p>You may have to scroll down on the page- find and click on the \"Create a virtual server instance\" link:</p> <p></p> </li> <li> <p>In the Architecture section, click the IBM Z, LinuxONE tile.  At this point, a Confidential Computing toggle should appear.  Click it to select it.  Then, ensure that you select the correct Zone- that is, the one for whch you created a subnet earlier (assuming you followed the lab instructions and created only one subnet).   You are not finished filling out this screen yet, but see the below screen snippet for hints:</p> <p></p> </li> <li> <p>Give your instance a name in the Name field in the Details section.  We chose lab-was-hpvs-lab2 in the screen shot below.  Then, it is very important to select the Version that ends in \"-12\". If this version is not the default selection, click the Change image link to select it.  Use this screen snippet as guidance:</p> <p></p> </li> <li> <p>At this point in lab 1, you created a data volume that you will use across the labs.  You will not be able to attach that data volume until after you start your virtual server instance, so, continue with the next instruction. </p> </li> <li> <p>Scroll down and in the Advanced options section, within the Instance configuration subsection, click the arrow at the right of the User data item.  Drag the lower right corner of the User data box that appears in order to enlarge it a bit, like we've done in the screen shot below:</p> <p></p> </li> <li> <p>At the end of the previous section of the lab, Prepare the contract, in the very last instruction, you displayed the contents of your <code>user_data.yaml</code>, on your prep system.  Go back to your prep system and copy the file contents that you displayed to your clipboard.  Then paste them into the user data box.  It should look similar to what is shown below-  we've redacted our IBM Log Analysis ingestion key from the screen shot, but you'll want your actual ingestion key to be in there. The screen shot below does not show the entire contract- the top of the encrypted workload section is not visible in the screen shot, but we are showing the entire unencrypted environment section:</p> <p></p> </li> <li> <p>Go to your IBM Log Analysis Dashboard so you can verify that you receive log messages from the instance that you're about to create.</p> <p>Open another tab in your browser and go to cloud.ibm.com.  Log in if necessary.  Assuming you're logged in, the below screenshot provides guidance on one way to get to your list of IBM Log Analysis instances:</p> <p></p> <p>From the list, click the Open dashboard link:</p> <p></p> </li> <li> <p>Now, go back to the tab where you were setting up your virtual server instance-  click the blue Create virtual server button in the lower right.  Reminder: you may incur costs for this action, and these costs are your responsibility. We will provide instructions to delete resources that are no longer needed to help you minimize any costs you might incur.</p> <p></p> </li> <li> <p>Verify that your instance has started to come up.</p> <p>Within a couple of minutes of starting your instance, you should see many messages appear in your IBM Log Analysis Dashboard. However, unlike the previous lab, the instance will not come up completely until you take further action- specifically, you need to attach the data volume that you created in the previous lab.  Continue with these instructions. </p> </li> <li> <p>Attach the disk volume that you created in lab:</p> <p>Click on the link for your instance in the list under Virtual server instances for VPC:</p> <p></p> <p>Scroll down to the Storage volumes section and click the blue Attach button:</p> <p></p> <p>On the Attach storage volume screen, select the Block volume that you created in the previous lab (lab-was-datavol if you used the same name we used in these instructions) and then click the blue Save button at the bottom:</p> <p></p> <p>Now back on the screen displaying your instance information, you should see this data volume in the list of Storage volumes, similar to the screen shot below:</p> <p></p> </li> <li> <p>Now that you have attached the disk volume, startup continues and completes. Within your IBM Log Analysis Dashboard you should be able to see some messages greeting Lab 1 Student- this is data written from your earlier instance from lab 1.  (You may need to scroll up to find them.) Then, this instance will provide similar greetings to Lab 2 Student- this provides a demonstration of successfully reusing a data volume to provide data persistence across different virtual server instances. </p> <p>If something went wrong in your setup of the contract that the hyper protect container runtime detects, your instance will automatically be stopped in five minutes.  So if you receive no messages within five minutes of starting your instance, it is time to contact your instructor.</p> </li> <li> <p>Delete your instance.</p> <p>Your instance either started successfully- as evidenced by the display of earlier greetings to Lab 1 Student and then periodic greetings to Lab 2 Student, or it failed to start successfully.  In either case you will want to delete your instance at this point.  Future labs will use the data volume that you created, but your current instance is no longer needed- in fact, leaving it around hinders subsequent labs-  you won't be able to reuse your disk volume if it is still attached to this instance. </p> <p>The screenshot below shows how you can delete an instance if you are currently displaying it-  by clicking the blue Actions button in the upper right, then choosing Delete.  From there, follow the instructions to confirm your intention to delete the instance.  (This screen snippet is from the instance created in lab 1, but the process to delete the instance is the same.) </p> <p></p> </li> <li> <p>Proceed to lab 3 if your instance was successful or seek help from the instructors if your instance creation was not successful.</p> </li> </ol>"},{"location":"lab/cloud/lab2/prepcontract/","title":"Prepare the contract","text":""},{"location":"lab/cloud/lab2/prepcontract/#ensure-necessary-environment-variables-are-set","title":"Ensure necessary environment variables are set","text":"<ol> <li> <p>Go to a command prompt on your prep system</p> </li> <li> <p>You should have each of these environment variables set on your prep system:</p> <pre><code>echo LAB_WORKDIR is ${LAB_WORKDIR}\necho LAB_TAR is ${LAB_TAR}\necho LOG_INGESTION_KEY is ${LOG_INGESTION_KEY}\necho LOG_HOSTNAME is ${LOG_HOSTNAME}\n</code></pre> <p>If any of the above commands do not display a value after the is then revisit the section on setting environment variables.</p> </li> </ol>"},{"location":"lab/cloud/lab2/prepcontract/#make-a-new-directory-hierarchy-for-lab-2","title":"Make a new directory hierarchy for Lab 2","text":"<ol> <li> <p>Make a fresh directory structure and change in to it:</p> <pre><code>mkdir -p ${LAB_WORKDIR}/lab2/workload/play &amp;&amp; cd ${LAB_WORKDIR}/lab2\n</code></pre> </li> </ol>"},{"location":"lab/cloud/lab2/prepcontract/#create-a-pod-descriptor-to-specify-the-application-workload","title":"Create a Pod descriptor to specify the application workload","text":"<ol> <li> <p>Switch to the directory that will hold a Pod descriptor:</p> <pre><code>cd workload/play\n</code></pre> </li> <li> <p>Create the Pod descriptor::</p> <pre><code>cat &lt;&lt; EOF &gt; play.yml    \n  play:\n    resources:\n      - apiVersion: v1\n        kind: Pod\n        metadata:\n          name: busybox\n        spec:\n          containers:\n          - name: main\n            image: docker.io/library/busybox@sha256:3614ca5eacf0a3a1bcc361c939202a974b4902b9334ff36eb29ffe9011aaad83\n            command: [\"/bin/sh\", \"-c\"]\n            args:\n            - mkdir -p /data/cloudlabs ;\n              env | tee -a /data/cloudlabs/env.out ;\n              cat /data/cloudlabs/env.out ;\n              head -20 /data/cloudlabs/env.out ;\n              head -20 /data/cloudlabs/greetings.out ;\n              tail -20 /data/cloudlabs/greetings.out ;\n              while true ;\n              do echo Hi \\${name:-World} the time is \\$(date) | tee -a /data/cloudlabs/greetings.out ;\n              sleep \\${interval:-60} ; \n              done\n            envFrom:\n            - configMapRef:\n                name: contract.config.map\n                optional: false\n            volumeMounts: \n              - mountPath: /data\n                name: data-vol\n                readOnly: false\n          restartPolicy: Never\n          volumes:\n            - hostPath:\n                path: /mnt/data\n                type: Directory\n              name: data-vol\nEOF\n</code></pre> </li> <li> <p>Display the file's content.</p> <pre><code>cat play.yml\n</code></pre> </li> <li> <p>Optional.  This command will show that you are indeed using the same pod descriptor in this lab (lab2)  as you did in the previous lab (lab1).  We could have had you just copy that file over instead of using the cat command in the prior step.</p> <pre><code>diff --report-identical-files \\\n${LAB_WORKDIR}/lab1/play/play.yml \\\n${LAB_WORKDIR}/lab2/workload/play/play.yml\n</code></pre> </li> <li> <p>Change to the directory one level higher than your current location (and display it):</p> <pre><code>cd .. &amp;&amp; pwd\n</code></pre> </li> </ol>"},{"location":"lab/cloud/lab2/prepcontract/#create-encrypted-workload-section-of-the-contract","title":"Create encrypted workload section of the contract","text":"<ol> <li> <p>Create this convenience script to encrypt the workload portion of the contract:</p> <pre><code>cat &lt;&lt; EOF &gt; flow.workload\n# Create the workload section of the contract and add the contents in the workload.yaml file.\n\nWORKLOAD_PLAIN=./workload.yaml.plaintext\nWORKLOAD=workload.yaml\n\necho \"  type: workload\n  volumes:\n    data:\n      filesystem: ext4\n      mount: /mnt/data\n      seed: seed-supplied-by-workload-persona\n\\$(cat play/play.yml)\" &gt; \\${WORKLOAD_PLAIN}\n\n# Download certificate to encrypt contract for Hyper Protect Container Runtime:\nHPCR_rev=12\nCONTRACT_KEY=./ibm-hyper-protect-container-runtime-1-0-s390x-\\${HPCR_rev}-encrypt.crt\ncurl https://cloud.ibm.com/media/docs/downloads/hyper-protect-container-runtime/ibm-hyper-protect-container-runtime-1-0-s390x-\\${HPCR_rev}-encrypt.crt &gt; \\${CONTRACT_KEY}\n\n\n# Use the following command to create a random password:\nPASSWORD_WORKLOAD=\"\\$(openssl rand 32 | base64 \\${LAB_WRAP})\"\n\n# Use the following command to encrypt password with the Hyper Protect Container Runtime Contract Encryption Key:\nENCRYPTED_WORKLOAD_PASSWORD=\"\\$(echo -n \"\\$PASSWORD_WORKLOAD\" | base64 -d | openssl rsautl -encrypt -inkey \\$CONTRACT_KEY -certin | base64 \\${LAB_WRAP})\"\n\n# Use the following command to encrypt the workload.yaml file with a random password:\nENCRYPTED_WORKLOAD=\"\\$(echo -n \"\\$PASSWORD_WORKLOAD\" | base64 -d | openssl enc -aes-256-cbc -pbkdf2 -pass stdin -in \"\\$WORKLOAD_PLAIN\" | base64 \\${LAB_WRAP})\"\n\n# Use the following command to get the encrypted section of the contract:\nWORKLOAD_ENCRYPTED=\"hyper-protect-basic.\\${ENCRYPTED_WORKLOAD_PASSWORD}.\\${ENCRYPTED_WORKLOAD}\"\n\necho \"\"\necho \"See `pwd`/workload.yaml.plaintext to see what was encrypted for the workload section of your contract\"\necho \"\"\n\necho \"\\$WORKLOAD_ENCRYPTED\" &gt; ../\\$WORKLOAD\nEOF\n</code></pre> </li> <li> <p>Run the script you just created:</p> <pre><code>. ./flow.workload\n</code></pre> </li> <li> <p>Back up one directory:</p> <pre><code>cd ..\n</code></pre> </li> <li> <p>Display the encrypted workload section you just created:  </p> <pre><code>cat workload.yaml\n</code></pre> </li> </ol>"},{"location":"lab/cloud/lab2/prepcontract/#add-a-plaintext-environment-section-to-the-encrypted-workload-section","title":"Add a plaintext environment section to the encrypted workload section","text":"<ol> <li> <p>This command combines the workload section (which is encrypted) with a plain text environment section.  The contract is the output file, user_data.yaml.</p> <pre><code>cat &lt;&lt; EOF &gt; user_data.yaml\nworkload: $(cat workload.yaml)\nenv: |\n  type: env\n  logging:\n    logDNA:\n      hostname: ${LOG_HOSTNAME}\n      ingestionKey: ${LOG_INGESTION_KEY}\n      port: 6514\n  volumes:\n    data:\n      seed: seed-supplied-by-env-persona\n  env:\n    name: Lab 2 Student\n    interval: \"30\"\nEOF\n</code></pre> </li> <li> <p>Display your contract data:</p> <pre><code>cat user_data.yaml\n</code></pre> </li> </ol> <p>Proceed to the next section to create your Hyper Protect Virtual Servers for IBM Cloud VPC instance.</p>"},{"location":"lab/cloud/lab3/","title":"Lab 3 - encrypted contract","text":"<p>Lab 3 builds on the first two contracts.  It shows encryption of both the workload section and the environment section of the contract.</p>"},{"location":"lab/cloud/lab3/createinstance/","title":"Create an instance","text":"<p>Note: There are often multiple ways to perform a task. The lab instructions may describe a particular way to go about things, but if you have prior experience with the IBM Cloud Web user interface and can perform the same task through different methods, feel free to do so.  The lab instructions themselves may provide alternative ways to accomplish the tasks in different sections of the labs.</p> <p>These instructions assume you are logged in to the IBM Cloud Web UI.  If not, please log in before proceeding.</p> <ol> <li> <p>Go to your VPC</p> <p>One way to do this is to start by clicking the \"hamburger\" menu in the top left (the icon will then turn into an \"x\" as shown in the screen snippet below), then click VPC Infrastucture and then VPCs:</p> <p></p> <p>Then, select the link for your VPC from the list that is shown:</p> <p></p> </li> <li> <p>Click the link to create a virtual server instance</p> <p>You may have to scroll down on the page- find and click on the \"Create a virtual server instance\" link:</p> <p></p> </li> <li> <p>In the Architecture section, click the IBM Z, LinuxONE tile.  At this point, a Confidential Computing toggle should appear.  Click it to select it.  Then, ensure that you select the correct Zone- that is, the one for whch you created a subnet earlier (assuming you followed the lab instructions and created only one subnet).   You are not finished filling out this screen yet, but see the below screen snippet for hints:</p> <p></p> </li> <li> <p>Give your instance a name in the Name field in the Details section.  We chose lab-was-hpvs-lab3 in the screen shot below.  Then, it is very important to select the Version that ends in \"-12\". If this version is not the default selection, click the Change image link to select it. See this screen snippet for guidance:</p> <p></p> </li> <li> <p>Scroll down and in the Advanced options section, within the Instance configuration subsection, click the arrow at the right of the User data item.  Drag the lower right corner of the User data box that appears in order to enlarge it a bit, like we've done in the screen shot below:</p> <p></p> </li> <li> <p>At the end of the previous section of the lab, Prepare the contract, in the very last instruction, you displayed the contents of your <code>user_data.yaml</code>, on your prep system.  Go back to your prep system and copy the file contents that you displayed to your clipboard.  Then paste them into the user data box.  It should look similar to what is shown below. The screen shot below does not show the entire contract- the top of the encrypted workload section is not visible in the screen shot, but we are showing the entire encrypted environment section:</p> <p></p> </li> <li> <p>Go to your IBM Log Analysis Dashboard so you can verify that you receive log messages from the instance that you're about to create.</p> <p>Open another tab in your browser and go to cloud.ibm.com.  Log in if necessary.  Assuming you're logged in, the below screenshot provides guidance on one way to get to your list of IBM Log Analysis instances:</p> <p></p> <p>From the list, click the Open dashboard link:</p> <p></p> </li> <li> <p>Now, go back to the tab where you were setting up your virtual server instance-  click the blue Create virtual server button in the lower right.  Reminder: you may incur costs for this action, and these costs are your responsibility. We will provide instructions to delete resources that are no longer needed to help you minimize any costs you might incur.</p> <p></p> </li> <li> <p>Verify that your instance has started to come up.</p> <p>Within a couple of minutes of starting your instance, you should see many messages appear in your IBM Log Analysis Dashboard. However, unlike the previous lab, the instance will not come up completely until you take further action- specifically, you need to attach the data volume that you created in the previous lab.  Continue with these instructions. </p> </li> <li> <p>Attach the disk volume that you created in lab:</p> <p>Note: The screen shots in this instruction are taken from the section for lab 2 but the process is exactly the same for your lab 3 instance, so don't be confused if you see 'lab 2' in some of these screen snippets.</p> <p>Click on the link for your instance in the list under Virtual server instances for VPC:</p> <p></p> <p>Scroll down to the Storage volumes section and click the blue Attach button:</p> <p></p> <p>On the Attach storage volume screen, select the Block volume that you created in the previous lab (lab-was-datavol if you used the same name we used in these instructions) and then click the blue Save button at the bottom:</p> <p></p> <p>Now back on the screen displaying your instance information, you should see this data volume in the list of Storage volumes, similar to the screen shot below:</p> <p></p> </li> <li> <p>Now that you have attached the disk volume, startup continues and completes. Within your IBM Log Analysis Dashboard you should be able to see some messages greeting Lab 1 Student and some messages greeting Lab 2 Student- this is data written from your earlier instances from labs 1 and 2.  (You may need to scroll up to find them.) Then, this instance will provide similar greetings to Lab 3 Student- this provides a demonstration of successfully reusing a data volume to provide data persistence across different virtual server instances. </p> <p>If something went wrong in your setup of the contract that the hyper protect container runtime detects, your instance will automatically be stopped in five minutes.  So if you receive no messages within five minutes of starting your instance, it is time to contact your instructor.</p> </li> <li> <p>Delete your instance.</p> <p>Your instance either started successfully- as evidenced by the display of earlier greetings to Lab 1 Student and Lab 2 Student and then periodic greetings to Lab 3 Student, or it failed to start successfully.  In either case you will want to delete your instance at this point.  Future labs will use the data volume that you created, but your current instance is no longer needed- in fact, leaving it around hinders subsequent labs-  you won't be able to reuse your disk volume if it is still attached to this instance. </p> <p>The screenshot below shows how you can delete an instance if you are currently displaying it-  by clicking the blue Actions button in the upper right, then choosing Delete.  From there, follow the instructions to confirm your intention to delete the instance.  (This screen snippet is from the instance created in lab 1, but the process to delete the instance is the same.) </p> <p></p> </li> <li> <p>Proceed to lab 4 if your instance was successful or seek help from the instructors if your instance creation was not successful.</p> </li> </ol>"},{"location":"lab/cloud/lab3/prepcontract/","title":"Prepare the contract","text":""},{"location":"lab/cloud/lab3/prepcontract/#ensure-necessary-environment-variables-are-set","title":"Ensure necessary environment variables are set","text":"<ol> <li> <p>Go to a command prompt on your prep system</p> </li> <li> <p>You should have each of these environment variables set on your prep system:</p> <pre><code>echo LAB_WORKDIR is ${LAB_WORKDIR}\necho LAB_TAR is ${LAB_TAR}\necho LOG_INGESTION_KEY is ${LOG_INGESTION_KEY}\necho LOG_HOSTNAME is ${LOG_HOSTNAME}\n</code></pre> <p>If any of the above commands do not display a value after the is then revisit the section on setting environment variables.</p> </li> </ol>"},{"location":"lab/cloud/lab3/prepcontract/#make-a-new-directory-hierarchy-for-lab-3","title":"Make a new directory hierarchy for Lab 3","text":"<ol> <li> <p>Make a fresh directory structure and change in to it:</p> <pre><code>mkdir -p ${LAB_WORKDIR}/lab3/{environment,workload/play} &amp;&amp; cd ${LAB_WORKDIR}/lab3\n</code></pre> </li> </ol>"},{"location":"lab/cloud/lab3/prepcontract/#create-a-pod-descriptor-to-specify-the-application-workload","title":"Create a Pod descriptor to specify the application workload","text":"<ol> <li> <p>Switch to the  directory which will hold a Pod descriptor and then switch to it:</p> <pre><code>cd workload/play\n</code></pre> </li> <li> <p>Create the Pod descriptor::</p> <pre><code>cat &lt;&lt; EOF &gt; play.yml    \n  play:\n    resources:\n      - apiVersion: v1\n        kind: Pod\n        metadata:\n          name: busybox\n        spec:\n          containers:\n          - name: main\n            image: docker.io/library/busybox@sha256:3614ca5eacf0a3a1bcc361c939202a974b4902b9334ff36eb29ffe9011aaad83\n            command: [\"/bin/sh\", \"-c\"]\n            args:\n            - mkdir -p /data/cloudlabs ;\n              env | tee -a /data/cloudlabs/env.out ;\n              cat /data/cloudlabs/env.out ;\n              head -20 /data/cloudlabs/env.out ;\n              head -20 /data/cloudlabs/greetings.out ;\n              tail -20 /data/cloudlabs/greetings.out ;\n              while true ;\n              do echo Hi \\${name:-World} the time is \\$(date) | tee -a /data/cloudlabs/greetings.out ;\n              sleep \\${interval:-60} ; \n              done\n            envFrom:\n            - configMapRef:\n                name: contract.config.map\n                optional: false\n            volumeMounts: \n              - mountPath: /data\n                name: data-vol\n                readOnly: false\n          restartPolicy: Never\n          volumes:\n            - hostPath:\n                path: /mnt/data\n                type: Directory\n              name: data-vol\nEOF\n</code></pre> </li> <li> <p>Display the file's content.</p> <pre><code>cat play.yml\n</code></pre> </li> <li> <p>Optional.  This command will show that you are indeed using the same pod descriptor in this lab (lab3)  as you did in the previous lab (lab2).  We could have had you just copy that file over instead of using the cat command in the prior step.</p> <pre><code>diff --report-identical-files \\\n${LAB_WORKDIR}/lab2/workload/play/play.yml \\\n${LAB_WORKDIR}/lab3/workload/play/play.yml\n</code></pre> </li> <li> <p>Change to the directory one level higher than your current location (and display it):</p> <pre><code>cd .. &amp;&amp; pwd\n</code></pre> </li> <li> <p>Create this convenience script to encrypt the workload portion of the contract:</p> <pre><code>cat &lt;&lt; EOF &gt; flow.workload\n# Create the workload section of the contract and add the contents in the workload.yaml file.\n\nWORKLOAD_PLAIN=./workload.yaml.plaintext\nWORKLOAD=workload.yaml\n\necho \"  type: workload\n  volumes:\n    data:\n      filesystem: ext4\n      mount: /mnt/data\n      seed: seed-supplied-by-workload-persona\n\\$(cat play/play.yml)\" &gt; \\${WORKLOAD_PLAIN}\n\n# Download certificate to encrypt contract for Hyper Protect Container Runtime:\nHPCR_rev=12\nCONTRACT_KEY=./ibm-hyper-protect-container-runtime-1-0-s390x-\\${HPCR_rev}-encrypt.crt\ncurl https://cloud.ibm.com/media/docs/downloads/hyper-protect-container-runtime/ibm-hyper-protect-container-runtime-1-0-s390x-\\${HPCR_rev}-encrypt.crt &gt; \\${CONTRACT_KEY}\n\n\n# Use the following command to create a random password:\nPASSWORD_WORKLOAD=\"\\$(openssl rand 32 | base64 \\${LAB_WRAP})\"\n\n# Use the following command to encrypt password with the Hyper Protect Container Runtime Contract Encryption Key:\nENCRYPTED_WORKLOAD_PASSWORD=\"\\$(echo -n \"\\$PASSWORD_WORKLOAD\" | base64 -d | openssl rsautl -encrypt -inkey \\$CONTRACT_KEY -certin | base64 \\${LAB_WRAP})\"\n\n# Use the following command to encrypt the workload.yaml file with a random password:\nENCRYPTED_WORKLOAD=\"\\$(echo -n \"\\$PASSWORD_WORKLOAD\" | base64 -d | openssl enc -aes-256-cbc -pbkdf2 -pass stdin -in \"\\$WORKLOAD_PLAIN\" | base64 \\${LAB_WRAP})\"\n\n# Use the following command to get the encrypted section of the contract:\nWORKLOAD_ENCRYPTED=\"hyper-protect-basic.\\${ENCRYPTED_WORKLOAD_PASSWORD}.\\${ENCRYPTED_WORKLOAD}\"\n\necho \"\"\necho \"See `pwd`/workload.yaml.plaintext to see what was encrypted for the workload section of your contract\"\necho \"\"\n\necho \"\\$WORKLOAD_ENCRYPTED\" &gt; ../\\$WORKLOAD\nEOF\n</code></pre> </li> <li> <p>Run the script you just created:</p> <pre><code>. ./flow.workload\n</code></pre> </li> <li> <p>Back up one directory:</p> <pre><code>cd ..\n</code></pre> </li> <li> <p>Display the encrypted workload section you just created:  </p> <pre><code>cat workload.yaml\n</code></pre> </li> </ol>"},{"location":"lab/cloud/lab3/prepcontract/#create-encrypted-workload-section-of-the-contract","title":"Create encrypted workload section of the contract","text":""},{"location":"lab/cloud/lab3/prepcontract/#create-encrypted-environment-section-of-the-contract","title":"Create encrypted environment section of the contract","text":"<ol> <li> <p>Switch to the environment directory:</p> <pre><code>cd environment\n</code></pre> </li> <li> <p>Create this convenience script to encrypt the environment portion of the contract:</p> <pre><code>cat &lt;&lt; EOF &gt; flow.env\n# Create the env section of the contract and add the contents in the env.yaml file.\nENV_PLAIN=\"./env.yaml.plaintext\"\nENV=\"env.yaml\"\n\necho \"  type: env\n  logging:\n    logDNA:\n      hostname: \\${LOG_HOSTNAME}\n      ingestionKey: \\${LOG_INGESTION_KEY}\n      port: 6514\n  env:\n    name: Lab 3 Student\n    interval: \\\"30\\\"\n  volumes:\n    data:\n      seed: seed-supplied-by-env-persona\" &gt; \\${ENV_PLAIN}\n\n# Download certificate to encrypt contract for Hyper Protect Container Runtime:\nHPCR_rev=12\nCONTRACT_KEY=./ibm-hyper-protect-container-runtime-1-0-s390x-\\${HPCR_rev}-encrypt.crt\ncurl https://cloud.ibm.com/media/docs/downloads/hyper-protect-container-runtime/\\$CONTRACT_KEY &gt; \\$CONTRACT_KEY\n\n\n# Use the following command to create a random password:\nPASSWORD_ENV=\"\\$(openssl rand 32 | base64 \\${LAB_WRAP})\"\n\n#  Use the following command to encrypt password with the Hyper Protect Container Runtime Contract Encryption Key:\nENCRYPTED_ENV_PASSWORD=\"\\$(echo -n \"\\$PASSWORD_ENV\" | base64 -d | openssl rsautl -encrypt -inkey \\$CONTRACT_KEY -certin | base64 \\${LAB_WRAP} )\"\n\n# Use the following command to encrypt env.yaml with a random password:\nENCRYPTED_ENV=\"\\$(echo -n \"\\$PASSWORD_ENV\" | base64 -d | openssl enc -aes-256-cbc -pbkdf2 -pass stdin -in \"\\$ENV_PLAIN\" | base64 \\${LAB_WRAP})\"\n\n# Use the following command to get the encrypted section of the contract:\nENV_ENCRYPTED=\"hyper-protect-basic.\\${ENCRYPTED_ENV_PASSWORD}.\\${ENCRYPTED_ENV}\"\n\necho \"\"\necho \"See `pwd`/env.yaml.plaintext to see what was encrypted for the env section of your contract\"\necho \"\"\n\necho \"\\$ENV_ENCRYPTED\" &gt; ../\\$ENV\nEOF\n</code></pre> </li> <li> <p>Run the script you just created:</p> <pre><code>. ./flow.env\n</code></pre> </li> <li> <p>Back up one directory:</p> <pre><code>cd ..\n</code></pre> </li> <li> <p>Display the encrypted environment section you just created:  </p> <pre><code>cat env.yaml\n</code></pre> </li> <li> <p>This command combines the workload section (which is encrypted) with the environment section (which is also encrypted).  The contract is the output file, user_data.yaml.. </p> <pre><code>cat &lt;&lt; EOF &gt; user_data.yaml\nworkload: $(cat workload.yaml)\nenv: $(cat env.yaml)\nEOF\n</code></pre> </li> <li> <p>Display your contract data:</p> <pre><code>cat user_data.yaml\n</code></pre> </li> </ol> <p>Proceed to the next section to create your Hyper Protect Virtual Servers for IBM Cloud VPC instance.</p>"},{"location":"lab/cloud/lab3/prepcontract/#combine-the-encrypted-workload-section-with-the-encrypted-environment-section","title":"Combine the encrypted workload section with the encrypted environment  section","text":""},{"location":"lab/cloud/lab4/","title":"Lab 4 - encrypted and signed contract","text":"<p>This lab demonstrates the best practice of having a contract that is encrypted and signed.</p>"},{"location":"lab/cloud/lab4/createinstance/","title":"Create an instance","text":"<p>Note: There are often multiple ways to perform a task. The lab instructions may describe a particular way to go about things, but if you have prior experience with the IBM Cloud Web user interface and can perform the same task through different methods, feel free to do so.  The lab instructions themselves may provide alternative ways to accomplish the tasks in different sections of the labs.</p> <p>These instructions assume you are logged in to the IBM Cloud Web UI.  If not, please log in before proceeding.</p> <ol> <li> <p>Go to your VPC</p> <p>One way to do this is to start by clicking the \"hamburger\" menu in the top left (the icon will then turn into an \"x\" as shown in the screen snippet below), then click VPC Infrastucture and then VPCs:</p> <p></p> <p>Then, select the link for your VPC from the list that is shown:</p> <p></p> </li> <li> <p>Click the link to create a virtual server instance</p> <p>You may have to scroll down on the page- find and click on the \"Create a virtual server instance\" link:</p> <p></p> </li> <li> <p>In the Architecture section, click the IBM Z, LinuxONE tile.  At this point, a Confidential Computing toggle should appear.  Click it to select it.  Then, ensure that you select the correct Zone- that is, the one for whch you created a subnet earlier (assuming you followed the lab instructions and created only one subnet).   You are not finished filling out this screen yet, but see the below screen snippet for hints:</p> <p></p> </li> <li> <p>Give your instance a name in the Name field in the Details section.  We chose lab-was-hpvs-lab4 as shown in the screen shot below. Then, it is very important to select the Version that ends in \"-12\". If this version is not the default selection, click the Change image link to select it. See this screen snippet for guidance:</p> <p></p> </li> <li> <p>Scroll down and in the Advanced options section, within the Instance configuration subsection, click the arrow at the right of the User data item.  Drag the lower right corner of the User data box that appears in order to enlarge it a bit, like we've done in the screen shot below:</p> <p></p> </li> <li> <p>At the end of the previous section of the lab, Prepare the contract, in the very last instruction, you displayed the contents of your <code>user_data.yaml</code>, on your prep system.  Go back to your prep system and copy the file contents that you displayed to your clipboard.  Then paste them into the user data box.  It should look similar to what is shown below. The screen shot below does not show the entire contract- the entire encrypted workload section and the top of the encrypted environment section is not visible in the screen shot, but we are showing the entire base64-encoded envWorkloadSignature section is shown:</p> <p></p> </li> <li> <p>Go to your IBM Log Analysis Dashboard so you can verify that you receive log messages from the instance that you're about to create.</p> <p>Open another tab in your browser and go to cloud.ibm.com.  Log in if necessary.  Assuming you're logged in, the below screenshot provides guidance on one way to get to your list of IBM Log Analysis instances:</p> <p></p> <p>From the list, click the Open dashboard link:</p> <p></p> </li> <li> <p>Now, go back to the tab where you were setting up your virtual server instance-  click the blue Create virtual server button in the lower right.  Reminder: you may incur costs for this action, and these costs are your responsibility. We will provide instructions to delete resources that are no longer needed to help you minimize any costs you might incur.</p> <p></p> </li> <li> <p>Verify that your instance has started to come up.</p> <p>Within a couple of minutes of starting your instance, you should see many messages appear in your IBM Log Analysis Dashboard. However, unlike the previous lab, the instance will not come up completely until you take further action- specifically, you need to attach the data volume that you created in the previous lab.  Continue with these instructions. </p> </li> <li> <p>Attach the disk volume that you created in lab:</p> <p>Note: The screen shots in this instruction are taken from the section for lab 2 but the process is exactly the same for your lab 4 instance, so don't be confused if you see 'lab 2' in some of these screen snippets.</p> <p>Click on the link for your instance in the list under Virtual server instances for VPC:</p> <p></p> <p>Scroll down to the Storage volumes section and click the blue Attach button:</p> <p></p> <p>On the Attach storage volume screen, select the Block volume that you created in the first lab (lab-was-datavol if you used the same name we used in these instructions) and then click the blue Save button at the bottom:</p> <p></p> <p>Now back on the screen displaying your instance information, you should see this data volume in the list of Storage volumes, similar to the screen shot below:</p> <p></p> </li> <li> <p>Now that you have attached the disk volume, startup continues and completes. Within your IBM Log Analysis Dashboard you should be able to see some messages greeting Lab 1 Student and some messages greeting Lab 3 Student (and maybe with some messages to Lab 2 Student- extra credit if you understand why you may or may not see greetings to her)- this is data written from your earlier instances from the first three labs.  (You may need to scroll up to find them.) Then, this instance will provide similar greetings to Lab 4 Student- this provides a demonstration of successfully reusing a data volume to provide data persistence across different virtual server instances. </p> <p>If something went wrong in your setup of the contract that the hyper protect container runtime detects, your instance will automatically be stopped in five minutes.  So if you receive no messages within five minutes of starting your instance, it is time to contact your instructor.</p> </li> <li> <p>Delete your instance.</p> <p>Your instance either started successfully- as evidenced by the display of earlier greetings to Lab 1 Student and Lab 3 Student and then periodic greetings to Lab 4 Student, or it failed to start successfully.  In either case you will want to delete your instance at this point.  </p> <p>The screenshot below shows how you can delete an instance if you are currently displaying it-  by clicking the blue Actions button in the upper right, then choosing Delete.  From there, follow the instructions to confirm your intention to delete the instance.  (This screen snippet is from the instance created in lab 1, but the process to delete the instance is the same.) </p> <p></p> </li> <li> <p>Proceed to the next section to clean up all of the resources you created in these four labs.</p> </li> </ol>"},{"location":"lab/cloud/lab4/prepcontract/","title":"Prepare the contract","text":""},{"location":"lab/cloud/lab4/prepcontract/#ensure-necessary-environment-variables-are-set","title":"Ensure necessary environment variables are set","text":"<ol> <li> <p>Go to a command prompt on your prep system</p> </li> <li> <p>You should have each of these environment variables set on your prep system:</p> <pre><code>echo LAB_WORKDIR is ${LAB_WORKDIR}\necho LAB_TAR is ${LAB_TAR}\necho LOG_INGESTION_KEY is ${LOG_INGESTION_KEY}\necho LOG_HOSTNAME is ${LOG_HOSTNAME}\n</code></pre> <p>If any of the above commands do not display a value after the is then revisit the section on setting environment variables.</p> </li> </ol>"},{"location":"lab/cloud/lab4/prepcontract/#make-a-new-directory-hierarchy-for-lab-4","title":"Make a new directory hierarchy for Lab 4","text":"<ol> <li> <p>Make a fresh directory structure and change in to it:</p> <pre><code>mkdir -p ${LAB_WORKDIR}/lab4/{environment,workload/play} &amp;&amp; cd ${LAB_WORKDIR}/lab4\n</code></pre> </li> </ol>"},{"location":"lab/cloud/lab4/prepcontract/#create-a-pod-descriptor-to-specify-the-application-workload","title":"Create a Pod descriptor to specify the application workload","text":"<ol> <li> <p>Switch to the directory with will hold a Pod descriptor:</p> <pre><code>cd workload/play\n</code></pre> </li> <li> <p>Create the Pod descriptor::</p> <pre><code>cat &lt;&lt; EOF &gt; play.yml    \n  play:\n    resources:\n      - apiVersion: v1\n        kind: Pod\n        metadata:\n          name: busybox\n        spec:\n          containers:\n          - name: main\n            image: docker.io/library/busybox@sha256:3614ca5eacf0a3a1bcc361c939202a974b4902b9334ff36eb29ffe9011aaad83\n            command: [\"/bin/sh\", \"-c\"]\n            args:\n            - mkdir -p /data/cloudlabs ;\n              env | tee -a /data/cloudlabs/env.out ;\n              cat /data/cloudlabs/env.out ;\n              head -20 /data/cloudlabs/env.out ;\n              head -20 /data/cloudlabs/greetings.out ;\n              tail -20 /data/cloudlabs/greetings.out ;\n              while true ;\n              do echo Hi \\${name:-World} the time is \\$(date) | tee -a /data/cloudlabs/greetings.out ;\n              sleep \\${interval:-60} ; \n              done\n            envFrom:\n            - configMapRef:\n                name: contract.config.map\n                optional: false\n            volumeMounts: \n              - mountPath: /data\n                name: data-vol\n                readOnly: false\n          restartPolicy: Never\n          volumes:\n            - hostPath:\n                path: /mnt/data\n                type: Directory\n              name: data-vol\nEOF\n</code></pre> </li> <li> <p>Display the file's content.</p> <pre><code>cat play.yml\n</code></pre> </li> </ol>"},{"location":"lab/cloud/lab4/prepcontract/#create-a-convenience-script-to-encrypt-the-workload-section","title":"Create a convenience script to encrypt the workload section","text":"<ol> <li> <p>Backup one directory level:</p> <pre><code>cd ..\n</code></pre> </li> <li> <p>Create this convenience script to encrypt the workload portion of the contract:</p> <pre><code>cat &lt;&lt; EOF &gt; flow.workload\n# Create the workload section of the contract and add the contents in the workload.yaml file.\n\nWORKLOAD_PLAIN=./workload.yaml.plaintext\nWORKLOAD=workload.yaml\n\necho \"  type: workload\n  volumes:\n    data:\n      filesystem: ext4\n      mount: /mnt/data\n      seed: seed-supplied-by-workload-persona\n\\$(cat play/play.yml)\" &gt; \\${WORKLOAD_PLAIN}\n\n# Download certificate to encrypt contract for Hyper Protect Container Runtime:\nHPCR_rev=12\nCONTRACT_KEY=./ibm-hyper-protect-container-runtime-1-0-s390x-\\${HPCR_rev}-encrypt.crt\ncurl https://cloud.ibm.com/media/docs/downloads/hyper-protect-container-runtime/ibm-hyper-protect-container-runtime-1-0-s390x-\\${HPCR_rev}-encrypt.crt &gt; \\${CONTRACT_KEY}\n\n\n# Use the following command to create a random password:\nPASSWORD_WORKLOAD=\"\\$(openssl rand 32 | base64 \\${LAB_WRAP})\"\n\n# Use the following command to encrypt password with the Hyper Protect Container Runtime Contract Encryption Key:\nENCRYPTED_WORKLOAD_PASSWORD=\"\\$(echo -n \"\\$PASSWORD_WORKLOAD\" | base64 -d | openssl rsautl -encrypt -inkey \\$CONTRACT_KEY -certin | base64 \\${LAB_WRAP})\"\n\n# Use the following command to encrypt the workload.yaml file with a random password:\nENCRYPTED_WORKLOAD=\"\\$(echo -n \"\\$PASSWORD_WORKLOAD\" | base64 -d | openssl enc -aes-256-cbc -pbkdf2 -pass stdin -in \"\\$WORKLOAD_PLAIN\" | base64 \\${LAB_WRAP})\"\n\n# Use the following command to get the encrypted section of the contract:\nWORKLOAD_ENCRYPTED=\"hyper-protect-basic.\\${ENCRYPTED_WORKLOAD_PASSWORD}.\\${ENCRYPTED_WORKLOAD}\"\n\necho \"\"\necho \"See `pwd`/workload.yaml.plaintext to see what was encrypted for the workload section of your contract\"\necho \"\"\n\necho \"\\$WORKLOAD_ENCRYPTED\" &gt; ../\\$WORKLOAD\nEOF\n</code></pre> </li> </ol>"},{"location":"lab/cloud/lab4/prepcontract/#create-a-convenience-script-to-encrypt-the-environment-section","title":"Create a convenience script to encrypt the environment  section","text":"<ol> <li> <p>Change to the directory used for the environment section display it:</p> <pre><code>cd ../environment &amp;&amp; pwd\n</code></pre> </li> <li> <p>Create this convenience script to encrypt the environment portion of the contract:</p> <pre><code>cat &lt;&lt; EOF &gt; flow.env\n# Create the env section of the contract and add the contents in the env.yaml file.\nENV_PLAIN=\"./env.yaml.plaintext\"\nENV=\"env.yaml\"\n\necho \"  type: env\n  logging:\n    logDNA:\n      hostname: \\${LOG_HOSTNAME}\n      ingestionKey: \\${LOG_INGESTION_KEY}\n      port: 6514\n  env:\n    name: Lab 4 Student\n    interval: \\\"30\\\"\n  volumes:\n    data:\n      seed: seed-supplied-by-env-persona\" &gt; \\${ENV_PLAIN}\n\ncat ./pubSigningKey.yaml &gt;&gt; \\${ENV_PLAIN}\n\n# Download certificate to encrypt contract for Hyper Protect Container Runtime:\nHPCR_rev=12\nCONTRACT_KEY=./ibm-hyper-protect-container-runtime-1-0-s390x-\\${HPCR_rev}-encrypt.crt\ncurl https://cloud.ibm.com/media/docs/downloads/hyper-protect-container-runtime/\\$CONTRACT_KEY &gt; \\$CONTRACT_KEY\n\n\n# Use the following command to create a random password:\nPASSWORD_ENV=\"\\$(openssl rand 32 | base64 \\${LAB_WRAP})\"\n\n#  Use the following command to encrypt password with the Hyper Protect Container Runtime Contract Encryption Key:\nENCRYPTED_ENV_PASSWORD=\"\\$(echo -n \"\\$PASSWORD_ENV\" | base64 -d | openssl rsautl -encrypt -inkey \\$CONTRACT_KEY -certin | base64 \\${LAB_WRAP} )\"\n\n# Use the following command to encrypt env.yaml with a random password:\nENCRYPTED_ENV=\"\\$(echo -n \"\\$PASSWORD_ENV\" | base64 -d | openssl enc -aes-256-cbc -pbkdf2 -pass stdin -in \"\\$ENV_PLAIN\" | base64 \\${LAB_WRAP})\"\n\n# Use the following command to get the encrypted section of the contract:\nENV_ENCRYPTED=\"hyper-protect-basic.\\${ENCRYPTED_ENV_PASSWORD}.\\${ENCRYPTED_ENV}\"\n\necho \"\"\necho \"See `pwd`/env.yaml.plaintext to see what was encrypted for the env section of your contract\"\necho \"\"\n\necho \"\\$ENV_ENCRYPTED\" &gt; ../\\$ENV\nEOF\n</code></pre> </li> </ol>"},{"location":"lab/cloud/lab4/prepcontract/#create-convenience-scripts-to-facilitate-signing-the-contract","title":"Create convenience scripts to facilitate signing the contract","text":"<ol> <li> <p>Move up one directory level:</p> <pre><code>cd .. &amp;&amp; pwd\n</code></pre> </li> <li> <p>Create the following convenience script that will create an RSA key pair that you will use to sign the contract. </p> <pre><code>cat &lt;&lt; EOF &gt; flow.prepare\n# Use the following command to generate key pair to sign the contract \nopenssl genrsa -aes128 -passout pass:test1234 -out private.pem 4096\nopenssl rsa -in private.pem -passin pass:test1234 -pubout -out public.pem\n\n# The following command is an example of how you can get the signing key:\nkey=\\$(awk -vRS=\"\\n\" -vORS=\"\\\\\\\\\\n\" '1' public.pem)\n# echo \"  signingKey: \\\"\\${key%\\\\\\\\n}\\\"\" &gt; environment/pubSigningKey.yaml\nprintf \"%s\" \"  signingKey: \\\"\\${key%\\\\\\\\n}\\\"\" &gt; environment/pubSigningKey.yaml\nEOF\n</code></pre> </li> <li> <p>Create the following convenience script that will sign the encrypted contract.</p> <pre><code>cat &lt;&lt; EOF &gt; flow.signature\n# combine workload and environment\ncat workload.yaml env.yaml | tr -d '\\n' &gt; contract.yaml\n\n# Sign the combination from workload and env being approved\necho \\$( cat contract.yaml | openssl dgst -sha256 -sign private.pem -passin pass:test1234 | openssl enc -base64) | tr -d ' ' &gt; signature.yaml\n\n# Create user data and add signature:\necho \"workload: \\$(cat workload.yaml)\nenv: \\$(cat env.yaml)\nenvWorkloadSignature: \\$(cat signature.yaml)\" &gt; user_data.yaml\n\necho \"\"\necho \"import `pwd`/user_data.yaml into User Data or copy and paste from below:\"\necho \"\"\n\ncat user_data.yaml\nEOF\n</code></pre> </li> </ol>"},{"location":"lab/cloud/lab4/prepcontract/#create-and-run-helper-script-to-produce-the-encrypted-and-signed-contract","title":"Create and run helper script to produce the encrypted and signed contract","text":"<ol> <li> <p>Create this helper script that you will use to create the signed and encrypted contract:</p> <pre><code>cat &lt;&lt; EOF &gt; makeContract\n. ./flow.prepare\ncd workload\n. ./flow.workload\ncd ../environment\n. ./flow.env\ncd ..\n. ./flow.signature\nEOF\n</code></pre> </li> <li> <p>Create the contract:</p> <pre><code>. ./makeContract\n</code></pre> </li> <li> <p>Display your contract data:</p> <pre><code>cat user_data.yaml\n</code></pre> </li> </ol> <p>Proceed to the next section to create your Hyper Protect Virtual Servers for IBM Cloud VPC instance.</p>"},{"location":"lab/cloud/prereqs/","title":"Overview and Pre-reqs","text":""},{"location":"lab/cloud/prereqs/#overview","title":"Overview","text":"<p>These labs provide a gentle introduction to the art of creating a contract for a Hyper Protect Virtual Servers instance. The contract you specify to a Hyper Protect Virtual Servers instance specifies the application workload you wish to run and the environmental characteristics such as where to send log messages from your instance.</p> <p>A best practice is to specify a contract that is encrypted and signed.  These labs start simple-  with an unsigned, plain text contract.  Such a contract would be hard to justify in a production environment, but is a great starting point for learning what is involved with creating a contract.</p> <p>Then each subsequent lab increases the complexity of the contract such that our final lab guides you to the best practice of creating an encrypted and signed contract.</p> <p>Caution- you may incur charges from IBM Cloud for activities performed in these labs </p> <p>You may incur charges for the artifacts created during the lab.  These charges are your responsibility.  Each lab ends with instructions to delete these lab artifacts in order to minimize any costs you might incur.</p> <p>The flow of the labs can be summarized as:</p> <ol> <li> <p>Create prerequisite resources on IBM Cloud such as a Virtual Private Cloud and an IBM Log Analysis instance.</p> </li> <li> <p>Create a Hyper Protect Virtual Server instance using a plain text contract.</p> </li> <li> <p>Create a Hyper Protect Virtual Server instance where the workload provider encrypts their portion of the contract but the environment provider provides their portion in plain text.</p> </li> <li> <p>Create a Hyper Protect Virtual Server instance where both the workload provider encrypts their portion of the contract and the environment provider encrypts their portion of the contract.</p> </li> <li> <p>Create a Hyper Protect Virtual Server instance where both portions of the contract are encrypted and then signed by the environment provider.</p> </li> <li> <p>Delete the resources created during the labs.</p> </li> </ol>"},{"location":"lab/cloud/prereqs/#prerequisites","title":"Prerequisites","text":""},{"location":"lab/cloud/prereqs/#ibm-cloud-account","title":"IBM Cloud account","text":"<p>These labs assume that you have an IBM Cloud account and have the authorization needed to create the artifacts required by the labs.</p> <p>All IBM Cloud resources are created with the IBM Cloud web UI from your web browser.</p> <p>You must be able to create the following IBM Cloud artifacts in order to complete this lab.</p> Resource Comments IBM Log Analysis required as a target for log messages from your Hyper Protect Virtual Server instances Virtual Private Cloud Must reside in London, Sao Paulo, Tokyo, Toronto or Washington, D.C Subnets for VPC created when you create your Virtual Private Cloud Public gateways for VPC needed so that your instances can communicate with your IBM Log Analysis instance Access control lists for VPC created automatically when you create your Virtual Private Cloud Security groups for VPC created automatically when you create your Virtual Private Cloud Virtual server instances for VPC The resource type of your Hyper Protect Virtual Server instances Block storage volumes for VPC Used to provide persistent disk storage Hyper Protect Virtual Servers for Classic Optional- can be used as a prep system if you can provide an SSH key pair Virtual Servers for Classic Optional- can be used as a prep system if you cannot provide an SSH key pair"},{"location":"lab/cloud/prereqs/#prep-system-to-prepare-contracts-for-hyper-protect-virtual-server-instances","title":"Prep system to prepare contracts for Hyper Protect Virtual Server instances","text":"<p>You must have access to a Linux or MacOS system in order to create the contracts required by the lab.</p> <p>If your laptop or workstation is not running Linux or MacOS there are some alternatives available to you:</p> <ul> <li> <p>If you have a Windows system you can try to use the Windows Subsystem for Linux or you can create a Linux server elsewhere. </p> </li> <li> <p>We provide instructions on how to create a Linux server using Hyper Protect Virtual Server for Classic in a subsequent section of the lab. This is a server running on LinuxONE servers in IBM Cloud and uses IBM's earlier, Secure Service Container-based implementation of Confidential Computing.  You may be able to provision this for free- each account can have two free instances at any point in time. You must provide the public key portion of your SSH key pair when provisioning this. </p> <p>An attempt at clarification</p> <p>This lab focuses on the newer, Secure Execution-based implementation of Hyper Protect Virtual Servers for IBM Cloud VPC- not the earlier, Secure Service Container-based implementation of Hyper Protect Virtual Servers for Classic that we are suggesting may be used as your prep system.  We'd prefer that you use your own system for the prep system if possible.  Why? Because it will be easier for you to save the lab artifacts that way.  At the risk of confusing you, we suggest Hyper Protect Virtual Servers for Classic as a prep system for a key reason-  you can (probably) provision one for free! </p> </li> <li> <p>If you cannot provide your SSH key pair's public key portion, you can provision a Linux server using Virtual Server for Classic that will enable access via a password instead of an SSH key.  This is a server running on x86 architecture and you may incur charges for this service.</p> </li> </ul>"},{"location":"lab/cloud/prereqs/gateway/","title":"Create a public gateway","text":"<p>You need a public gateway so that the Hyper Protect Virtual Servers for IBM Cloud VPC instances that you will create in the labs can send log messages to your IBM Log Analysis instance which is running outside of your VPC.</p> <ol> <li> <p>Click the Public gateways link on the left and you should see that you currently have no public gateways defined.</p> </li> <li> <p>Click the blue Create button in the upper right:</p> </li> </ol> <p></p> <p>Choose the correct geography (not shown in the screen snippet below), region, and zone.  Give your public gateway a name, we've chosen lab-was-pubgw. Ensure that your virtual private cloud is selected, and then click the blue Create button.</p> <p></p> <p>As shown below, you'll be shown your new public gateway.  Note that in the Attached subnet column there is no entry. You need to attach a subnet to this public gateway.  To do so, click the vertical dots icon on the right and choose the Attach popup menu item, as indicated here:</p> <p></p> <p>Ensure that your subnet is selected and click the blue Attach button:</p> <p></p> <p>You should see that your subnet is now attached to your public gateway:</p> <p></p> <p>Click the Next link at the lower right to go to your next task, which is to create an IBM Log Analysis instance.</p>"},{"location":"lab/cloud/prereqs/helperserver/","title":"(Optional) Create a server to use to create contracts","text":"<p>If you already have access to a Linux system or to a MacOS system you may skip this step.  If you have a Windows system and have the expertise to translate these instructions into something workable on Windows, you may skip this step.  </p> <p>The lab authors have tested the instructions on Linux and macOS.</p> <p>If you do not have a suitable system already or would like to, you can create a Hyper Protect Virtual Servers Classic instance for free that will provide an Ubuntu system for you.  You will need to provide the public key portion of an SSH key pair when you provision this instance. </p> <p>NOTE: Whether you already have a suitable system or choose to create one with the subsequent directions below, we will refer to this system as your prep system in the lab instructions, since you will use this system to prepare your contracts.</p> <p>To create this instance: </p> <ol> <li> <p>Click on the Catalog link at the top of the page.</p> </li> <li> <p>Start typing Hyper Protect Virtual Servers in the search box until Hyper Protect Virtual Servers for Classic appears in the search results and then select it.</p> </li> <li> <p>Choose the Lite plan- select the region and zone you prefer, we prefer to use the same zone that we used for our virtual private cloud.  (This instance will not be running inside a VPC)</p> </li> <li> <p>Provide your SSH public key.</p> </li> </ol> <p>If you have created a Hyper Protect Virtual Server for Classic instance to use as your prep system, you need to install two packages:</p> <ol> <li> <p>Log in to your instance via ssh.</p> </li> <li> <p>Enter the following command:</p> <pre><code>apt install -y curl vim\n</code></pre> </li> </ol>"},{"location":"lab/cloud/prereqs/ibmlog/","title":"Create an IBM Log Analysis instance and save connection information","text":""},{"location":"lab/cloud/prereqs/ibmlog/#create-an-ibm-log-analysis-instance","title":"Create an IBM Log Analysis instance","text":"<p>Note: You may use an existing IBM Log Analysis instance if you already have one.  It can be in any IBM Cloud region and availability zone.  If you are creating a new IBM Log Analysis instance for the lab, we suggest you create it in the same region and availability zone in which you created your virtual private cloud in the previous sections.</p> <ol> <li>Click the Catalog link at the top of your IBM Cloud web UI</li> <li>In the search box, start typing IBM Log Analysis until it appears in the list of search results</li> <li>Click on it in that list</li> </ol> <p></p> <p>Choose your location for the logging instance, the plan you prefer- the free Lite plan is sufficient for the labs- and accept the terms and conditions and then click the blue Create button:</p> <p></p> <p>You'll see a screen like below.  (The name of this IBM Log Analysis instance is the default name provided when we created it-  unlike the resources we're creating within our virtual private cloud, we're not concerned about following a naming convention for this resource).</p> <p></p> <p>Click the blue Open Dashboard button in the upper right.</p>"},{"location":"lab/cloud/prereqs/ibmlog/#retrieve-your-ibm-log-analysis-instances-ingestion-key","title":"Retrieve your IBM Log Analysis instance's ingestion key","text":"<p>Click the Install instructions icon (that looks like a question mark) in the lower left of your IBM Log Analysis dashboard:</p> <p></p> <p>In the window that opens up, click the icon highlighted below in order to copy your IBM Log Analysis instance's ingestion key into your clipboard.  Paste it into a safe place for use later in the lab.  Treat this ingestion key with care like you would a password, especially if you are using an already existing IBM Log Analysis instance. (You do have the ability to return to this screen to retrieve it later if you lose track of where you paste it).  See the below screen snippet:</p> <p></p>"},{"location":"lab/cloud/prereqs/ibmlog/#retrieve-your-ibm-log-analysis-instances-host-name","title":"Retrieve your IBM Log Analysis instance's host name","text":"<ol> <li>Scroll down on this same window and choose rsyslog</li> <li>Use copy and paste to save the information that corresponds to the information highlighted in the screen snippet below.  (This information will not be highlighted on your screen until you select it as we did prior to taking this screenshot). You will be using this information later in the labs.  This information does not have to be kept secret.</li> </ol> <p>You do not have to follow the instructions that the popup window is giving you, you only needed to copy the information as directed here in the lab. You can click the X in the upper right corner of the popup window or just click outside of the popup window so that it goes away.</p> <p>Click the Next link in the lower right to continue.</p>"},{"location":"lab/cloud/prereqs/prepsystem/","title":"Establish a prep system for creating contracts","text":"<p>Here are our suggestions for what to use for your prep system.  When you find a solution that works for you, you can move on the next section by clicking the Next link at the lower right of the page.</p> <p>The lab authors have tested the lab instructions using the following prep systems:</p> Operating System Architecture Comments MacOS Apple M1 Silicon Linux Apple M1 Silicon running as Ubuntu guest under MacOS Linux s390x Hyper Protect Virtual Server for Classic free instance on IBM Cloud Linux x86-64 Virtual Server for Classic paid instance on IBM Cloud Windows 11 x86-64 using Windows Subsystem for Linux 2 with Ubuntu 22.04 installed"},{"location":"lab/cloud/prereqs/prepsystem/#use-your-workstation-if-it-is-running-linux-or-macos","title":"Use your workstation if it is running Linux or MacOS","text":"<p>If you already have access to a Linux system or to a MacOS system we encourage you to use it as your prep system.  prep system is a term we;ve coined in these labs to refer to the system on which you will create the contracts for your Hyper Protect Virtual Servers instance. This could certainly be your laptop or workstation if you are running a Linux distribution or MacOS.</p>"},{"location":"lab/cloud/prereqs/prepsystem/#if-you-are-running-windows","title":"If you are running Windows","text":"<p>If you have a Windows system you could try one of the following options.</p> <p>Caution</p> <p>Although it should be a viable option, Option 1 has not been tested by the lab instructors.</p> <ol> <li> <p>You could run a Linux virtual machine under a virtualization hypervisor such as VMware or VirtualBox</p> </li> <li> <p>You could run the Windows Subsystem for Linux under more recent versions of Windows such as Windows 10 or Windows 11</p> </li> </ol> <p>If your own laptop or workstation is not running Linux or MacOS or if you have Windows but are unable or unwilling to try one of the two suggestions from above, keep reading..</p>"},{"location":"lab/cloud/prereqs/prepsystem/#create-a-hyper-protect-virtual-server-for-classic-instance-on-ibm-cloud","title":"Create a Hyper Protect Virtual Server for Classic instance on IBM Cloud","text":"<p>If you do not have a suitable system already or would like to, you can create a Hyper Protect Virtual Servers Classic instance for free that will provide an Ubuntu system for you.  You will need to provide the public key portion of an SSH key pair when you provision this instance. </p> <p>NOTE: Whether you already have a suitable system or choose to create one with the directions below, we will refer to this system as your prep system in the lab instructions, since you will use this system to prepare your contracts.</p> <p>To create this instance: </p> <p>We beg your pardon</p> <p>If you are reading this, it means that we have yet to add some screenshots to these instructions.  Hopefully the text is sufficient to guide you to successful completion of this task.  If not, let us know.</p> <ol> <li> <p>Click on the Catalog link at the top of the page.</p> </li> <li> <p>Start typing Hyper Protect Virtual Servers in the search box until Hyper Protect Virtual Servers for Classic appears in the search results and then select it.</p> </li> <li> <p>Choose the Lite plan- select the region and zone you prefer, we prefer to use the same zone that we used for our virtual private cloud.  (This instance will not be running inside a VPC)</p> </li> <li> <p>Provide your SSH public key.</p> </li> </ol> <p>Once your Hyper Protect Virtual Server for Classic instance is available, you need to install two packages:</p> <ol> <li> <p>Log in to your instance via ssh.</p> </li> <li> <p>Enter the following command:</p> <pre><code>apt install -y curl vim\n</code></pre> </li> </ol>"},{"location":"lab/cloud/prereqs/prepsystem/#create-a-virtual-server-for-classic-instance-on-ibm-cloud","title":"Create a Virtual Server for Classic instance on IBM Cloud","text":"<p>If for some reason you cannot create an SSH key pair, a Virtual Server for Classic instance allows you to log in with a password that it creates for you at provisioning time.  Using a password for logon is less secure than using an SSH key, and this service does not appear to offer a free tier, so this our suggestion of last resort.  </p> <p>The steps to create an instance are:</p> <ol> <li> <p>From the IBM Cloud Catalog, search for Virtual Servers for Classic and then select it.</p> </li> <li> <p>It doesn't matter where you provision it.  This instance does not run in your VPC.</p> </li> <li> <p>Choose the Ubuntu 22.04 operating system.</p> </li> <li> <p>On the provisioning screen, leave the SSH key field blank.</p> </li> <li> <p>Click the Create button to create the instance.</p> </li> </ol> <p>After the instance is provisioned:</p> <ol> <li> <p>From the Resource List, expand the Compute category.</p> </li> <li> <p>Select your new instance</p> </li> <li> <p>Note your instance's public IP address</p> </li> <li> <p>Click the tab for passwords and click the icon to show your root userid's password</p> </li> </ol> <p>5  Log in with this command:  <code>ssh -l root &lt;your instance's public IP&gt;</code> </p> <ol> <li>Enter root's password when prompted </li> </ol>"},{"location":"lab/cloud/prereqs/setup/","title":"Set up environment variables used throughout the four IBM Cloud-based labs","text":"<p>A note about support for these labs</p> <p>The official documentation states often to use an Ubuntu system to enter commands for contract preparation.  We have written the lab to work on Linux and MacOS.   </p> <p>There are so many Linux distributions that it is impossible to test on all of them, but we think that this lab should work on many distributions besides Ubuntu.  We will attempt to help if you are having problems on a Linux distribution other than Ubuntu, but we reserve the right to ask you to use an Ubuntu system.</p> <p>Similarly, since we have Apple laptops we wrote the lab to work on MacOS as well.  Since it works for us on MacOS we suspect it could work for you as well, but, again, we reserve the right to ask you to use an Ubuntu system if you ask for our help in troubleshooting.</p> <p>These labs are for educational purposes at a beginning or intermediate level and do not demonstrate all product features, and may demonstrate practices not suitable for a production environment.  Usage of these labs for any purposes other than education is at your own discretion and risk. </p> <p>Support for this lab is solely in an educational context, and solely from the lab authors on a best-effort basis. In other words, there is no guarantee of timeliness of response from the authors to inquiries, nor even a guarantee that the authors will ever resolve any problems you have with these labs.  This informal support is outside of any official IBM support channels.</p> <p>On your prep system, there are some environment variables that will be used in the four labs.</p> Variable name Description LAB_WORKDIR working directory for contract preparation LAB_TAR The variant of tar used on the prep system LAB_WRAP Wrap arguments to base64 on Linux; typically unset on MacOS LOG_INGESTION_KEY The ingestion key for your IBM Log Analysis instance LOG_HOSTNAME The hostname on IBM Cloud that hosts your IBM Log Analysis instance <p>Note</p> <p>Our instructions set these variables only for the duration of your terminal session.  If you do not finish the labs in one terminal session, then you will need to revisit this section to set these variables again when you resume.  Advanced shell users may be interested in setting these variables permanently in their shell if they plan to do the lab in more than one session, but setting this up is not covered here.</p>"},{"location":"lab/cloud/prereqs/setup/#set-lab_workdir","title":"Set LAB_WORKDIR","text":"<p>In order to avoid interference with other work, we want you to create a brand new directory for these labs- each of the four labs will use a subdirectory underneath the new directory.</p> <ol> <li> <p>This next instruction sets the environment variable to ${HOME}/cloudlabs.</p> <pre><code>LAB_WORKDIR=${HOME}/cloudlabs\n</code></pre> </li> <li> <p>This next set of commands will either successfully create this new directory and then change to it, or it will warn you to try again.  (If you are warned, retry step 1 above with a different name and then try these commands again.)</p> <pre><code>if [[ -e ${LAB_WORKDIR} ]]; then\necho ${LAB_WORKDIR} already exists\n   echo \"  This may be appropriate if you are\"\necho \"  resuming these labs in a new terminal session\"\necho \"  and have already created this directory structure\"\necho\necho Otherwise, choose a new value for LAB_WORKDIR\n   echo \"  or rename ${LAB_WORKDIR}\"\necho \"  and try again\"\nelse\nmkdir ${LAB_WORKDIR} &amp;&amp; \\\necho Fresh lab working directory created \\\n&amp;&amp; cd ${LAB_WORKDIR} &amp;&amp; \\\necho Changed to working directory ${LAB_WORKDIR}\nfi\n</code></pre> </li> </ol>"},{"location":"lab/cloud/prereqs/setup/#set-log_tar","title":"SET LOG_TAR","text":"<p>On most Linux distributions you will have tar and it will be fine.</p> <p>On most MacOS systems the default tar command is less desirable than a version of tar provided by the GNU project, called gtar. gtar is preferred for the labs.</p> <p>Follow these instructions on your prep system.  The environment variables set by these instructions are in effect only for the terminal session in which you enter the commands. If you finish the labs in one sitting within the same terminal session, you will only have to repeat these instructions once.  Otherwise, you can repeat these instructions as necessary.</p> <p>Note</p> <p>The following set of commands will set an environment variable that will be used throughout the labs. It will point to either tar or gtar or it will print an error message if it cannot find either one.</p> <pre><code>if [[ -n \"${LAB_TAR}\" ]]; then\nfor i in {1..6} ; do echo '******************' ; done\necho ''\necho \"CAUTION: Prior value of LAB_TAR was ${LAB_TAR}\"\necho \"   Take note of this value in the unlikely event it was\"\necho \"   already set by another application on your system\"\necho \"   in which case you may need to restore this value later\"\necho ''\nfor i in {1..6} ; do echo '******************' ; done\nfi\nunset LAB_TAR &amp;&amp; which tar 1&gt;/dev/null 2&gt;&amp;1 &amp;&amp; LAB_TAR=tar\nwhich gtar 1&gt;/dev/null 2&gt;&amp;1 &amp;&amp; LAB_TAR=gtar\necho ''\nif [[ -z \"${LAB_TAR}\" ]]; then echo \"ERROR:  neither tar nor gtar was found\" else\necho You will use ${LAB_TAR} for the labs\nfi\n</code></pre>"},{"location":"lab/cloud/prereqs/setup/#set-lab_wrap-if-necessary","title":"Set LAB_WRAP if necessary","text":"<p>The following set of commands will set an environment variable that will be used throughout the labs if the base64 command supports the wrap option. (Typically, the wrap option will be supported on Linux systems but not on MacOS.)</p> <pre><code>if [[ -n \"${LAB_WRAP}\" ]]; then\nfor i in {1..6} ; do echo '******************' ; done\necho ''\necho \"CAUTION: Prior value of LAB_WRAP was ${LAB_WRAP}\"\necho \"   Take note of this value in the unlikely event it was\"\necho \"   already set by another application on your system\"\necho \"   in which case you may need to restore this value later\"\necho ''\nfor i in {1..6} ; do echo '******************' ; done\nfi\nLAB_WRAP=\"--wrap 0\"\necho test | base64 ${LAB_WRAP} 1&gt;/dev/null 2&gt;&amp;1 || unset LAB_WRAP if [[ -z \"${LAB_WRAP}\" ]]; then\necho \"No wrap argument to base64 will be used in the labs\"\nelse  echo \"wrap argument ${LAB_WRAP} to base64 will be used in the labs\"\nfi\n</code></pre>"},{"location":"lab/cloud/prereqs/setup/#set-log_ingestion_key","title":"Set LOG_INGESTION_KEY","text":"<p>This command differs based on whether or not you are using bash or zsh.  If you are unsure of which shell you are using, enter the command <code>echo $0</code> from your shell.</p> <ol> <li> <p>Set an environment variable for your IBM Log Analysis ingestion key. You saved this somewhere safe earlier in the lab.  If you lost track of it, revisit the section Create an IBM Log Analysis instance for the steps to retrieve it. Enter the command appropriate to your shell and you will be prompted to enter your IBM Log Analysis INgestion Key.</p> bashzsh <pre><code>read -sp \"Log Ingestion Key: \" LOG_INGESTION_KEY &amp;&amp; echo\n</code></pre> <pre><code>read -s \"LOG_INGESTION_KEY?Log Ingestion Key: \" &amp;&amp; echo\n</code></pre> </li> </ol>"},{"location":"lab/cloud/prereqs/setup/#set-log_hostname","title":"Set LOG_HOSTNAME","text":"<p>This command differs based on whether or not you are using bash or zsh.  If you are unsure of which shell you are using, enter the command <code>echo $0</code> from your shell.</p> <ol> <li> <p>Set an environment variable for the hostname of your IBM Log Analysis instance. You saved this somewhere safe earlier in the lab. If you lost track of it, revisit the section Create an IBM Log Analysis instance for the steps to retrieve it. Enter the command appropriate for your shell and you will be prompted to enter the hostname of your IBM Log Analysis instance.</p> bashzsh <pre><code>read -p \"Log Hostname: \" LOG_HOSTNAME\n</code></pre> <pre><code>read \"LOG_HOSTNAME?Log Hostname: \"\n</code></pre> </li> </ol> <p>Click the Next link in the lower right to begin the first lab.</p>"},{"location":"lab/cloud/prereqs/setup2/","title":"Set up environment variables used throughout the four IBM Cloud-based labs","text":"<p>On your prep system, there are three more environment variables that will be used in the four labs.</p> Variable name Description LAB_WORKDIR working directory for contract preparation LOG_INGESTION_KEY The ingestion key for your IBM Log Analysis instance LOG_HOSTNAME The hostname on IBM Cloud that hosts your IBM Log Analysis instance <p>Note</p> <p>These variables are set for the duration of your terminal session.  If you do not finish the labs in one terminal session, then you will need to revisit this section to set these variables again when you resume.</p>"},{"location":"lab/cloud/prereqs/setup2/#set-lab_workdir","title":"Set LAB_WORKDIR","text":"<p>In order to avoid interference with other work, we want you to create a brand new directory for these labs- each of the four labs will use a subdirectory underneath the new directory.</p> <ol> <li> <p>This next instruction sets the environment variable to ${HOME}/cloudlabs.</p> <pre><code>LAB_WORKDIR=${HOME}/cloudlabs\n</code></pre> </li> <li> <p>This next set of commands will either successfully create this new directory and then change to it, or it will warn you to try again.  (If you are warned, retry step 1 above with a different name and then try these commands again.)</p> <pre><code>if [[ -e ${LAB_WORKDIR} ]]; then\necho ${LAB_WORKDIR} already exists\n   echo \"  This may be appropriate if you are\"\necho \"  resuming these labs in a new terminal session\"\necho \"  and have already created this directory structure\"\necho\necho Otherwise, choose a new value for LAB_WORKDIR\n   echo \"  or rename ${LAB_WORKDIR}\"\necho \"  and try again\"\nelse\nmkdir ${LAB_WORKDIR} &amp;&amp; \\\necho Fresh lab working directory created \\\n&amp;&amp; cd ${LAB_WORKDIR} &amp;&amp; \\\necho Changed to working directory ${LAB_WORKDIR}\nfi\n</code></pre> </li> </ol>"},{"location":"lab/cloud/prereqs/setup2/#set-log_ingestion_key","title":"Set LOG_INGESTION_KEY","text":"<ol> <li> <p>Set an environment variable for your IBM Log Analysis ingestion key. You saved this somewhere safe earlier in the lab.  If you lost track of it, revisit the section Create an IBM Log Analysis instance for the steps to retrieve it.</p> bashzsh <pre><code>read -sp \"Log Ingestion Key: \" LOG_INGESTION_KEY &amp;&amp; echo\n</code></pre> <pre><code>read -s \"LOG_INGESTION_KEY?Log Ingestion Key: \" &amp;&amp; echo\n</code></pre> </li> </ol>"},{"location":"lab/cloud/prereqs/setup2/#set-log_hostname","title":"Set LOG_HOSTNAME","text":"<ol> <li> <p>Set an environment variable for the hostname of your IBM Log Analysis instance. You saved this somewhere safe earlier in the lab. If you lost track of it, revisit the section Create an IBM Log Analysis instance for the steps to retrieve it.</p> bashzsh <pre><code>read -p \"Log Hostname: \" LOG_HOSTNAME\n</code></pre> <pre><code>read \"LOG_HOSTNAME?Log Hostname: \"\n</code></pre> </li> </ol> <p>Click the Next link in the lower right to begin the first lab.</p>"},{"location":"lab/cloud/prereqs/vpc/","title":"Create a Virtual Private Cloud","text":"<p>We advise you to create a new Virtual Private Cloud for these labs</p> <p>These labs assume you are starting with an account that has no Virtual Private Cloud (VPC) resources defined when you start the lab.  If your account has existing VPC resources then it is up to you to decide whether to use those existing resources when available or whether to create new resources for all parts of the labs. Using existing resources may help to avoid incurring costs, but at the risk of inadvertently impacting existing users of these resources- an essential consideraton if these resources are being used in production!  You'd also have to take extra care when deleting resources at the end of the labs.</p> <p>Navigate to IBM Cloud and log in to the IBM Cloud Web UI.</p> <p>Click on the Navigation Menu icon (often informally referred to as the \"hamburger\" icon) in the upper left of the IBM Cloud Web UI.  From there, navigate to VPC Infrastructure and VPC Layout as shown here:</p> <p></p> <p>The labs are written with the assumption that all resources used for the labs are created in the lab and then deleted at the end of the lab.  You'll have to tailor your implementation of the lab directions appropriately if you do use existing resources.</p> <p>Here's a screen snippet showing the VPC Layout screen when the account has no existing VPC infrastructure at the start of the labs:</p> <p></p> <p>Click the Create a VPC link.</p> <p>Choose one of the following five locations which support Hyper Protect Virtual Servers in IBM Cloud VPC:  London, Sao Paulo, Tokyo, Toronto or Washington, D.C.  These labs' instructions and screen snippets will show the Washington, D.C. region (us-east) in use, but you may use one of the other aforementioned regions as well- tailor your implementation of the directions appropriately if you do. </p> <p>The screen snippet below shows after we've chosen the Washington DC region in the North America geography and given the new VPC the name lab-was-vpc.  Throughout the labs we will often be using the naming convention lab-region-resource type-optional description. If you perform the lab in the Washington, D.C., region you will be able to use the instructions almost verbatim.  If you choose to use another region you can choose to use our naming convention and tailor the  portion of the name appropriately, or you may choose any other naming convention that suits you. <p></p> <p>Scroll down to see the list of subnets offered to you-  by default you will be offered three subnets- one for each of the three availability zones within a region.  For our labs, in an effort to minimize costs, we've deleted two of the three subnets as we will limit our lab activities to a single availability zone.  If you wish to do likewise then click the rightmost icon of the two subnets you want to get rid of, as indicated in the below screen snippet:</p> <p></p> <p>Your subnet section will look similar to this if you choose to work with only one subnet:</p> <p></p> <p>You are now ready to click the blue Create virtual private cloud button on the lower right of your page. If this button is not enabled then you have probably forgot to enter some required information such as a name for your VPC:</p> <p></p> <p>After clicking the button, your new VPC will be created and you'll be taken to a screen like this.  Notice that a Default Access Control List (ACL) and a Default Security Group will be created for you, both of which will have meaningless randomly-generated names.  You can accept them as-is for the labs.</p> <p></p> <p>Click the Next link at the lower right to create a public gateway within your new VPC.</p>"},{"location":"lab/grep11/","title":"Lab Overview","text":""},{"location":"lab/grep11/#lab-environment-topology","title":"Lab environment topology","text":"Confidential Computing Lab Architecture <p>Hyper Protect Virtual Servers 2.1.6 provides an IBM-provided and -supported Secure Execution-enabled KVM image that runs on a Linux LPAR on an IBM Z or LinuxONE server. </p> <p>Hyper Protect Virtual Servers allows you to specify your workload via a \"contract\" that you define. </p> <p>Within the contract you specify an OCI-compliant image that provides your workload.</p> <p>For our lab this LPAR is running RHEL 8.5.  You can use any distribution on IBM Z or LinuxONE that supports Secure Execution- i.e., recent versions of Ubuntu and SUSE as well as RHEL.</p> <p>The Hyper Protect Virtual Servers 2.1.6 product provides a component, Crypto Express Network API for Secure Execution Enclaves (CENA4SEE) 1.1.2, that runs as an appliance in a Secure Service Container (SSC) LPAR that has direct-attached Crypto Express cards.  CENA4SEE also provides a GREP11 Server OCI image that communicates with the CENA4SEE appliance. </p> <p>This enables GREP11 client code written to call the GREP11 Server API to  access the Crypto Express cards on the CENA4SEE SSC LPAR. The GREP11 client code can run from anywhere as long as it has network connectivity to the GREP11 Server.  The GREP11 Server can run anywhere as long as it has network connectivity to the CENA4SEE server.</p> <p>For our lab, The GREP11 client code will run in a KVM guest running Ubuntu 22.04 within our RHEL 8.5 Linux LPAR. Each student will start and use their own such guest. The GREP11 server will run in the same RHEL 8.5 Linux LPAR, and it will be a Secure Execution-enabled HPVS 2.1.6 KVM guest.  (All HPVS 2.1.6 guests are by definition enabled for Secure Execution, so in the remainder of the lab we may not repeat the full phrase \"Secure Execution-enabled HPVS 2.1.6 KVM guest\", but we used it here for emphasis). Each student will start and use their own such GREP11 server guest. </p> <p>Your HPVS 2.1.6 GREP11 Server guest will be configured to write log messages to an rsyslog service.  For the lab, you will configure this rsyslog service on the same Ubuntu guest that you are using for the GREP11 client code.</p> <p>A single SSC LPAR is used for the CENA4SEE server. Each student's HPVS 2.1.6 GREP11 Server will communicate with the CENA4SEE server- therefore, the instructors have already set up this server for you.</p> <p>During the lab you will log in to two servers: </p> <ol> <li> <p>The RHEL 8.5 host.  From here you will launch your Ubuntu KVM guest. You will also use your host login to define the \"contract\" that HPVS expects so that you can launch your HPVS 2.1.6 GREP11 Server</p> </li> <li> <p>You will log in to your Ubuntu KVM guest for configuring the rsyslog service and for running the GREP11 client code</p> </li> </ol> <p>You will not log in directly to your HPVS 2.1.6 GREP11 Server, nor to the CENA4SEE SSC LPAR, but you will make use of them via your GREP11 Client code.</p>"},{"location":"lab/grep11/#lab-logistics","title":"Lab logistics","text":"<p>Except for the RHEL Jumpbox, the systems used in the lab are in the IBM Washington Systems Center (WSC) in the WSC's private network. Access to the WSC private network is through a virtual private network (VPN) client running on the RHEL Jumpbox.  The instructors access each student's RHEL Jumpbox in order to log in via the VPN client.  Students access their jumpbox from a web browser- other than a modern web browser, no additional software is required on the student's laptop or workstation.</p> <p>During the lab, students will be directed to open two terminal windows on their jumpbox- one will be designated for working on the RHEL host and the other will be designated for working on their KVM standard Ubuntu guest. Two separate terminal profiles have been created on the jumpbox- one for the RHEL host and one for the KVM standard Ubuntu guest- which have different background and text colors which will help the student more easily differentiate between the two windows.  The student may wish to use a single terminal window with two tabs- one with each terminal profile- instead of two different windows.  It is fine to do so.</p>"},{"location":"lab/grep11/#terminal-profiles-we-have-defined-in-your-jumpbox","title":"Terminal profiles we have defined in your jumpbox","text":"<p>The terminal profile we have set up for you to run commands in the RHEL host looks like this:</p> <p></p> <p>The terminal profile we have set up for you to run commands in your Ubuntu KVM Guest looks like this:</p> <p></p> <p>You are free to change the look and feel of the terminal profiles to what suits you, but the lab is written with the assumption that you are using the profiles we have set up for you.  This matters only in that we may show images in the lab in an effort to help ensure you are working on the correct system when you are entering commands.</p>"},{"location":"lab/grep11/configureGrep11TestClient/","title":"Run GREP11 Client code","text":""},{"location":"lab/grep11/configureGrep11TestClient/#overview-of-this-section","title":"Overview of this section","text":"<p>You have done a lot of work in this lab, have learned so much, and yet have had so much fun!  It doesn't get any better than this!</p> <p>Let's recap the highlights:</p> <p>You configured an rsyslog service on your Ubuntu KVM guest</p> <p>You did the X509 work to enable communication between the GREP11 server and the rsyslog service.</p> <p>You did the X509 work to enable the GREP11 Server to communicate with the CENA4SEE server.</p> <p>You did the server side of the X509 work to enable the GREP11 Server to communicate with GREP11 clients</p> <p>You created the contract expected by HPVS 2.1.6.</p> <p>You successfully launched the GREP11 server as a Secure Execution-protected HPVS 2.1.6 KVM Guest!</p> <p>Your last task is to run some GREP11 client code to verify that everything is working from end-to-end!</p> <p>In this section you will:</p> <ol> <li> <p>Install Go on your Ubuntu KVM guest</p> </li> <li> <p>Download the GREP11 client code from GitHub</p> </li> <li> <p>Do the client side of the X509 work to enable communication between your GREP11 Server and this GREP11 client code.</p> </li> <li> <p>Modify the GREP11 client code to point to your GREP11 Server</p> </li> <li> <p>Run the GREP11 client code</p> </li> </ol>"},{"location":"lab/grep11/configureGrep11TestClient/#start-this-section-in-your-ubuntu-kvm-guest-session","title":"Start this section in your Ubuntu KVM guest session","text":"<p>This section starts out in your Ubuntu KVM guest, which is where you should be if you have been doing the lab in order in one sitting. </p> <p></p> <p>If you are not logged in, the command to log in is <code>ssh -p ${Student_SSH_Port} -l student 192.168.22.64</code></p>"},{"location":"lab/grep11/configureGrep11TestClient/#install-go","title":"Install Go","text":"<p>The Go language compiler is not installed on your system.  Prove that with this command:</p> <pre><code>go version\n</code></pre> <p>You'll be given some ideas on how to install it:</p> Output when go is not installed <pre><code>sudo snap install go         # version 1.19.5, or\nsudo apt  install golang-go  # version 2:1.18~0ubuntu2\nsudo apt  install gccgo-go   # version 2:1.18~0ubuntu2\nSee 'snap info go' for additional versions.\n</code></pre> <p>Please pick the second option to avoid breaking this lab's warranty  as that is the option the instructors used when creating the lab.</p> <pre><code>sudo apt install golang-go\n</code></pre> <p>Type Y when prompted to continue.  The output from the installation will look like this:</p> Output from installation of golang-go <pre><code>Reading package lists... Done\nBuilding dependency tree... Done\nReading state information... Done\nThe following additional packages will be installed:\n  bzip2 cpp cpp-11 fontconfig-config fonts-dejavu-core g++ g++-11 gcc gcc-11 gcc-11-base golang-1.18-go golang-1.18-src golang-src libasan6\n  libatomic1 libc-dev-bin libc-devtools libc6-dev libcc1-0 libcrypt-dev libdeflate0 libdpkg-perl libfile-fcntllock-perl libfontconfig1\n  libfreetype6 libgcc-11-dev libgd3 libgomp1 libisl23 libitm1 libjbig0 libjpeg-turbo8 libjpeg8 libmpc3 libnsl-dev libstdc++-11-dev libtiff5\n  libtirpc-dev libubsan1 libwebp7 libxpm4 linux-libc-dev manpages-dev pkg-config rpcsvc-proto\nSuggested packages:\n  bzip2-doc cpp-doc gcc-11-locales g++-multilib g++-11-multilib gcc-11-doc gcc-multilib make autoconf automake libtool flex bison gdb\n  gcc-doc gcc-11-multilib bzr | brz mercurial subversion glibc-doc debian-keyring bzr libgd-tools libstdc++-11-doc dpkg-dev\nThe following NEW packages will be installed:\n  bzip2 cpp cpp-11 fontconfig-config fonts-dejavu-core g++ g++-11 gcc gcc-11 gcc-11-base golang-1.18-go golang-1.18-src golang-go\n  golang-src libasan6 libatomic1 libc-dev-bin libc-devtools libc6-dev libcc1-0 libcrypt-dev libdeflate0 libdpkg-perl libfile-fcntllock-perl\n  libfontconfig1 libfreetype6 libgcc-11-dev libgd3 libgomp1 libisl23 libitm1 libjbig0 libjpeg-turbo8 libjpeg8 libmpc3 libnsl-dev\n  libstdc++-11-dev libtiff5 libtirpc-dev libubsan1 libwebp7 libxpm4 linux-libc-dev manpages-dev pkg-config rpcsvc-proto\n0 upgraded, 46 newly installed, 0 to remove and 12 not upgraded.\nNeed to get 127 MB of archives.\nAfter this operation, 592 MB of additional disk space will be used.\nDo you want to continue? [Y/n] Y\nGet:1 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x bzip2 s390x 1.0.8-5build1 [34.4 kB]\nGet:2 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x gcc-11-base s390x 11.3.0-1ubuntu1~22.04 [20.8 kB]\nGet:3 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x libisl23 s390x 0.24-2build1 [701 kB]\nGet:4 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x libmpc3 s390x 1.2.1-2build1 [47.7 kB]\nGet:5 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x cpp-11 s390x 11.3.0-1ubuntu1~22.04 [7848 kB]\nGet:6 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x cpp s390x 4:11.2.0-1ubuntu1 [27.7 kB]\nGet:7 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x fonts-dejavu-core all 2.37-2build1 [1041 kB]\nGet:8 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x fontconfig-config all 2.13.1-4.2ubuntu5 [29.1 kB]\nGet:9 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x libcc1-0 s390x 12.1.0-2ubuntu1~22.04 [46.3 kB]\nGet:10 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x libgomp1 s390x 12.1.0-2ubuntu1~22.04 [123 kB]\nGet:11 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x libitm1 s390x 12.1.0-2ubuntu1~22.04 [29.9 kB]\nGet:12 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x libatomic1 s390x 12.1.0-2ubuntu1~22.04 [9008 B]\nGet:13 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x libasan6 s390x 11.3.0-1ubuntu1~22.04 [2242 kB]\nGet:14 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x libubsan1 s390x 12.1.0-2ubuntu1~22.04 [967 kB]\nGet:15 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x libgcc-11-dev s390x 11.3.0-1ubuntu1~22.04 [825 kB]\nGet:16 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x gcc-11 s390x 11.3.0-1ubuntu1~22.04 [15.7 MB]\nGet:17 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x gcc s390x 4:11.2.0-1ubuntu1 [5118 B]\nGet:18 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x libc-dev-bin s390x 2.35-0ubuntu3.1 [20.0 kB]\nGet:19 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x linux-libc-dev s390x 5.15.0-60.66 [1338 kB]\nGet:20 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x libcrypt-dev s390x 1:4.4.27-1 [114 kB]\nGet:21 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x rpcsvc-proto s390x 1.4.2-0ubuntu6 [64.7 kB]\nGet:22 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x libtirpc-dev s390x 1.3.2-2ubuntu0.1 [189 kB]\nGet:23 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x libnsl-dev s390x 1.3.0-2build2 [70.9 kB]\nGet:24 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x libc6-dev s390x 2.35-0ubuntu3.1 [1499 kB]\nGet:25 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x libstdc++-11-dev s390x 11.3.0-1ubuntu1~22.04 [2089 kB]\nGet:26 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x g++-11 s390x 11.3.0-1ubuntu1~22.04 [9169 kB]\nGet:27 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x g++ s390x 4:11.2.0-1ubuntu1 [1408 B]\nGet:28 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x golang-1.18-src all 1.18.1-1ubuntu1 [16.2 MB]\nGet:29 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x golang-1.18-go s390x 1.18.1-1ubuntu1 [62.6 MB]\nGet:30 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x golang-src all 2:1.18~0ubuntu2 [4438 B]\nGet:31 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x golang-go s390x 2:1.18~0ubuntu2 [41.8 kB]\nGet:32 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x libfreetype6 s390x 2.11.1+dfsg-1ubuntu0.1 [382 kB]\nGet:33 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x libfontconfig1 s390x 2.13.1-4.2ubuntu5 [133 kB]\nGet:34 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x libjpeg-turbo8 s390x 2.1.2-0ubuntu1 [119 kB]\nGet:35 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x libjpeg8 s390x 8c-2ubuntu10 [2264 B]                                           \nGet:36 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x libdeflate0 s390x 1.10-2 [72.1 kB]                                             \nGet:37 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x libjbig0 s390x 2.1-3.1ubuntu0.22.04.1 [29.9 kB]                        \nGet:38 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x libwebp7 s390x 1.2.2-2 [167 kB]                                                \nGet:39 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x libtiff5 s390x 4.3.0-6ubuntu0.3 [178 kB]                               \nGet:40 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x libxpm4 s390x 1:3.5.12-1ubuntu0.22.04.1 [36.7 kB]                      \nGet:41 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x libgd3 s390x 2.3.0-2ubuntu2 [131 kB]                                           \nGet:42 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x libc-devtools s390x 2.35-0ubuntu3.1 [29.2 kB]                          \nGet:43 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x libdpkg-perl all 1.21.1ubuntu2.1 [237 kB]                              \nGet:44 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x libfile-fcntllock-perl s390x 0.22-3build7 [33.6 kB]                            \nGet:45 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x manpages-dev all 5.10-1ubuntu1 [2309 kB]                                       \nGet:46 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x pkg-config s390x 0.29.2-1ubuntu3 [47.3 kB]                                     \nFetched 127 MB in 7s (17.1 MB/s)                                                                                                            \nExtracting templates from packages: 100%\nSelecting previously unselected package bzip2.\n(Reading database ... 56573 files and directories currently installed.)\nPreparing to unpack .../00-bzip2_1.0.8-5build1_s390x.deb ...\nUnpacking bzip2 (1.0.8-5build1) ...\nSelecting previously unselected package gcc-11-base:s390x.\nPreparing to unpack .../01-gcc-11-base_11.3.0-1ubuntu1~22.04_s390x.deb ...\nUnpacking gcc-11-base:s390x (11.3.0-1ubuntu1~22.04) ...\nSelecting previously unselected package libisl23:s390x.\nPreparing to unpack .../02-libisl23_0.24-2build1_s390x.deb ...\nUnpacking libisl23:s390x (0.24-2build1) ...\nSelecting previously unselected package libmpc3:s390x.\nPreparing to unpack .../03-libmpc3_1.2.1-2build1_s390x.deb ...\nUnpacking libmpc3:s390x (1.2.1-2build1) ...\nSelecting previously unselected package cpp-11.\nPreparing to unpack .../04-cpp-11_11.3.0-1ubuntu1~22.04_s390x.deb ...\nUnpacking cpp-11 (11.3.0-1ubuntu1~22.04) ...\nSelecting previously unselected package cpp.\nPreparing to unpack .../05-cpp_4%3a11.2.0-1ubuntu1_s390x.deb ...\nUnpacking cpp (4:11.2.0-1ubuntu1) ...\nSelecting previously unselected package fonts-dejavu-core.\nPreparing to unpack .../06-fonts-dejavu-core_2.37-2build1_all.deb ...\nUnpacking fonts-dejavu-core (2.37-2build1) ...\nSelecting previously unselected package fontconfig-config.\nPreparing to unpack .../07-fontconfig-config_2.13.1-4.2ubuntu5_all.deb ...\nUnpacking fontconfig-config (2.13.1-4.2ubuntu5) ...\nSelecting previously unselected package libcc1-0:s390x.\nPreparing to unpack .../08-libcc1-0_12.1.0-2ubuntu1~22.04_s390x.deb ...\nUnpacking libcc1-0:s390x (12.1.0-2ubuntu1~22.04) ...\nSelecting previously unselected package libgomp1:s390x.\nPreparing to unpack .../09-libgomp1_12.1.0-2ubuntu1~22.04_s390x.deb ...\nUnpacking libgomp1:s390x (12.1.0-2ubuntu1~22.04) ...\nSelecting previously unselected package libitm1:s390x.\nPreparing to unpack .../10-libitm1_12.1.0-2ubuntu1~22.04_s390x.deb ...\nUnpacking libitm1:s390x (12.1.0-2ubuntu1~22.04) ...\nSelecting previously unselected package libatomic1:s390x.\nPreparing to unpack .../11-libatomic1_12.1.0-2ubuntu1~22.04_s390x.deb ...\nUnpacking libatomic1:s390x (12.1.0-2ubuntu1~22.04) ...\nSelecting previously unselected package libasan6:s390x.\nPreparing to unpack .../12-libasan6_11.3.0-1ubuntu1~22.04_s390x.deb ...\nUnpacking libasan6:s390x (11.3.0-1ubuntu1~22.04) ...\nSelecting previously unselected package libubsan1:s390x.\nPreparing to unpack .../13-libubsan1_12.1.0-2ubuntu1~22.04_s390x.deb ...\nUnpacking libubsan1:s390x (12.1.0-2ubuntu1~22.04) ...\nSelecting previously unselected package libgcc-11-dev:s390x.\nPreparing to unpack .../14-libgcc-11-dev_11.3.0-1ubuntu1~22.04_s390x.deb ...\nUnpacking libgcc-11-dev:s390x (11.3.0-1ubuntu1~22.04) ...\nSelecting previously unselected package gcc-11.\nPreparing to unpack .../15-gcc-11_11.3.0-1ubuntu1~22.04_s390x.deb ...\nUnpacking gcc-11 (11.3.0-1ubuntu1~22.04) ...\nSelecting previously unselected package gcc.\nPreparing to unpack .../16-gcc_4%3a11.2.0-1ubuntu1_s390x.deb ...\nUnpacking gcc (4:11.2.0-1ubuntu1) ...\nSelecting previously unselected package libc-dev-bin.\nPreparing to unpack .../17-libc-dev-bin_2.35-0ubuntu3.1_s390x.deb ...\nUnpacking libc-dev-bin (2.35-0ubuntu3.1) ...\nSelecting previously unselected package linux-libc-dev:s390x.\nPreparing to unpack .../18-linux-libc-dev_5.15.0-60.66_s390x.deb ...\nUnpacking linux-libc-dev:s390x (5.15.0-60.66) ...\nSelecting previously unselected package libcrypt-dev:s390x.\nPreparing to unpack .../19-libcrypt-dev_1%3a4.4.27-1_s390x.deb ...\nUnpacking libcrypt-dev:s390x (1:4.4.27-1) ...\nSelecting previously unselected package rpcsvc-proto.\nPreparing to unpack .../20-rpcsvc-proto_1.4.2-0ubuntu6_s390x.deb ...\nUnpacking rpcsvc-proto (1.4.2-0ubuntu6) ...\nSelecting previously unselected package libtirpc-dev:s390x.\nPreparing to unpack .../21-libtirpc-dev_1.3.2-2ubuntu0.1_s390x.deb ...\nUnpacking libtirpc-dev:s390x (1.3.2-2ubuntu0.1) ...\nSelecting previously unselected package libnsl-dev:s390x.\nPreparing to unpack .../22-libnsl-dev_1.3.0-2build2_s390x.deb ...\nUnpacking libnsl-dev:s390x (1.3.0-2build2) ...\nSelecting previously unselected package libc6-dev:s390x.\nPreparing to unpack .../23-libc6-dev_2.35-0ubuntu3.1_s390x.deb ...\nUnpacking libc6-dev:s390x (2.35-0ubuntu3.1) ...\nSelecting previously unselected package libstdc++-11-dev:s390x.\nPreparing to unpack .../24-libstdc++-11-dev_11.3.0-1ubuntu1~22.04_s390x.deb ...\nUnpacking libstdc++-11-dev:s390x (11.3.0-1ubuntu1~22.04) ...\nSelecting previously unselected package g++-11.\nPreparing to unpack .../25-g++-11_11.3.0-1ubuntu1~22.04_s390x.deb ...\nUnpacking g++-11 (11.3.0-1ubuntu1~22.04) ...\nSelecting previously unselected package g++.\nPreparing to unpack .../26-g++_4%3a11.2.0-1ubuntu1_s390x.deb ...\nUnpacking g++ (4:11.2.0-1ubuntu1) ...\nSelecting previously unselected package golang-1.18-src.\nPreparing to unpack .../27-golang-1.18-src_1.18.1-1ubuntu1_all.deb ...\nUnpacking golang-1.18-src (1.18.1-1ubuntu1) ...\nSelecting previously unselected package golang-1.18-go.\nPreparing to unpack .../28-golang-1.18-go_1.18.1-1ubuntu1_s390x.deb ...\nUnpacking golang-1.18-go (1.18.1-1ubuntu1) ...\nSelecting previously unselected package golang-src.\nPreparing to unpack .../29-golang-src_2%3a1.18~0ubuntu2_all.deb ...\nUnpacking golang-src (2:1.18~0ubuntu2) ...\nSelecting previously unselected package golang-go:s390x.\nPreparing to unpack .../30-golang-go_2%3a1.18~0ubuntu2_s390x.deb ...\nUnpacking golang-go:s390x (2:1.18~0ubuntu2) ...\nSelecting previously unselected package libfreetype6:s390x.\nPreparing to unpack .../31-libfreetype6_2.11.1+dfsg-1ubuntu0.1_s390x.deb ...\nUnpacking libfreetype6:s390x (2.11.1+dfsg-1ubuntu0.1) ...\nSelecting previously unselected package libfontconfig1:s390x.\nPreparing to unpack .../32-libfontconfig1_2.13.1-4.2ubuntu5_s390x.deb ...\nUnpacking libfontconfig1:s390x (2.13.1-4.2ubuntu5) ...\nSelecting previously unselected package libjpeg-turbo8:s390x.\nPreparing to unpack .../33-libjpeg-turbo8_2.1.2-0ubuntu1_s390x.deb ...\nUnpacking libjpeg-turbo8:s390x (2.1.2-0ubuntu1) ...\nSelecting previously unselected package libjpeg8:s390x.\nPreparing to unpack .../34-libjpeg8_8c-2ubuntu10_s390x.deb ...\nUnpacking libjpeg8:s390x (8c-2ubuntu10) ...\nSelecting previously unselected package libdeflate0:s390x.\nPreparing to unpack .../35-libdeflate0_1.10-2_s390x.deb ...\nUnpacking libdeflate0:s390x (1.10-2) ...\nSelecting previously unselected package libjbig0:s390x.\nPreparing to unpack .../36-libjbig0_2.1-3.1ubuntu0.22.04.1_s390x.deb ...\nUnpacking libjbig0:s390x (2.1-3.1ubuntu0.22.04.1) ...\nSelecting previously unselected package libwebp7:s390x.\nPreparing to unpack .../37-libwebp7_1.2.2-2_s390x.deb ...\nUnpacking libwebp7:s390x (1.2.2-2) ...\nSelecting previously unselected package libtiff5:s390x.\nPreparing to unpack .../38-libtiff5_4.3.0-6ubuntu0.3_s390x.deb ...\nUnpacking libtiff5:s390x (4.3.0-6ubuntu0.3) ...\nSelecting previously unselected package libxpm4:s390x.\nPreparing to unpack .../39-libxpm4_1%3a3.5.12-1ubuntu0.22.04.1_s390x.deb ...\nUnpacking libxpm4:s390x (1:3.5.12-1ubuntu0.22.04.1) ...\nSelecting previously unselected package libgd3:s390x.\nPreparing to unpack .../40-libgd3_2.3.0-2ubuntu2_s390x.deb ...\nUnpacking libgd3:s390x (2.3.0-2ubuntu2) ...\nSelecting previously unselected package libc-devtools.\nPreparing to unpack .../41-libc-devtools_2.35-0ubuntu3.1_s390x.deb ...\nUnpacking libc-devtools (2.35-0ubuntu3.1) ...\nSelecting previously unselected package libdpkg-perl.\nPreparing to unpack .../42-libdpkg-perl_1.21.1ubuntu2.1_all.deb ...\nUnpacking libdpkg-perl (1.21.1ubuntu2.1) ...\nSelecting previously unselected package libfile-fcntllock-perl.\nPreparing to unpack .../43-libfile-fcntllock-perl_0.22-3build7_s390x.deb ...\nUnpacking libfile-fcntllock-perl (0.22-3build7) ...\nSelecting previously unselected package manpages-dev.\nPreparing to unpack .../44-manpages-dev_5.10-1ubuntu1_all.deb ...\nUnpacking manpages-dev (5.10-1ubuntu1) ...\nSelecting previously unselected package pkg-config.\nPreparing to unpack .../45-pkg-config_0.29.2-1ubuntu3_s390x.deb ...\nUnpacking pkg-config (0.29.2-1ubuntu3) ...\nSetting up gcc-11-base:s390x (11.3.0-1ubuntu1~22.04) ...\nSetting up manpages-dev (5.10-1ubuntu1) ...\nSetting up libxpm4:s390x (1:3.5.12-1ubuntu0.22.04.1) ...\nSetting up libfile-fcntllock-perl (0.22-3build7) ...\nSetting up libdeflate0:s390x (1.10-2) ...\nSetting up linux-libc-dev:s390x (5.15.0-60.66) ...\nSetting up libgomp1:s390x (12.1.0-2ubuntu1~22.04) ...\nSetting up bzip2 (1.0.8-5build1) ...\nSetting up libjbig0:s390x (2.1-3.1ubuntu0.22.04.1) ...\nSetting up libasan6:s390x (11.3.0-1ubuntu1~22.04) ...\nSetting up libtirpc-dev:s390x (1.3.2-2ubuntu0.1) ...\nSetting up rpcsvc-proto (1.4.2-0ubuntu6) ...\nSetting up libfreetype6:s390x (2.11.1+dfsg-1ubuntu0.1) ...\nSetting up libmpc3:s390x (1.2.1-2build1) ...\nSetting up libatomic1:s390x (12.1.0-2ubuntu1~22.04) ...\nSetting up fonts-dejavu-core (2.37-2build1) ...\nSetting up golang-1.18-src (1.18.1-1ubuntu1) ...\nSetting up libjpeg-turbo8:s390x (2.1.2-0ubuntu1) ...\nSetting up libdpkg-perl (1.21.1ubuntu2.1) ...\nSetting up libwebp7:s390x (1.2.2-2) ...\nSetting up libubsan1:s390x (12.1.0-2ubuntu1~22.04) ...\nSetting up libnsl-dev:s390x (1.3.0-2build2) ...\nSetting up libcrypt-dev:s390x (1:4.4.27-1) ...\nSetting up libisl23:s390x (0.24-2build1) ...\nSetting up libc-dev-bin (2.35-0ubuntu3.1) ...\nSetting up golang-src (2:1.18~0ubuntu2) ...\nSetting up libcc1-0:s390x (12.1.0-2ubuntu1~22.04) ...\nSetting up libitm1:s390x (12.1.0-2ubuntu1~22.04) ...\nSetting up libjpeg8:s390x (8c-2ubuntu10) ...\nSetting up cpp-11 (11.3.0-1ubuntu1~22.04) ...\nSetting up fontconfig-config (2.13.1-4.2ubuntu5) ...\nSetting up golang-1.18-go (1.18.1-1ubuntu1) ...\nSetting up pkg-config (0.29.2-1ubuntu3) ...\nSetting up libgcc-11-dev:s390x (11.3.0-1ubuntu1~22.04) ...\nSetting up gcc-11 (11.3.0-1ubuntu1~22.04) ...\nSetting up cpp (4:11.2.0-1ubuntu1) ...\nSetting up libc6-dev:s390x (2.35-0ubuntu3.1) ...\nSetting up libtiff5:s390x (4.3.0-6ubuntu0.3) ...\nSetting up libfontconfig1:s390x (2.13.1-4.2ubuntu5) ...\nSetting up golang-go:s390x (2:1.18~0ubuntu2) ...\nSetting up gcc (4:11.2.0-1ubuntu1) ...\nSetting up libgd3:s390x (2.3.0-2ubuntu2) ...\nSetting up libstdc++-11-dev:s390x (11.3.0-1ubuntu1~22.04) ...\nSetting up libc-devtools (2.35-0ubuntu3.1) ...\nSetting up g++-11 (11.3.0-1ubuntu1~22.04) ...\nSetting up g++ (4:11.2.0-1ubuntu1) ...\nupdate-alternatives: using /usr/bin/g++ to provide /usr/bin/c++ (c++) in auto mode\nProcessing triggers for man-db (2.10.2-1) ...\nProcessing triggers for libc-bin (2.35-0ubuntu3.1) ...\nScanning processes...                                                                                                                        \nScanning linux images...                                                                                                                     \n\nRunning kernel seems to be up-to-date (ABI upgrades are not detected).\n\nNo services need to be restarted.\n\nNo containers need to be restarted.\n\nNo user sessions are running outdated binaries.\n\nNo VM guests are running outdated hypervisor (qemu) binaries on this host.\n</code></pre> <p>Now convince yourself that you have installed Go correctly:</p> <pre><code>go version\n</code></pre> Go has been installed if you see this: <pre><code>go version go1.18.1 linux/s390x\n</code></pre> <p>The version of go that you see may differ slightly if a newer version has become available.</p>"},{"location":"lab/grep11/configureGrep11TestClient/#download-the-grep11-code-repo","title":"Download the GREP11 code repo","text":"<p>You are probably already in your home directory, but this command won't cause any harm if you are:</p> <pre><code>cd ~\n</code></pre> <p>The instructor has created a fork of a GitHub repo that is provided by an IBM Cloud GitHub repo.  The instructor could have just pointed you to the IBM Cloud GitHub repo, but, had he done that, you can be assured that a file that had not been changed in nineteen months would have changed an hour before  you started the lab, breaking this section, frustrating you, humiliating the instructor, and by creating his own fork he can ensure he has complete control of the code, and you probably think he's being paranoid  and that this sort of thing would never have happened to him during a live demo (on a different product) in front of an audience of hundreds of people.  Nope, that would never happen.  Fortunately it was only an IBM  internal audience. The instructor has since recovered.</p> <p>Having said that, clone the instructor's GitHub repo:</p> <pre><code>git clone https://github.com/silliman/hpcs-grep11-go </code></pre> Example output from git clone <pre><code>Cloning into 'hpcs-grep11-go'...\nremote: Enumerating objects: 61, done.\nremote: Counting objects: 100% (61/61), done.\nremote: Compressing objects: 100% (32/32), done.\nremote: Total 61 (delta 22), reused 56 (delta 20), pack-reused 0\nReceiving objects: 100% (61/61), 121.04 KiB | 8.07 MiB/s, done.\nResolving deltas: 100% (22/22), done.\n</code></pre> <p>The git clone created a directory named <code>hpcs-grep11-go</code>, change into it:</p> <pre><code>cd hpcs-grep11-go\n</code></pre> <p>List the contents of the <code>cert</code> directory, see that there is a single file named <code>README</code> </p> <pre><code>ls -l certs/\n</code></pre> <p>READ IT (weeping is optional):</p> <pre><code>cat certs/README\n</code></pre> <p>You read that right- more X509 work!! </p>"},{"location":"lab/grep11/configureGrep11TestClient/#create-tls-certificate-and-key-for-your-grep11-client","title":"Create TLS certificate and key for your GREP11 Client","text":"<p>Go to the <code>certs</code> directory:</p> <pre><code>cd certs\n</code></pre> <p>Create an RSA private key (this is one of three files needed in this directory)</p> <pre><code>openssl genrsa -out client.key 2048\n</code></pre> <p>Create a configuration file to avoid interrogation by openssl:</p> <pre><code>cat &lt;&lt; EOF &gt; client.cnf\nRANDFILE               = \\$ENV::HOME/.rnd\n\n[ req ]\ndefault_bits           = 2048\ndefault_keyfile        = keyfile.pem\ndistinguished_name     = req_distinguished_name\nattributes             = req_attributes\nprompt                 = no\noutput_password        = mypass\n\n[ req_distinguished_name ]\nC                      = US\nST                     = Virginia\nL                      = Herndon\nO                      = IBM\nOU                     = Washington Systems Center - IBM IBM Z and LinuxONE\nCN                     = Lab Student\nemailAddress           = student@not.real.email.com\n\n[ req_attributes ]\nchallengePassword              = A challenge password\n\n[ x509_extensions ]\nsubjectKeyIdentifier   = hash\nauthorityKeyIdentifier = keyid,issuer\nbasicConstraints       = critical,CA:TRUE\nEOF\n</code></pre> <p>Create a certificate signing request:</p> <pre><code>openssl req -new -key client.key -out client.csr -config client.cnf\n</code></pre> <p>Display the CSR that you created:</p> <pre><code>openssl req -noout -text -in client.csr\n</code></pre> <p>It will look like this:</p> Example CSR display <pre><code>Certificate Request:\n    Data:\n        Version: 1 (0x0)\n        Subject: C = US, ST = Virginia, L = Herndon, O = IBM, OU = Washington Systems Center - IBM IBM Z and LinuxONE, CN = Lab Student, emailAddress = student@not.real.email.com\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n                Public-Key: (2048 bit)\n                Modulus:\n                    00:e4:07:f9:43:c6:6b:fd:2c:39:d4:ef:b4:cb:db:\n                    f5:06:b1:82:bc:48:1a:a1:57:3c:1d:05:a9:fe:65:\n                    c2:bb:a0:ed:12:58:51:e0:95:2f:44:95:5c:be:88:\n                    82:a0:c0:4d:28:62:c4:32:90:66:2e:aa:bc:77:cc:\n                    a0:bc:04:3f:22:01:37:58:0a:44:ab:29:9f:4c:01:\n                    8b:24:33:21:a5:bf:27:5d:4e:1e:a3:14:15:79:f1:\n                    8d:02:61:7b:4d:9f:18:d9:4a:5e:b9:62:d9:c3:96:\n                    79:cd:2c:82:f2:f1:3e:8f:ca:29:89:6a:45:b7:48:\n                    b5:54:4a:bc:0d:0e:1c:22:8b:f7:8d:e4:72:54:9e:\n                    8e:ef:b7:2e:d3:3b:e3:10:9e:1c:35:79:eb:57:1b:\n                    aa:61:15:d7:19:6a:89:76:2e:63:19:07:c1:db:92:\n                    98:bb:48:2b:e7:55:8b:cb:74:e1:00:76:f5:0a:8e:\n                    e8:1a:69:a6:14:bf:7c:7f:eb:a8:ee:ad:b1:f0:df:\n                    92:cc:0c:10:3d:42:b3:02:0d:7c:0d:55:38:70:49:\n                    ab:84:da:d0:1e:52:1b:19:47:6e:26:b9:8c:cf:0e:\n                    12:17:b1:cd:d8:bd:55:2f:fd:6b:6e:12:f1:8b:c4:\n                    60:96:67:c4:55:a3:03:43:1b:70:a2:d7:0e:73:c6:\n                    79:23\n                Exponent: 65537 (0x10001)\n        Attributes:\n            challengePassword        :A challenge password\n            Requested Extensions:\n    Signature Algorithm: sha256WithRSAEncryption\n    Signature Value:\n        3d:ef:35:37:b6:aa:e4:33:cb:fe:17:aa:18:a5:77:d2:23:3b:\n        b7:01:ac:6e:65:0c:0c:68:a6:80:37:04:8d:d2:7e:e8:9b:57:\n        9d:63:8f:82:06:22:07:7f:bc:6b:b3:60:1c:3f:a1:3d:75:c5:\n        3a:d5:f6:74:5c:93:9a:60:9e:40:4a:95:09:bf:38:6b:fb:fb:\n        1a:6a:91:be:6d:4d:15:46:79:b4:e1:19:cb:9d:00:97:95:75:\n        c1:3a:1d:4b:10:0f:c0:90:5b:f0:b9:5a:e6:b8:6d:11:84:d3:\n        0b:aa:7c:eb:07:51:4c:0c:c3:7d:e5:7e:d0:5a:81:f8:0e:3f:\n        08:db:3b:78:3d:aa:38:a0:65:60:60:f5:19:4f:47:fe:08:2d:\n        4a:af:f9:40:1d:ff:2b:92:67:91:99:eb:b1:8c:cf:d1:2a:c1:\n        c0:0d:6c:38:2b:ca:69:d2:40:7e:9d:84:c6:7a:2c:33:d0:28:\n        b0:09:97:19:e7:3c:e9:fe:dc:bf:71:a3:00:2f:46:19:f4:1a:\n        7c:fc:0f:ff:18:1f:38:77:78:17:49:0e:3e:e7:8a:f0:29:bb:\n        a2:37:f4:4a:12:48:e2:ea:1f:14:cc:31:ac:19:6d:b5:bf:98:\n        2b:91:aa:a8:71:07:62:54:48:79:55:72:11:9e:87:86:36:3d:\n        5d:24:b0:9b\n</code></pre> <p>Your GREP11 CA is on your account on the RHEL host. Send your CSR to it:</p> <pre><code>scp client.csr ${StudentID}@192.168.22.64:GREP11CAwork/. </code></pre> <p>Switch to your terminal tab or window for your RHEL host session.:</p> <p></p> <p>Change to your GREP11 CA working directory:</p> <pre><code>cd ${HOME}/GREP11CAwork\n</code></pre> <p>Display the CSR that the client sent you:</p> <pre><code>openssl req -noout -text -in client.csr\n</code></pre> <p>Note: The output is not shown here as it should look the same as when you displayed this same certificate moments ago when you were in \"client\" mode.</p> <p>Create the certificate for the client:</p> <pre><code>openssl x509 -req -days 300 -in client.csr -CA grep11-ca.pem -CAcreateserial -CAkey grep11-ca-key.pem -out client.pem\n</code></pre> Output from certificate creation <pre><code>Signature ok\nsubject=C = US, ST = Virginia, L = Herndon, O = IBM, OU = Washington Systems Center - IBM IBM Z and LinuxONE, CN = Lab Student, emailAddress = student@not.real.email.com\nGetting CA Private Key\n</code></pre> <p>Display the certificate before sending it to the client:</p> <pre><code>openssl x509 -noout -text -in client.pem\n</code></pre> Display of GREP11 client certificate <pre><code>Certificate:\n    Data:\n        Version: 1 (0x0)\n        Serial Number:\n            79:dd:5b:25:cc:24:f9:71:e5:e0:71:23:db:f8:9e:b8:92:b9:2d:1a\n        Signature Algorithm: sha256WithRSAEncryption\n        Issuer: C = US, ST = Virginia, L = Herndon, O = IBM, OU = Washington Systems Center - IBM IBM Z and LinuxONE, CN = WSC student02 HPVS CA, emailAddress = student@notreal.email.com.com\n        Validity\n            Not Before: Feb 15 16:07:56 2023 GMT\n            Not After : Dec 12 16:07:56 2023 GMT\n        Subject: C = US, ST = Virginia, L = Herndon, O = IBM, OU = Washington Systems Center - IBM IBM Z and LinuxONE, CN = Lab Student, emailAddress = student@not.real.email.com\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n                RSA Public-Key: (2048 bit)\n                Modulus:\n                    00:e4:07:f9:43:c6:6b:fd:2c:39:d4:ef:b4:cb:db:\n                    f5:06:b1:82:bc:48:1a:a1:57:3c:1d:05:a9:fe:65:\n                    c2:bb:a0:ed:12:58:51:e0:95:2f:44:95:5c:be:88:\n                    82:a0:c0:4d:28:62:c4:32:90:66:2e:aa:bc:77:cc:\n                    a0:bc:04:3f:22:01:37:58:0a:44:ab:29:9f:4c:01:\n                    8b:24:33:21:a5:bf:27:5d:4e:1e:a3:14:15:79:f1:\n                    8d:02:61:7b:4d:9f:18:d9:4a:5e:b9:62:d9:c3:96:\n                    79:cd:2c:82:f2:f1:3e:8f:ca:29:89:6a:45:b7:48:\n                    b5:54:4a:bc:0d:0e:1c:22:8b:f7:8d:e4:72:54:9e:\n                    8e:ef:b7:2e:d3:3b:e3:10:9e:1c:35:79:eb:57:1b:\n                    aa:61:15:d7:19:6a:89:76:2e:63:19:07:c1:db:92:\n                    98:bb:48:2b:e7:55:8b:cb:74:e1:00:76:f5:0a:8e:\n                    e8:1a:69:a6:14:bf:7c:7f:eb:a8:ee:ad:b1:f0:df:\n                    92:cc:0c:10:3d:42:b3:02:0d:7c:0d:55:38:70:49:\n                    ab:84:da:d0:1e:52:1b:19:47:6e:26:b9:8c:cf:0e:\n                    12:17:b1:cd:d8:bd:55:2f:fd:6b:6e:12:f1:8b:c4:\n                    60:96:67:c4:55:a3:03:43:1b:70:a2:d7:0e:73:c6:\n                    79:23\n                Exponent: 65537 (0x10001)\n    Signature Algorithm: sha256WithRSAEncryption\n         66:9c:1a:d8:75:5b:52:1c:8c:f7:d7:63:f6:ea:1e:4e:b1:fa:\n         92:78:1a:ab:83:11:7d:73:50:b9:ce:34:2b:33:d1:97:1f:90:\n         f6:c7:85:45:20:9f:95:6d:f7:16:f9:64:fd:7b:3d:48:44:33:\n         af:9e:dc:5a:f4:56:dd:50:27:6f:3e:9e:75:f2:52:d1:cf:fe:\n         76:52:98:8a:0b:cd:62:a6:68:49:34:43:f9:d2:e3:ab:f6:b3:\n         3f:fd:ff:3a:92:06:32:2b:c0:64:29:b5:00:c4:b8:66:57:07:\n         de:64:8a:7a:88:0b:27:79:5a:6d:8f:4d:52:bf:cc:5e:03:53:\n         4a:40:4d:22:e5:e7:0f:c3:1e:6c:2a:cf:79:f2:d5:4b:b3:13:\n         be:dd:51:c7:2f:2d:8b:f5:97:1e:3f:86:2e:6c:13:c5:43:0f:\n         a6:49:ed:a4:a2:7e:ec:3f:f9:9b:f4:65:f1:ff:d5:9c:60:0f:\n         90:a8:18:a7:e0:2a:e4:b9:f2:4c:36:d9:f7:94:c9:a5:71:10:\n         bf:56:0d:df:d7:3e:71:a7:f7:d0:cc:dc:52:49:bf:c1:71:72:\n         e3:46:89:d6:5d:d4:60:04:a3:5b:46:84:ef:9f:de:02:8c:c8:\n         69:89:5a:ef:49:5a:48:fc:72:af:09:21:dd:22:f7:91:b5:57:\n         3b:50:e3:58\n</code></pre> <p>Send the certificate back to the client that requested it:</p> <pre><code>scp client.pem student@${StudentGuestIP}:./hpcs-grep11-go/certs/.   </code></pre> <p>Your work as a CA registrar is done for the remainder of the lab!  </p> <p>Switch to your terminal tab or window for your Ubuntu KVM guest session:</p> <p></p> <p>Change to the directory that has your certificates and key:</p> <pre><code>cd ${HOME}/hpcs-grep11-go/certs\n</code></pre> <p>Display the client certificate that your CA registrar sent you:</p> <pre><code>openssl x509 -noout -text -in client.pem\n</code></pre> <p>You know that you know what it should look like so we won't repeat the output here.</p> <p>Get your CA's public certificate so that you can authenticate your connection with the GREP11 Server:</p> <pre><code>scp ${StudentID}@192.168.22.64:GREP11CAwork/grep11-ca.pem .\n</code></pre>"},{"location":"lab/grep11/configureGrep11TestClient/#modify-grep11-code-for-authentication-to-your-grep11-server","title":"Modify GREP11 code for authentication to your GREP11 Server","text":"<p>Switch to this directory:</p> <pre><code>cd ../examples\n</code></pre> <p>Run this command to see the one line you need to change in the source code you downloaded:</p> <pre><code>grep --after-context 3 STUDENT server_test.go\n</code></pre> <p>Your output will look like this:</p> The line you need to change, plus the files you just made <pre><code>const Address = \"STUDENT_GREP11SERVER_IP:9876\"\nconst cert = \"../certs/client.pem\"\nconst key = \"../certs/client.key\"\nconst ca = \"../certs/grep11-ca.pem\"\n</code></pre> <p>This also shows the three files in the certs directory that you have already taken care of, but the first line is the only line you need to change:</p> <pre><code>sed -i -e \"s/STUDENT_GREP11SERVER_IP/${GREP11ServerIP}/g\" server_test.go\n</code></pre> <p>Run this command to ensure that you made the change correctly:</p> <pre><code>grep --after-context 3 ${GREP11ServerIP} server_test.go\n</code></pre> Expected output (your IP will differ, example shown for student02) <pre><code>const Address = \"172.16.0.62:9876\"\nconst cert = \"../certs/client.pem\"\nconst key = \"../certs/client.key\"\nconst ca = \"../certs/grep11-ca.pem\"\n</code></pre>"},{"location":"lab/grep11/configureGrep11TestClient/#run-the-grep11-client-code","title":"Run the GREP11 client code","text":"<p>Drum roll please...</p> <p>Enter this command to test your GREP11 client code:</p> <pre><code>go test -v\n</code></pre> <p>Your output should look like this. If it does, you have reached a successful conclusion to the lab!!!</p> Expected output from testing the GREP11 client code <pre><code>go: downloading google.golang.org/grpc v1.34.0\ngo: downloading github.com/gogo/protobuf v1.3.2\ngo: downloading github.com/golang/protobuf v1.4.3\ngo: downloading golang.org/x/net v0.0.0-20201021035429-f5854403a974\ngo: downloading google.golang.org/genproto v0.0.0-20201001141541-efaab9d3c4f7\ngo: downloading google.golang.org/protobuf v1.25.0\ngo: downloading golang.org/x/sys v0.0.0-20200930185726-fdedc70b468f\ngo: downloading golang.org/x/text v0.3.3\n=== RUN   Test_signAndVerifyUsingDilithiumKeyPair\nGenerated Dilithium key pair\nData signed\nVerified\n--- PASS: Test_signAndVerifyUsingDilithiumKeyPair (0.05s)\n=== RUN   Test_rewrapKeyBlob\n    server_test.go:1375: \n\n        Skipping the rewrapKeyBlob test. To enable, comment out the t.Skipf and message lines within the Test_rewrapKeyBlob test\n\n        NOTE: This test contains two pauses that require the user to type CTRL-c after ensuring\n              that the stated pre-requisite activity has been completed.  There needs to be \n              coordination with your HPCS cloud service contact in order to place your HSM\n              into the required states.\n\n--- SKIP: Test_rewrapKeyBlob (0.00s)\n=== RUN   Example_getMechanismInfo\n--- PASS: Example_getMechanismInfo (0.01s)\n=== RUN   Example_generateGenericKey\n--- PASS: Example_generateGenericKey (0.01s)\n=== RUN   Example_encryptAndDecryptUsingAES\n--- PASS: Example_encryptAndDecryptUsingAES (0.02s)\n=== RUN   Example_digest\n--- PASS: Example_digest (0.01s)\n=== RUN   Example_signAndVerifyUsingRSAKeyPair\n--- PASS: Example_signAndVerifyUsingRSAKeyPair (0.04s)\n=== RUN   Example_signAndVerifyUsingDSAKeyPair\n--- PASS: Example_signAndVerifyUsingDSAKeyPair (0.54s)\n=== RUN   Example_deriveKeyUsingDHKeyPair\n--- PASS: Example_deriveKeyUsingDHKeyPair (1.51s)\n=== RUN   Example_signAndVerifyUsingECDSAKeyPair\n--- PASS: Example_signAndVerifyUsingECDSAKeyPair (0.02s)\n=== RUN   Example_signAndVerifyToTestErrorHandling\n--- PASS: Example_signAndVerifyToTestErrorHandling (0.02s)\n=== RUN   Example_wrapAndUnwrapKey\n--- PASS: Example_wrapAndUnwrapKey (0.04s)\n=== RUN   Example_deriveKey\n--- PASS: Example_deriveKey (0.04s)\n=== RUN   Example_wrapAndUnwrapAttributeBoundKey\n--- PASS: Example_wrapAndUnwrapAttributeBoundKey (0.03s)\n=== RUN   Example_tls\n--- PASS: Example_tls (0.03s)\nPASS\nok    github.com/IBM-Cloud/hpcs-grep11-go/examples    2.373s\n</code></pre> <p>Before you go, check out the your rsyslog log messages to see evidence of the test you just ran:</p> <pre><code>journalctl --since \"-5 minutes \" --output short-full --no-pager\n</code></pre> <p>The above command assumes you ran this within five minutes of running the test.  If you missed the boat, then just rerun the test again or change the argument to --since to show a longer timeframe of messages.</p>"},{"location":"lab/grep11/configureRsyslog/","title":"Configure rsyslog service","text":""},{"location":"lab/grep11/configureRsyslog/#overview-of-this-page","title":"Overview of this page","text":"<p>The HPVS 2.1.6-protected GREP11 Server that you will create later in the lab will log its output to an rsyslog service on the Ubuntu KVM guest that you just started in the previous section. Rsyslog on your Ubuntu KVM guest is currently not set up for this, so you will configure rsyslog in this section of the lab.</p> <p>Logging to IBM Log Analysis on IBM Cloud</p> <p>You can also log the output of an HPVS 2.1.6 guest to an IBM Log Analysis instance on IBM Cloud.  That is not covered in this lab but if you are interested in this, it is covered in the product documentation.</p>"},{"location":"lab/grep11/configureRsyslog/#log-in-to-your-ubuntu-kvm-guest","title":"Log in to your Ubuntu KVM guest","text":"<p>How tricky can logging in be?</p> <p>The Ubuntu KVM guest that you started is in a KVM internal private network that uses NAT (Network Address Translation) in order to communicate with the \"outside world\".  \"Outside world\" in this context refers to any server outside of our RHEL 8.5 host. </p> <p>Your home network is probably doing the same thing</p> <p>Your cable modem or DSL modem or satellite modem provides NAT services for your home network. This modem connects to your network router either:</p> <ul> <li>combined into a single physical unit that acts as a modem and a router (and maybe a toaster or coffee maker- at least it should be given how much my wallet shrinks after paying my monthly bill!)</li> </ul> <p>OR</p> <ul> <li>a separate modem and router you buy yourself for better performance or to save money in the long run by eliminating monthly equipment rental fees from your internet provider</li> </ul> <p>tl;dr</p> <p>You will use \"port forwarding\" to get from the RHEL 8.5 host to your Ubuntu KVM guest.  It's a little tricky but we've set things up to make it easy for you. </p> <p>How have we made it easy for you?</p> <p>If you're on an instructor-provided system, we've hopefully set an environment variable for you that specifies the port you'll need to connect to on the RHEL 8.5 host that will allow it to successfully forward your login attempt to your Ubuntu KVM guest.  Run this:</p> <pre><code>echo ${Student_SSH_Port}\n</code></pre> Example output when variable was set <pre><code>silliman@nat-147 ~ % echo ${Student_SSH_Port}     \n20024\n</code></pre> <p>If you don't see a port number somewhere between 20023 and 20042- each student will have a unique port- then ask the instructor for your port and set it with this command (changing  22222 from the example to your instructor-assigned port)</p> <pre><code>export Student_SSH_Port=22222\n</code></pre> <p>There is nothing magical about the port range 20023 to 20042- this just happens to be the range of ports the instructors configured on the host system. The secret formula used by the instructors is 20022 + last two digits of your student userid, and the system has been set up to allow twenty students to take the lab at the same time.</p> <p>For the same reason as explained the in the beginning of the lab when we had you check that your student userid was set in a variable, if this variable was not already set and you had to set it, it is optional but recommended to update your shell so that this change will take effect in new terminal windows or tabs as well.  Examples are shown for bash and zsh- pick the appropriate command or tailor for your shell:</p> <pre><code>echo \"export Student_SSH_Port='${Student_SSH_Port}'\" &gt;&gt; \"${HOME}/.bashrc\"\n</code></pre> <pre><code>echo \"export Student_SSH_Port='${Student_SSH_Port}'\" &gt;&gt; \"${HOME}/.zshrc\"\n</code></pre>"},{"location":"lab/grep11/configureRsyslog/#open-a-new-terminal-window-or-tab-with-the-kvm-standard-guest-profile","title":"Open a new terminal window or tab with the KVM Standard Guest profile","text":"<p>From your terminal window with the RHEL Host profile, click on File in the menu bar and then, according to your preferences, select either New Tab or New Window, and, from either choice, select 1. KVM Standard Guest</p> <p>Choosing a new tab offers compactness but you won't be able to both the RHEL Host tab and the KVM Standard Guest tab at the same time- you have to switch back and forth by clicking the appropriate tab header at the top.  Choosing a new window allows you to drag your windows or otherwise rearrange them so that you can see both windows on your screen.  The choice is yours.  Advanced students may wish to open more windows and tabs but the lab is written with the assumption that you have just one window or tab with the RHEL Host profile and just one window or tab with the KVM Standard Guest profile.</p> <p>Your window or tab should like like this (unless you customized the profile we provided you):</p> <p></p> <p>You're now ready to log in to your Ubuntu KVM guest:</p> <pre><code>ssh -p ${Student_SSH_Port} -l student 192.168.22.64\n</code></pre> Example messages logging into Ubuntu KVM guest <pre><code>silliman@nat-147 ~ % ssh -p ${Student_SSH_Port} -l student 192.168.22.64\n\nLast login: Thu Feb  9 19:32:09 2023 from 192.168.215.147\nstudent@ubuntu2204:~$ \n</code></pre> <p>Continue to enter commands in your KVM Standard Guest terminal tab or window until directed to switch to your other tab or window.</p> <p>Is my <code>userid</code> really student?</p> <p>That's right, your userid is student on your Ubuntu KVM guest.  Each student has a unique userid on the RHEL 8.5 host, but since each student has their own unique Ubuntu KVM guest, you each have the same userid, student, since you have this guest all to yourself.</p> <p>You should be able to log in without a password prompt, but if not, your instructor will provide you with the password.</p>"},{"location":"lab/grep11/configureRsyslog/#install-rsyslog-gnutls-package","title":"Install rsyslog-gnutls package","text":"<p>The initial installation of Ubuntu installed an rsyslog service.  Display it with this command:</p> <pre><code>sudo systemctl status rsyslog\n</code></pre> Example output <pre><code>\u25cf rsyslog.service - System Logging Service\n     Loaded: loaded (/lib/systemd/system/rsyslog.service; enabled; vendor preset: enabled)\n     Active: active (running) since Tue 2023-02-14 00:24:49 UTC; 12min ago\nTriggeredBy: \u25cf syslog.socket\n       Docs: man:rsyslogd(8)\n             man:rsyslog.conf(5)\n             https://www.rsyslog.com/doc/\n   Main PID: 654 (rsyslogd)\n      Tasks: 4 (limit: 2350)\n     Memory: 2.2M\n        CPU: 8ms\n     CGroup: /system.slice/rsyslog.service\n             \u2514\u2500654 /usr/sbin/rsyslogd -n -iNONE\n\nFeb 14 00:24:49 ubuntu2204 systemd[1]: Starting System Logging Service...\nFeb 14 00:24:49 ubuntu2204 systemd[1]: Started System Logging Service.\nFeb 14 00:24:49 ubuntu2204 rsyslogd[654]: imuxsock: Acquired UNIX socket '/run/systemd/journal/syslog' (f&gt;\nFeb 14 00:24:49 ubuntu2204 rsyslogd[654]: rsyslogd's groupid changed to 115\nFeb 14 00:24:49 ubuntu2204 rsyslogd[654]: rsyslogd's userid changed to 107\nFeb 14 00:24:49 ubuntu2204 rsyslogd[654]: [origin software=\"rsyslogd\" swVersion=\"8.2112.0\" x-pid=\"654\" x-&gt;\nFeb 14 00:24:49 ubuntu2204 systemd[1]: rsyslog.service: Sent signal SIGHUP to main process 654 (rsyslogd)&gt;\nFeb 14 00:34:49 ubuntu2204 rsyslogd[654]: [origin software=\"rsyslogd\" swVersion=\"8.2112.0\" x-pid=\"654\" x-&gt;\nlines 1-22/22 (END)\n</code></pre> <p>If you're having trouble getting back to a command prompt, press q (for quit). </p> <p>The default installation of rsyslog needs to be modified to allow it to receive messages sent across the network using the TCP protocol and with mutual TLS authentication.</p> <p>You'll modify the configuration to allow this.  </p> <ol> <li> <p>Become the root user:</p> <pre><code>sudo su -\n</code></pre> Example output when becoming root <pre><code>student@ubuntu2204:~$ sudo su -\nroot@ubuntu2204:~# \n</code></pre> </li> <li> <p>Create the proper configuration file in the /etc/rsyslog.d/ directory:</p> <pre><code>cat &lt;&lt; EOF &gt; /etc/rsyslog.d/server.conf\n# output to journal\nmodule(load=\"omjournal\")\ntemplate(name=\"journal\" type=\"list\") {\n# can add other metadata here\nproperty(outname=\"PRIORITY\" name=\"pri\")\nproperty(outname=\"SYSLOG_FACILITY\" name=\"syslogfacility\")\nproperty(outname=\"SYSLOG_IDENTIFIER\" name=\"app-name\")\nproperty(outname=\"HOSTNAME\" name=\"hostname\")\nproperty(outname=\"MESSAGE\"  name=\"msg\")\n}\n\nruleset(name=\"journal-output\") {\naction(type=\"omjournal\" template=\"journal\")\n}\n\n# make gtls driver the default and set certificate files\n\\$DefaultNetstreamDriver \"gtls\"\n\\$DefaultNetstreamDriverCAFile /var/lib/rsyslog/x509/ca.crt\n\\$DefaultNetstreamDriverCertFile /var/lib/rsyslog/x509/server.crt\n\\$DefaultNetstreamDriverKeyFile /var/lib/rsyslog/x509/server-key.pem\n\n# load TCP listener\nmodule(\nload=\"imtcp\"\nStreamDriver.Name=\"gtls\"\nStreamDriver.Mode=\"1\"\nStreamDriver.Authmode=\"x509/certvalid\"\n)\n\n# start up listener at port 6514\ninput(\ntype=\"imtcp\"\nport=\"6514\"\nruleset=\"journal-output\"\n)\n\nEOF\n</code></pre> <p>We might have had you put the cart before the horse a little bit because there is some work to do to ensure that what you've added to this configuration file actually works! But we did this so that we can point out the sections that are requiring this extra work.</p> <p>Take a look close to the bottom of the file</p> <p>There are two sections of interest that are highlighted in the above code block. If these lines could speak to you, they would say, \"We are going to receive TCP messages, and we will use TLS to authenticate with the sender of these messages and to enable encryption of the messages, and here are the certificate and keys needed to enable this to work\".</p> <p>For this configuration file to work, you'll need to install a software package to allow rsyslog to receive TLS-authenticated TCP messages and you'll need to create the certificate and keys and put them where the configuration file says you put them.</p> </li> <li> <p>Prove to yourself that the rsyslog package has already been installed (by the \"bare-bones\" default Ubuntu setup):</p> <pre><code>apt-cache policy rsyslog\n</code></pre> Output showing rsyslog is already installed <pre><code>rsyslog:\n    Installed: 8.2112.0-2ubuntu2.2\n    Candidate: 8.2112.0-2ubuntu2.2\n    Version table:\n*** 8.2112.0-2ubuntu2.2 500\n500 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x Packages\n        500 http://ports.ubuntu.com/ubuntu-ports jammy-security/main s390x Packages\n        100 /var/lib/dpkg/status\n    8.2112.0-2ubuntu2 500\n500 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x Packages\n</code></pre> </li> <li> <p>Prove to yourself that the rsyslog-gnutls package has not been installed yet:</p> <pre><code>apt-cache policy rsyslog-gnutls\n</code></pre> Output showing rsyslog-gnutls is not installed <pre><code>rsyslog-gnutls:\n    Installed: (none)\n    Candidate: 8.2112.0-2ubuntu2.2\n    Version table:\n    8.2112.0-2ubuntu2.2 500\n        500 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x Packages\n        500 http://ports.ubuntu.com/ubuntu-ports jammy-security/main s390x Packages\n    8.2112.0-2ubuntu2 500\n        500 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x Packages\n</code></pre> </li> <li> <p>Remedy the situation (not having rsyslog-gnutls package installed):</p> <pre><code>apt-get install rsyslog-gnutls\n</code></pre> Output from installing rsyslog-gnutls <pre><code>Reading package lists... Done\nBuilding dependency tree... Done\nReading state information... Done\nSuggested packages:\n    gnutls-bin\nThe following NEW packages will be installed:\n    rsyslog-gnutls\n0 upgraded, 1 newly installed, 0 to remove and 0 not upgraded.\nNeed to get 17.8 kB of archives.\nAfter this operation, 90.1 kB of additional disk space will be used.\nGet:1 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x rsyslog-gnutls s390x 8.2112.0-2ubuntu2.2 [17.8 kB]\nFetched 17.8 kB in 0s (71.9 kB/s)         \nSelecting previously unselected package rsyslog-gnutls.\n(Reading database ... 56568 files and directories currently installed.)\nPreparing to unpack .../rsyslog-gnutls_8.2112.0-2ubuntu2.2_s390x.deb ...\nUnpacking rsyslog-gnutls (8.2112.0-2ubuntu2.2) ...\nSetting up rsyslog-gnutls (8.2112.0-2ubuntu2.2) ...\nScanning processes...                                                                                     \nScanning linux images...                                                                                  \n\nRunning kernel seems to be up-to-date (ABI upgrades are not detected).\n\nNo services need to be restarted.\n\nNo containers need to be restarted.\n\nNo user sessions are running outdated binaries.\n\nNo VM guests are running outdated hypervisor (qemu) binaries on this host.\n</code></pre> </li> <li> <p>Optional: Repeat <code>apt-cache policy rsyslog-gnutls</code> to see that the package is now installed:</p> <pre><code>apt-cache policy rsyslog-gnutls\n</code></pre> Output showing that rsyslog-gnutls is installed <pre><code>rsyslog-gnutls:\n    Installed: 8.2112.0-2ubuntu2.2\n    Candidate: 8.2112.0-2ubuntu2.2\n    Version table:\n*** 8.2112.0-2ubuntu2.2 500\n        500 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x Packages\n        500 http://ports.ubuntu.com/ubuntu-ports jammy-security/main s390x Packages\n        100 /var/lib/dpkg/status\n    8.2112.0-2ubuntu2 500\n        500 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x Packages\n</code></pre> </li> </ol>"},{"location":"lab/grep11/configureRsyslog/#create-a-certification-authority-ca-for-your-rsyslog-service","title":"Create a Certification Authority (CA) for your rsyslog service","text":""},{"location":"lab/grep11/configureRsyslog/#background-information","title":"Background Information","text":"<p>The TLS authentication for communication with the rysyslog service requires an X509 certificate and private key.  An X509 certificate contains a public key that goes with the private key.  An X509 certificate also contains metadata including the identification of the holder of the certificate, the purposes the certificate is intended for, and more. Think of a public key as a yummy cake baked with yellow dough, it's moist and tastes pretty good- but the X509 certificate wrapped around it is like the chocolate icing and the rainbow sprinkles- it's delicious!  (Break time!!) If you haven't given up on the analogy, think of the private key as the secret recipe to bake the cake that nobody but you knows about.  For a slightly more technical (but still just scratching the surface), but perhaps not as tasty, description of public key cryptography check out this description from one of our earlier labs.</p> <p>An X509 certificate needs to be created and signed by a certification authority (CA). </p> <p>The authority prefers certification</p> <p>Most people call a CA a \"certificate authority\" but actually the Internet Request for Comment (RFC) that defines the X509 standard uses the term \"certification authority\". Imagine that! </p> <p>For the lab you will create your own CA- what is often called a \"self-signed\" CA. A utility called <code>openssl</code> can be used to do this.  A CA signs certificates that it creates. In order to digitally sign something, you use a private key.  In simple terms, a publicly known algorithm- which can be poked at and prodded at by researchers and academics in an effort to prove its security or to hopefully win a large bounty by proving its insecurity- is run against a private key that nobody else knows, and produces a unique output, or signature.  This signature can be verified algorithmically by anybody who holds the private key's corresponding public key.</p> Who holds the public key? <p>That's right, the public ! It is safe to share your public key with others- it is your private key that you must protect from loss, theft or exposure.</p> <p>If you receive a piece of digital information that is signed, and the public key that corresponds to the private key used to create the signature, you can prove that whoever signed this had to have held the private key in order to create the signature.  Okay, cool.  But what if a malicious actor had the private key and gave you the public key? Would you feel so great knowing you verified the signer if they were malicious?  No!  That is where a CA comes in. The idea is that the following process occurs:</p> <ol> <li>An individual or organization submits a request for a certificate (CSR) with their public key</li> <li>The CA takes the effort to verify that the owner of the public key is a good actor and is who they say they are and can be trusted</li> <li>The CA creates the certificate that holds the public key, essentially stating \"I am a CA and you can trust me and the holder of this certificate that I just signed is a good person and they are who they say they are, so you can trust this certificate and anything it signs\".</li> </ol> How is that working out for us? <p>The X509 Certification Authority protocol is outstanding in theory. In practice its vulnerability lies in the need for the holders of private keys to protect them with diligence.  Losing your private key is akin to losing your wallet or your house key or your drivers license or ... you get the picture.  Attacks such as software supply chain attacks are often accomplished by malicious actors who have stolen others' private keys.  This is why initiatives like Confidential Computing and technologies like Hardware Security Modules are important.</p> <p>In real world practice, for external, customer-facing applications an enterprise will ask a well-known and trusted third-party CA to issue its certificates. In many cases an enterprise may run its own internal CA for certificates for internal applications.   In this lab you're going to create your own CAs.  Hopefully, you trust yourself  enough to feel comfortable with this...</p>"},{"location":"lab/grep11/configureRsyslog/#hands-on-keyboard-time","title":"Hands on keyboard time","text":"<ol> <li> <p>Get out of root for the moment, as you'll be doing this certificate work with your regular authority:</p> <pre><code>exit\n</code></pre> Output when getting out of root <pre><code>root@ubuntu2204:~# exit\nlogout\n</code></pre> <p>Your prompt should now end with a dollar sign ($) indicating you are operating with your regular authority as userid student, as opposed to the hash sign (#) prompt that you had when you were operating with root authority.  </p> </li> <li> <p>Run this command sequence:</p> <pre><code>cd ${HOME} &amp;&amp; mkdir -p rsyslogWork &amp;&amp; cd rsyslogWork\n</code></pre> <p>It accomplishes the following:</p> <ol> <li>Ensures you are in your home directory (which you already are in unless you wandered off on your own)</li> <li>Creates a fresh directory that you'll work in for this activity</li> <li>Switches to this new directory</li> </ol> </li> <li> <p>Create a private key. It will be the private key your self-signed CA will use so call it <code>ca-key.pem</code>:</p> <pre><code>openssl genrsa -out ca-key.pem 4096\n</code></pre> </li> <li> <p>Run the following command to create a configuration file for your CA</p> <pre><code>cat &lt;&lt; EOF &gt; ca.cnf\n[ req ]\ndefault_bits = 2048\ndefault_md = sha256\nprompt = no\nencrypt_key = no\ndistinguished_name = dn\n\n[ dn ]\nC = US\nO = IBM WSC IBM Z and LinuxONE\nCN = CA for rsyslog for SE-enabled KVM guests\n\nEOF\n</code></pre> <p>Why are we using .cnf configuration files?</p> <p>Some <code>openssl</code> commands have a tendency to ask a bunch of questions which can be tedious and error-prone when typing the answers, but you can avoid that by creating a configuration file that provides the answers and thus avoids the questions.  You'll see this pattern throughout the lab.</p> </li> <li> <p>A CA itself has a certificate that it can send or make available to others (others being people, or computer processes, or whomever). You don't have one yet- all you have is a private key. A certificate signing request (CSR) can be created from a private key- it derives the public key from the private key and creates an object called a Certificate Signing Request (CSR) that contians the public key and other identifying information and can be sent to a CA. Create your CSR:</p> <pre><code>openssl req -config ca.cnf -key ca-key.pem -new -out ca-req.csr\n</code></pre> <p>Certificate Signing Request (CSR)</p> <p>The RSA algorithm is a magical mystery tour to most mortals, but the algorithm is such that the public key can be extracted from a private key. You will use the private key as input to a command that will create what is known as a CSR. A CSR is a file that contains the public key (the yellow dough) and other information (the icing and the sprinkles) that you then send to the CA and say \"please, please, I'm a good person and you can trust me and please create a real certificate for me\".  A CSR is like a caterpillar  and the resulting certificate is like a beautiful butterfly .</p> <p>Now you have a certificate signing request. </p> <p>So you normally send a CSR to a CA to sign.  There's a \"chicken or the egg\" problem here.  If a CA needs a Certificate,  and a Certificate has to be created by another CA, then how did that CA get created?  By another CA?  Yes, possibly.  But, does the chain go on forever?  No-  at some point in the chain the CA's certificate was signed by its own private key, and not a higher CA.  This is the root of the chain, and it is self-signed. In real life, a chain could be many layers deep, but it eventually has to stop.  Think of it like a management chain in an organization's org chart-  there are first-line managers, second-line managers, and so forth up to the CEO.  The Root certificate is like the CEO.  </p> </li> <li> <p>Since you're the boss of your lab, and the worker, you don't need a big long chain of CA's.  Just one will do fine.  So you'll build a single root, or self-signed, CA, and you'll like it!  :</p> <pre><code>openssl x509 -signkey ca-key.pem -in ca-req.csr -req -days 365 -out ca.crt\n</code></pre> Output from creating self-signed CA certificate <pre><code>Certificate request self-signature ok\nsubject=C = US, O = IBM WSC IBM Z and LinuxONE, CN = CA for rsyslog for SE-enabled KVM guests\n</code></pre> </li> </ol>"},{"location":"lab/grep11/configureRsyslog/#create-certificate-and-key-for-your-rsyslog-service","title":"Create certificate and key for your rsyslog service","text":""},{"location":"lab/grep11/configureRsyslog/#process-overview","title":"Process Overview","text":"<p>In real life, a CA will probably issue lots of certificates- it's how they make money.  Your CA is only going to create a couple:</p> <ul> <li>a certificate for the rsyslog service which you will create next.</li> <li>a certificate for the client (your future GREP11 Server) of the rsyslog service, which you will create later in the lab.  </li> </ul> <p>The process is the same as what you just went through for creating your CA for steps 1-3 below but differs slightly for step 4:</p> <ol> <li>Create a private key</li> <li>Create a configuration file to answer questions ahead of time</li> <li>Use the key and the config file to create a CSR</li> <li>This time you'll have your \"self-signed\" CA create and sign the certificate.  </li> </ol>"},{"location":"lab/grep11/configureRsyslog/#creation-time","title":"Creation time","text":"<ol> <li> <p>Create the private key:</p> <pre><code>openssl genrsa -out server-key.pem 4096\n</code></pre> </li> <li> <p>Create the configuration file to preemptively answer the inevitable questions.  We've used a command pipe to extract your guest's IP address into a variable and then we use that variable in two places in the configuration file.  If you borrow this technique for your system please ensure that this command pipe works on your system:</p> <pre><code>export ip=\"$(ip route get 1.1.1.1 | grep -oP 'src \\K[^ ]+')\" &amp;&amp; \\\ncat &lt;&lt; EOF &gt; server.cnf\n[ req ]\ndefault_bits = 2048\ndefault_md = sha256\nprompt = no\nencrypt_key = no\ndistinguished_name = dn\n\n[ server ]\nsubjectAltName = IP:${ip}\nextendedKeyUsage = serverAuth\n\n[ dn ]\nC = US\nO = Rsyslog Service\nCN = ${ip}\nEOF\n</code></pre> <p>Optional: You know you can't resist looking at the output file to see if that IP magic worked, so just do it:</p> <pre><code>cat server.cnf\n</code></pre> </li> <li> <p>Create the rsyslog service's CSR:</p> <pre><code>openssl req -config server.cnf -key server-key.pem -new -out server-req.csr\n</code></pre> </li> <li> <p>\"Send\" the request to your \"self-signed\" CA in order to create the certificate:</p> <pre><code>openssl x509 -req -in server-req.csr -days 365 -CA ca.crt -CAkey ca-key.pem -CAcreateserial -extfile server.cnf -extensions server -out server.crt\n</code></pre> Example output from certificate creation <pre><code>Certificate request self-signature ok\nsubject=C = US, O = Rsyslog Test Server, CN = 172.16.0.42\n</code></pre> <ol> <li> <p>Run this command to display the rsyslog service's certificate in a form that a human can comprehend:</p> <pre><code>openssl x509 -noout -text -in server.crt </code></pre> Example human-readable display of certificate <pre><code>Certificate:\n    Data:\n        Version: 3 (0x2)\n        Serial Number:\n            72:1b:54:77:9d:c9:28:b0:7c:f0:b8:d6:dc:24:e1:b1:60:fa:59:f7\n        Signature Algorithm: sha256WithRSAEncryption\n        Issuer: C = US, O = IBM WSC IBM Z and LinuxONE, CN = CA for rsyslog for SE-enabled KVM guests\n        Validity\n            Not Before: Feb 14 01:18:18 2023 GMT\n            Not After : Feb 14 01:18:18 2024 GMT\n        Subject: C = US, O = Rsyslog Test Server, CN = 172.16.0.42\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n                Public-Key: (4096 bit)\n                Modulus:\n                    00:aa:ed:d0:83:3c:65:8c:6c:4d:f5:bc:bc:56:e9:\n                    3c:57:ab:b8:3c:29:14:2a:73:d6:ca:a0:7e:0c:00:\n                    fc:4f:cc:28:88:1c:01:e9:26:9e:5e:0b:60:5e:ee:\n                    69:f3:c7:c8:f9:26:19:71:a7:1a:c1:54:3a:3d:6b:\n                    01:4a:e2:20:ab:89:a5:31:a7:f4:a2:39:71:30:21:\n                    29:17:4f:04:15:73:1d:b7:b6:c2:81:c2:f1:d9:a8:\n                    29:d8:ca:c9:d6:97:f3:37:8e:17:9d:a7:b1:30:c8:\n                    5c:1c:be:e2:75:5e:9f:88:08:76:54:5a:ee:40:d4:\n                    90:26:2b:74:35:71:a2:d1:4d:86:db:46:bf:18:38:\n                    0a:fb:e4:1a:ab:ef:f6:49:1e:7b:bc:76:71:3a:b7:\n                    5e:e8:c0:c7:3d:db:74:2d:87:20:5b:e6:5e:27:67:\n                    1a:e9:e1:ea:20:b8:d2:fc:5e:2d:79:c0:e5:46:22:\n                    cf:6e:26:54:c6:00:d1:d0:05:46:0b:9d:97:8c:cb:\n                    68:e7:a4:b2:9a:47:21:67:e5:56:32:cb:ba:c3:0e:\n                    c8:f3:f4:17:02:ca:ee:ac:37:0e:f3:40:cf:a4:56:\n                    98:9d:b3:e3:e2:c2:43:d7:3b:a5:c1:09:92:2b:e9:\n                    fb:5b:a6:73:d0:83:97:c9:70:7f:f8:84:59:b3:b6:\n                    4f:e8:40:98:92:74:5c:8c:9f:db:27:7f:94:4b:00:\n                    a6:cf:06:9b:0f:a9:f4:35:17:01:e6:d6:6d:c2:78:\n                    f8:41:59:f6:f6:f2:11:d1:52:28:b5:06:78:ba:db:\n                    12:f2:3f:c6:ef:14:64:cd:85:49:ce:8e:fc:91:b8:\n                    2a:c3:25:6a:cc:3c:46:9d:e8:10:aa:30:fd:3b:55:\n                    3a:26:97:00:8b:62:c4:d6:89:f0:36:68:13:63:19:\n                    ba:18:f4:0c:4f:bc:5d:34:c8:24:d9:8e:2f:4b:e5:\n                    d9:dd:9f:39:8d:00:54:fe:d9:00:d7:f1:71:6b:8b:\n                    9c:ed:66:de:6a:26:3f:48:cb:3a:4a:fc:9c:50:12:\n                    f5:da:dc:e7:e5:08:6c:0a:6d:60:73:cf:e6:b2:3e:\n                    06:59:98:00:2c:97:25:38:01:50:2e:c2:c6:35:fa:\n                    e4:d5:20:01:fb:9d:ca:4c:78:3f:7a:ad:c7:5d:db:\n                    5e:04:c7:0f:e2:9f:a1:e9:27:f8:f2:a9:9f:00:07:\n                    58:68:c9:3f:d6:41:5b:46:90:f5:26:6a:04:2c:cf:\n                    44:c9:f8:1e:5d:38:95:95:71:e2:30:57:d5:83:41:\n                    73:a4:00:88:6b:99:84:71:d3:60:ce:32:9c:bb:3b:\n                    39:46:a7:77:fd:7e:ed:1c:81:02:e3:da:83:85:2c:\n                    c9:60:c7\n                Exponent: 65537 (0x10001)\n        X509v3 extensions:\n            X509v3 Subject Alternative Name: \n                IP Address:172.16.0.42\n            X509v3 Extended Key Usage: \n                TLS Web Server Authentication\n            X509v3 Subject Key Identifier: \n                CC:01:AD:BA:8C:5F:31:B9:58:A9:2D:4E:05:C7:B1:B7:82:10:90:05\n            X509v3 Authority Key Identifier: \n                DirName:/C=US/O=IBM WSC IBM Z and LinuxONE/CN=CA for rsyslog for SE-enabled KVM guests\n                serial:0B:4A:84:C6:84:00:F8:7F:B7:0A:F0:82:FD:4E:C1:F2:99:C2:63:BC\n    Signature Algorithm: sha256WithRSAEncryption\n    Signature Value:\n        4c:a3:7a:76:21:0d:8f:db:e9:3a:a6:3f:6b:3a:9a:5d:bb:ac:\n        7e:75:5c:ed:69:3c:b9:2b:6e:84:1c:fc:1f:56:47:ff:b3:38:\n        92:fe:0f:5b:2c:87:32:0e:8f:60:c3:33:ff:d5:89:26:61:9a:\n        7f:ce:ae:f3:6b:cc:77:1b:4d:d0:59:5f:d9:09:e1:fa:21:5c:\n        6a:6f:b3:71:45:10:98:4f:6e:fe:08:7f:31:42:e6:dd:83:9a:\n        11:de:2d:eb:b5:b9:40:4d:80:86:7f:f8:88:cc:87:60:38:d4:\n        e2:9a:89:9d:ec:43:61:ad:34:96:38:93:ca:4a:63:8d:cc:b7:\n        33:98:33:e2:63:c1:7b:04:98:80:b3:e1:54:df:f6:24:57:82:\n        98:c4:e8:64:8a:3b:d2:af:65:56:d7:97:c0:c3:dc:45:06:c9:\n        4f:ce:5b:d3:49:7f:2b:28:83:27:57:b9:bf:1a:46:81:68:4c:\n        6b:85:d7:db:f0:d4:25:7b:3d:92:63:d0:91:b5:ec:df:cb:e4:\n        6b:6c:b0:c4:47:3c:c6:91:64:33:f6:11:6b:5b:f7:70:bd:e1:\n        71:ef:a6:28:57:b2:a0:e0:2e:ef:ab:34:7a:c4:b8:24:18:88:\n        5f:92:0b:92:ca:14:a2:b6:62:ab:2c:e6:c2:bb:27:91:54:de:\n        84:56:1e:ed:f3:7d:b7:e8:34:b4:78:76:2c:1f:af:d9:61:b7:\n        6e:59:fa:e8:33:38:b4:5e:30:69:71:06:4d:df:fe:cb:46:03:\n        ba:69:7c:85:3c:f0:73:f7:d8:4e:b0:39:aa:79:72:1f:52:2e:\n        05:cb:81:9f:e3:62:6b:66:55:7c:92:13:21:62:dc:fd:9d:8f:\n        f8:77:dd:d2:b6:61:c4:8f:fa:fa:a0:74:95:fa:9d:f2:5d:d2:\n        7d:d4:41:95:d8:41:50:99:7d:80:3d:36:28:75:28:62:67:05:\n        11:a3:95:c7:85:8f:20:37:d6:b8:b5:8a:f6:8a:e3:d0:85:6e:\n        cd:2a:41:f9:e7:48:bb:b0:b7:54:dc:6b:df:c9:a2:5e:f7:61:\n        c2:3a:4c:82:7e:6b:e9:82:cf:c6:3a:7f:a2:ae:39:00:d9:ac:\n        bf:8a:84:72:e6:ae:c1:75:e0:92:60:5e:cd:4b:64:1f:5a:44:\n        3a:09:15:2c:95:b8:c3:ca:44:ec:79:1e:d5:96:bc:20:9a:7a:\n        cf:6b:e4:cf:e0:91:f2:c2:e6:fd:f1:8a:66:c4:ae:eb:90:90:\n        f4:ec:64:66:9a:9a:11:8d:11:ab:ef:05:d2:42:fb:e5:2c:78:\n        8a:db:16:b7:96:ae:06:b8:42:b4:c7:23:26:b2:9a:c2:85:d8:\n        6b:6d:d8:4e:84:0e:ab:a1\n</code></pre> </li> </ol> </li> </ol>"},{"location":"lab/grep11/configureRsyslog/#copy-certificates-and-private-key-to-the-location-specified-in-the-etcrsyslogdserverconf-file","title":"Copy certificates and private key to the location specified in the /etc/rsyslog.d/server.conf file","text":"<p>The configuration file you created in rsyslog a little while ago (near the top of this page) specified <code>/var/lib/rsyslog/x509</code> as the directory to hold some files. You just created these files in your rsyslogWork directory, so now create the /var/lib/rsyslog/x509 directory and copy the files in there:</p> <pre><code>sudo mkdir -p /var/lib/rsyslog/x509 &amp;&amp; \\\nfor file in ca.crt server.crt server-key.pem ; do \\\nsudo cp -ipv ${file} /var/lib/rsyslog/x509/. ; \\\ndone \\\n&amp;&amp; sudo chown -R syslog:syslog /var/lib/rsyslog\n</code></pre> Output from copying files <pre><code>'ca.crt' -&gt; '/var/lib/rsyslog/x509/./ca.crt'\n'server.crt' -&gt; '/var/lib/rsyslog/x509/./server.crt'\n'server-key.pem' -&gt; '/var/lib/rsyslog/x509/./server-key.pem'\n</code></pre>"},{"location":"lab/grep11/configureRsyslog/#restart-your-rsyslog-service","title":"Restart your rsyslog service","text":"<p>You'll truly know that you configured everything correctly later in the lab when you try to write messages to it from your yet-to-be-created HPVS 2.1.6 GREP11 Server. But for now, you will verify it somewhat by taking a before and after snapshot of which TCP ports on your system are listening.  </p> <p>Run this command, and then in a moment you'll repeat the command.  What you should notice here is the absence of port 6514 in the output:</p> <pre><code>sudo lsof -nP -iTCP -sTCP:LISTEN\n</code></pre> Output showing listening TCP ports <pre><code>COMMAND   PID            USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\nsystemd-r 602 systemd-resolve   14u  IPv4  15472      0t0  TCP 127.0.0.53:53 (LISTEN)\nsshd      709            root    3u  IPv4  16871      0t0  TCP *:22 (LISTEN)\nsshd      709            root    4u  IPv6  16882      0t0  TCP *:22 (LISTEN)\n</code></pre> <p>You are now ready to restart the rsyslog service on your machine:</p> <pre><code>sudo systemctl restart rsyslog\n</code></pre> <p>No news is good news on the above command- it's pretty quiet when it works.</p> <p>Display the rsyslog service's status and notice it hasn't been active very long, since it was just restarted:</p> <pre><code>sudo systemctl status rsyslog\n</code></pre> <p>Reminder:  q gets you back to a command prompt.</p> Output showing rsyslog status after restart <pre><code>\u25cf rsyslog.service - System Logging Service\n     Loaded: loaded (/lib/systemd/system/rsyslog.service; enabled; vendor preset: enabled)\n     Active: active (running) since Tue 2023-02-14 01:30:47 UTC; 13s ago\nTriggeredBy: \u25cf syslog.socket\n       Docs: man:rsyslogd(8)\n             man:rsyslog.conf(5)\n             https://www.rsyslog.com/doc/\n   Main PID: 1439 (rsyslogd)\n      Tasks: 9 (limit: 2350)\n     Memory: 1.8M\n        CPU: 1.008s\n     CGroup: /system.slice/rsyslog.service\n             \u2514\u25001439 /usr/sbin/rsyslogd -n -iNONE\n\nFeb 14 01:30:46 ubuntu2204 systemd[1]: Starting System Logging Service...\nFeb 14 01:30:47 ubuntu2204 rsyslogd[1439]: imuxsock: Acquired UNIX socket '/run/systemd/journal/syslog' (&gt;\nFeb 14 01:30:47 ubuntu2204 rsyslogd[1439]: rsyslogd's groupid changed to 115\nFeb 14 01:30:47 ubuntu2204 rsyslogd[1439]: rsyslogd's userid changed to 107\nFeb 14 01:30:47 ubuntu2204 rsyslogd[1439]: [origin software=\"rsyslogd\" swVersion=\"8.2112.0\" x-pid=\"1439\" &gt;\nFeb 14 01:30:47 ubuntu2204 systemd[1]: Started System Logging Service.\n</code></pre> <p>Now when you rerun the command to see the listening TCP ports, seeing 6514 in the output is an indication of success.  If you don't see 6514 in the output, it's time to make those instructors earn their keep:</p> <pre><code>sudo lsof -nP -iTCP -sTCP:LISTEN\n</code></pre> Expected output showing port 6514 is listening <pre><code>COMMAND    PID            USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\nsystemd-r  602 systemd-resolve   14u  IPv4  15472      0t0  TCP 127.0.0.53:53 (LISTEN)\nsshd       709            root    3u  IPv4  16871      0t0  TCP *:22 (LISTEN)\nsshd       709            root    4u  IPv6  16882      0t0  TCP *:22 (LISTEN)\nrsyslogd  1439          syslog    6u  IPv4  22401      0t0  TCP *:6514 (LISTEN)\nrsyslogd  1439          syslog    7u  IPv6  22402      0t0  TCP *:6514 (LISTEN)\n</code></pre> <p>Switch to your terminal tab or window for your session with the RHEL host, as you will start the next section of the lab working on the RHEL host.</p> <p>Please proceed to the next section of the lab by clicking the Next link on the bottom right of this page.</p>"},{"location":"lab/grep11/configureRsyslogForGREP11/","title":"Create rsyslog client certificate for the GREP11 Server","text":""},{"location":"lab/grep11/configureRsyslogForGREP11/#overview-of-this-section","title":"Overview of this section","text":"<p>In the last section you created the following:</p> <ol> <li>self-signed CA for the rsyslog service</li> <li>server certificate for the rsyslog service</li> </ol> <p>In this section you will use your self-signed CA (1 above) to create:</p> <ol> <li>client certificate for your (not-yet-created) HPVS 2.1.6 GREP11 Server</li> </ol> <p>Your GREP11 Server will be a client to the rsyslog service. (It serves clients who want to make GREP11 requests, but for logging it is a client to the rsyslog service).</p> <p>Please read the instructions carefully</p> <p>You'll be switching between both of your userids in this section:</p> <ol> <li>your studentnn userid on the RHEL host where nn is unique to you and between 01 and 20</li> <li>your student userid on your Ubuntu KVM guest </li> </ol> <p>We'll do our part by telling you when to switch.  Please do your part by reading the instructions carefully!</p>"},{"location":"lab/grep11/configureRsyslogForGREP11/#if-necessary-log-in-to-the-rhel-host","title":"If necessary, log in to the RHEL host","text":"<p>If you are following the lab in order in one sitting, you are already logged in and have switched to the correct terminal tab and window, the one that looks like this:</p> <p></p> <p>But if you need to log in for any reason, the command is <code>ssh -l ${StudentID} 192.168.22.64</code></p>"},{"location":"lab/grep11/configureRsyslogForGREP11/#create-certificate-for-client-access-to-rsyslog","title":"Create certificate for client access to rsyslog","text":"<p>Steps 1 through 5 will be performed on the RHEL host.</p> <ol> <li> <p>Create a working directory and switch to it:</p> <pre><code>mkdir ~/rsyslogClientWork &amp;&amp; cd rsyslogClientWork\n</code></pre> </li> <li> <p>Create a new private key:</p> <pre><code>openssl genrsa -out client-key.pem 4096\n</code></pre> Example output when creating RSA private key <pre><code>Generating RSA private key, 4096 bit long modulus (2 primes)\n..++++\n................................................................................++++\ne is 65537 (0x010001)\n</code></pre> <p>You should see output similar to what is shown above on the RHEL 8.5 host.  This same command was very quiet on your Ubuntu KVM guest.</p> </li> <li> <p>Create a configuration file:</p> <pre><code>cat &lt;&lt; EOF &gt; client.cnf\n[ req ]\ndefault_bits = 2048\ndefault_md = sha256\nprompt = no\nencrypt_key = no\ndistinguished_name = dn\n\n[ dn ]\nC = US\nO = IBM WSC IBM Z and LinuxONE\nCN = SE-enabled HPVS 2.1.6 Grep11 Server\n\nEOF\n</code></pre> </li> <li> <p>Create a certificate signing request (CSR):</p> <pre><code>openssl req -config client.cnf -key client-key.pem -new -out client-req.csr\n</code></pre> </li> <li> <p>Now you are going to use a pattern that is similar to a real-world pattern:</p> <p>You are going to send your CSR, which you just created on the RHEL host, to the Rsyslog CA which you created on your Ubuntu KVM guest:</p> <pre><code>scp client-req.csr student@${StudentGuestIP}:./rsyslogWork/.\n</code></pre> <p>As shown in the sample output below, you may need to type yes since this is the first connection between the two systems, and you may have to enter a password that will be supplied by the instructors:</p> Example prompt and output when sending file <pre><code>The authenticity of host '172.16.0.42 (172.16.0.42)' can't be established.\nECDSA key fingerprint is SHA256:QBZpZnpbKTyu8uG3XmcB3z2STnArtTjeVPwBtQONSnc.\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nWarning: Permanently added '172.16.0.42' (ECDSA) to the list of known hosts.\nstudent@172.16.0.42's password: \nclient-req.csr                                                          100% 1691     9.2MB/s   00:00 \n</code></pre> </li> <li> <p>Switch to your terminal tab or window for your KVM Ubuntu guest.  Yes, this one:</p> <p></p> </li> <li> <p>If you are doing the lab in one sitting, in order, then you are already logged in.  If you need to login for any reason the command is <code>ssh -p ${Student_SSH_Port} -l student 192.168.22.64</code>.  Steps 8 through 12 will be performed on your Ubuntu KVM guest.</p> </li> <li> <p>You are now the CA registrar. Switch to your working directory and find the certificate signing request(CSR) that your customer (i.e., you) sent to you.  </p> <pre><code>cd ${HOME}/rsyslogWork &amp;&amp; ls -l client*.csr\n</code></pre> Make sure your csr is listed <pre><code>-rw-r--r-- 1 student student 1691 Feb 14 01:47 client-req.csr\n</code></pre> </li> <li> <p>You will do your due diligence and check the contents of the CSR:</p> <pre><code>openssl req -noout -text -in client-req.csr\n</code></pre> Example human-readable display of CSR <pre><code>Certificate Request:\n    Data:\n        Version: 1 (0x0)\n        Subject: C = US, O = IBM WSC IBM Z and LinuxONE, CN = SE-enabled HPVS 2.1.6 Grep11 Server\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n                Public-Key: (4096 bit)\n                Modulus:\n                    00:b0:38:b1:27:ee:a2:9f:35:10:dd:74:b2:46:e6:\n                    b8:2a:e4:c9:7f:7d:b3:1d:45:96:7d:bc:9d:5a:90:\n                    06:64:da:b8:23:73:f3:99:46:54:a3:2a:a8:8e:db:\n                    10:96:7e:de:04:65:81:ee:68:f1:5e:4d:a1:3d:db:\n                    2e:44:3a:ff:e2:fe:60:86:ad:90:b9:91:f1:4b:94:\n                    c9:43:4a:85:56:32:2a:ab:c9:2a:71:de:b7:fc:40:\n                    e2:1b:aa:17:08:3a:65:4a:b8:70:d8:5c:b4:b6:ca:\n                    4f:8d:a1:d0:03:04:20:4e:7e:23:26:20:85:45:e4:\n                    21:ec:bb:f8:38:64:36:6d:7c:a1:8a:d8:af:14:1b:\n                    72:bf:e8:cd:2f:2d:2c:0b:5a:39:4e:53:41:f8:a0:\n                    33:91:be:90:64:18:1c:cf:c2:d9:a0:bf:78:db:88:\n                    19:6b:be:0c:10:76:fc:96:fb:01:14:f5:90:8a:4d:\n                    a8:0c:0b:10:29:1d:fb:45:e1:f2:59:b5:33:e5:20:\n                    f8:76:22:c8:4d:d1:55:dc:de:10:79:66:b8:ff:fa:\n                    ee:e4:03:a5:77:9d:50:a1:f2:60:35:84:e1:44:ef:\n                    f4:be:be:a9:1b:17:5e:26:4a:ea:24:7d:ff:80:d2:\n                    d6:95:4f:1b:b6:5e:22:c6:f2:81:17:bb:fe:ce:f6:\n                    44:29:79:4e:ad:76:04:db:a7:8d:a4:db:8c:e3:cd:\n                    bf:48:37:99:4c:1c:e0:26:0f:9f:8b:a4:1f:48:71:\n                    44:d0:5f:ae:c6:93:83:ab:b8:7b:7b:b8:f3:1d:f1:\n                    7d:34:3b:d5:32:f0:74:d9:ee:0b:cd:e7:a9:54:49:\n                    2b:23:dc:1a:57:ae:a3:03:d8:9c:47:14:75:0c:47:\n                    c6:be:e3:84:61:e7:15:b8:fe:0b:5f:53:a0:f6:a8:\n                    92:e4:2c:c9:51:43:de:3f:be:0f:a6:c7:44:1f:81:\n                    c9:c0:9d:d3:3a:42:2f:b0:52:59:47:c6:da:96:93:\n                    ba:e7:11:f4:dd:ba:75:46:86:b5:ef:ee:49:34:92:\n                    36:03:32:00:99:71:ed:83:1a:cd:3f:e3:79:7b:ee:\n                    04:49:59:aa:01:ce:4d:67:0e:0f:88:e6:62:82:1e:\n                    0b:07:01:cf:74:38:20:7b:0d:69:f5:2e:09:e5:84:\n                    20:f3:82:15:7f:a4:0d:ae:35:da:de:f2:a9:30:6e:\n                    3e:e3:72:26:b3:18:10:6c:d7:df:4c:fc:bf:e3:33:\n                    8c:c6:e3:83:04:db:c9:a9:a8:41:d2:97:be:a0:ec:\n                    bd:f1:89:18:eb:c5:e7:0b:fc:47:30:c8:e1:cd:e6:\n                    54:cd:f1:e7:c3:23:51:48:4f:fd:89:49:43:6d:96:\n                    e0:cc:69\n                Exponent: 65537 (0x10001)\n        Attributes:\n            (none)\n            Requested Extensions:\n    Signature Algorithm: sha256WithRSAEncryption\n    Signature Value:\n        8d:0b:7b:fd:eb:6b:04:85:4f:b6:a8:81:8f:03:77:aa:26:7d:\n        58:44:3a:af:1b:de:fe:73:52:38:7c:8b:e9:2d:47:34:93:31:\n        9d:04:0b:08:3a:3c:92:72:cf:60:c6:3b:83:6c:9a:8d:7b:08:\n        4b:13:44:8b:3c:14:58:f7:b6:26:8c:c8:d5:29:f7:f8:fb:98:\n        a6:9f:78:6a:9a:f4:10:88:16:55:b8:83:ee:7d:1b:95:4c:02:\n        77:10:9c:ca:61:01:c7:33:7f:65:81:6e:5e:18:25:a7:68:26:\n        e0:5e:b5:6d:89:00:31:ed:21:bf:32:c8:13:4b:00:c6:a3:b5:\n        5f:4d:13:4c:86:51:31:59:02:92:fd:88:30:3a:1f:ac:da:8b:\n        82:25:b2:3d:7e:1d:1f:e3:55:aa:7a:26:1f:85:b6:86:87:34:\n        9a:36:5e:55:0b:a9:6b:dd:77:56:4f:54:3e:27:ec:ac:a7:aa:\n        ea:bb:86:40:a2:e8:af:88:77:5b:41:ec:42:0f:06:1e:7a:36:\n        85:5f:36:14:d4:02:30:3c:27:8d:85:61:0c:93:83:a0:0d:cd:\n        e7:c3:ac:02:d9:49:2e:58:a5:a1:24:33:56:a6:6c:e1:dc:dc:\n        5b:11:32:65:84:08:70:7e:b2:52:2f:34:5e:83:46:45:8e:91:\n        dc:4a:2d:31:2d:3e:3a:4a:03:a2:c4:02:d9:7f:6a:89:42:10:\n        da:a4:7a:24:c2:2a:b5:fb:25:c8:1b:45:5f:f1:85:91:ca:0a:\n        44:74:8f:60:44:86:e5:49:ab:d9:d1:d8:fa:0c:6d:1f:a8:7c:\n        7c:6f:3f:66:0b:d9:46:5a:5c:4d:6e:79:7a:c2:eb:d2:02:a9:\n        80:1e:66:53:b9:fd:5d:cf:6e:86:e7:58:7f:a4:74:31:cd:9f:\n        b6:c2:b0:24:69:70:2f:9e:6e:4f:2d:74:53:8b:15:74:6c:08:\n        bd:f0:b9:d2:e4:e0:a4:14:cf:b1:77:4d:6d:88:8a:ee:c7:6c:\n        4b:15:c9:91:85:7d:a2:fa:cd:10:27:b3:27:fc:3b:f2:d1:86:\n        57:33:0d:27:02:f2:c6:ab:46:8e:00:de:88:1f:59:d0:fd:6f:\n        30:39:94:ba:af:17:89:37:df:0d:9e:1a:a7:d6:49:de:f5:40:\n        61:e3:fa:52:70:3d:57:76:9f:fa:15:30:be:64:85:27:61:b0:\n        02:9f:f6:20:c3:2d:1a:84:44:48:f6:08:db:f8:80:b9:ea:38:\n        16:52:fe:2a:c0:f1:d9:8f:80:37:9f:fd:e2:ec:1e:99:c3:01:\n        2d:b6:11:dd:5a:29:c8:02:2c:aa:d7:3f:78:c5:f2:fe:29:d7:\n        98:f4:d1:1d:7e:9e:5d:8d\n</code></pre> </li> <li> <p>Time to mint the certificate</p> <p>Due diligence check</p> <p>For the purposes of this lab assume you've done a background check on the customer, checked their reviews on Yelp and NextDoor, looked at their Facebook page and LinkedIn profiles.  You're a little concerned with some of those college fraternity party pictures on Facebook, but, what the heck, their check has cleared the bank, so you decide to go ahead and mint the certificate.</p> <pre><code>openssl x509 -req -in client-req.csr \\\n-days 365 -CA ca.crt -CAkey ca-key.pem \\\n-CAcreateserial -out client.crt\n</code></pre> Output from creating the certificate <pre><code>Certificate request self-signature ok\nsubject=C = US, O = IBM WSC IBM Z and LinuxONE, CN = SE-enabled HPVS 2.1.6 Grep11 Server\n</code></pre> </li> <li> <p>Your quality control department asks you to display the certificate before sending it to the customer:</p> <pre><code>openssl x509 -noout -text -in client.crt </code></pre> It should look similar to this [click to expand] <pre><code>Certificate:\n    Data:\n        Version: 1 (0x0)\n        Serial Number:\n            29:4a:dd:c7:66:81:ab:5a:1d:bb:20:76:a0:25:34:90:21:93:40:6b\n        Signature Algorithm: sha256WithRSAEncryption\n        Issuer: C = US, O = IBM WSC IBM Z and LinuxONE, CN = CA for rsyslog for SE-enabled KVM guests\n        Validity\n            Not Before: Feb 14 01:58:14 2023 GMT\n            Not After : Feb 14 01:58:14 2024 GMT\n        Subject: C = US, O = IBM WSC IBM Z and LinuxONE, CN = SE-enabled HPVS 2.1.6 Grep11 Server\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n                Public-Key: (4096 bit)\n                Modulus:\n                    00:b0:38:b1:27:ee:a2:9f:35:10:dd:74:b2:46:e6:\n                    b8:2a:e4:c9:7f:7d:b3:1d:45:96:7d:bc:9d:5a:90:\n                    06:64:da:b8:23:73:f3:99:46:54:a3:2a:a8:8e:db:\n                    10:96:7e:de:04:65:81:ee:68:f1:5e:4d:a1:3d:db:\n                    2e:44:3a:ff:e2:fe:60:86:ad:90:b9:91:f1:4b:94:\n                    c9:43:4a:85:56:32:2a:ab:c9:2a:71:de:b7:fc:40:\n                    e2:1b:aa:17:08:3a:65:4a:b8:70:d8:5c:b4:b6:ca:\n                    4f:8d:a1:d0:03:04:20:4e:7e:23:26:20:85:45:e4:\n                    21:ec:bb:f8:38:64:36:6d:7c:a1:8a:d8:af:14:1b:\n                    72:bf:e8:cd:2f:2d:2c:0b:5a:39:4e:53:41:f8:a0:\n                    33:91:be:90:64:18:1c:cf:c2:d9:a0:bf:78:db:88:\n                    19:6b:be:0c:10:76:fc:96:fb:01:14:f5:90:8a:4d:\n                    a8:0c:0b:10:29:1d:fb:45:e1:f2:59:b5:33:e5:20:\n                    f8:76:22:c8:4d:d1:55:dc:de:10:79:66:b8:ff:fa:\n                    ee:e4:03:a5:77:9d:50:a1:f2:60:35:84:e1:44:ef:\n                    f4:be:be:a9:1b:17:5e:26:4a:ea:24:7d:ff:80:d2:\n                    d6:95:4f:1b:b6:5e:22:c6:f2:81:17:bb:fe:ce:f6:\n                    44:29:79:4e:ad:76:04:db:a7:8d:a4:db:8c:e3:cd:\n                    bf:48:37:99:4c:1c:e0:26:0f:9f:8b:a4:1f:48:71:\n                    44:d0:5f:ae:c6:93:83:ab:b8:7b:7b:b8:f3:1d:f1:\n                    7d:34:3b:d5:32:f0:74:d9:ee:0b:cd:e7:a9:54:49:\n                    2b:23:dc:1a:57:ae:a3:03:d8:9c:47:14:75:0c:47:\n                    c6:be:e3:84:61:e7:15:b8:fe:0b:5f:53:a0:f6:a8:\n                    92:e4:2c:c9:51:43:de:3f:be:0f:a6:c7:44:1f:81:\n                    c9:c0:9d:d3:3a:42:2f:b0:52:59:47:c6:da:96:93:\n                    ba:e7:11:f4:dd:ba:75:46:86:b5:ef:ee:49:34:92:\n                    36:03:32:00:99:71:ed:83:1a:cd:3f:e3:79:7b:ee:\n                    04:49:59:aa:01:ce:4d:67:0e:0f:88:e6:62:82:1e:\n                    0b:07:01:cf:74:38:20:7b:0d:69:f5:2e:09:e5:84:\n                    20:f3:82:15:7f:a4:0d:ae:35:da:de:f2:a9:30:6e:\n                    3e:e3:72:26:b3:18:10:6c:d7:df:4c:fc:bf:e3:33:\n                    8c:c6:e3:83:04:db:c9:a9:a8:41:d2:97:be:a0:ec:\n                    bd:f1:89:18:eb:c5:e7:0b:fc:47:30:c8:e1:cd:e6:\n                    54:cd:f1:e7:c3:23:51:48:4f:fd:89:49:43:6d:96:\n                    e0:cc:69\n                Exponent: 65537 (0x10001)\n    Signature Algorithm: sha256WithRSAEncryption\n    Signature Value:\n        9f:41:62:18:0f:db:0a:84:f6:59:bc:cd:22:e4:73:d6:18:b0:\n        d0:4e:2a:da:8f:5c:46:06:f1:80:f3:4b:5d:cf:fe:a2:a3:97:\n        cc:bd:96:8e:d2:d4:58:ab:ac:56:dd:6f:12:3b:52:a8:df:e5:\n        4b:26:8e:92:b3:ed:28:9a:c3:28:6d:8b:f9:13:b0:01:fa:ed:\n        8f:48:08:08:07:ac:8f:61:00:fc:53:41:9e:d2:53:c5:b8:d7:\n        f4:f2:c9:cc:87:58:2d:48:f3:34:be:fe:0d:dc:9e:b6:11:74:\n        18:da:92:db:db:b3:c6:4f:10:63:6c:4c:fb:5f:86:36:9a:a8:\n        58:a9:d3:d9:7c:e0:8d:2f:96:f3:64:85:bf:8d:39:28:d2:06:\n        8b:63:93:d6:42:e3:ad:6d:5b:2e:d3:5a:3d:3c:af:1e:a2:61:\n        a0:d7:c7:a0:4f:b7:16:f1:3b:94:44:23:d8:16:6f:d7:38:36:\n        84:10:31:ac:e7:17:43:2a:24:04:26:5b:46:50:03:05:7c:8d:\n        cc:77:f5:c1:c1:e3:a2:04:4a:6d:7c:b2:c7:1e:e3:68:b0:4e:\n        24:92:63:dd:bd:87:3c:af:8c:63:a5:ea:2f:41:90:67:79:e3:\n        31:89:41:54:be:aa:44:89:45:65:85:2e:5e:b9:8c:af:7c:7e:\n        0f:08:9a:9b:97:7c:6f:fc:9f:30:e8:0c:30:c4:be:7a:0c:7d:\n        d0:45:71:f2:a7:35:c3:f9:f1:b7:2c:9e:1d:a1:da:3b:70:59:\n        5b:05:93:a3:fc:59:41:c5:db:bf:0f:20:ec:15:ef:64:61:7e:\n        52:3b:6a:a1:69:0b:73:93:52:a4:a3:79:ca:b3:0c:b8:cd:2b:\n        59:b5:19:03:2e:21:b8:b5:d3:8d:05:2e:d6:0d:b0:9a:7d:e9:\n        f9:e7:2b:96:3a:a5:e3:05:b6:d8:0a:e2:ea:2f:b0:02:42:ba:\n        a5:9c:1d:d8:29:7f:3b:bd:7c:73:1a:4a:ae:ca:3a:1d:50:16:\n        3a:42:3c:0c:23:6a:15:ed:57:01:88:f3:dc:b7:e3:3e:55:48:\n        31:07:4f:38:9c:dc:10:71:e8:8c:82:d3:9e:a6:97:ca:70:20:\n        e9:70:31:b2:46:09:79:03:20:93:b0:16:af:07:67:eb:0c:4f:\n        b0:c0:a9:e8:eb:bc:ab:74:37:93:76:89:92:82:f3:48:a5:a1:\n        16:62:39:2d:d5:79:67:e2:ea:6e:a9:6e:40:e1:7f:da:01:df:\n        f0:4f:6f:a0:36:80:ae:ab:a2:4d:07:6e:ba:14:bf:85:82:50:\n        e1:3d:df:64:bc:91:3d:60:c4:90:8c:3b:6f:0f:11:31:a6:5f:\n        4f:36:5a:69:04:05:88:b5\n</code></pre> </li> <li> <p>Now you send the certificate to the customer:</p> <pre><code>scp client.crt ${StudentID}@192.168.22.64:./rsyslogClientWork/.\n</code></pre> <p>You may be prompted to type yes before connecting and you may be asked to enter an instructor-provided password, as shown in the example below:</p> Example prompt and output from sending file <pre><code>The authenticity of host '192.168.22.64 (192.168.22.64)' can't be established.\nED25519 key fingerprint is SHA256:IJQFhwQnu7GDWPZmz+ICLIIld9FBLJcD+anb2Bu9y7w.\nThis key is not known by any other names\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nWarning: Permanently added '192.168.22.64' (ED25519) to the list of known hosts.\nstudent02@192.168.22.64's password: \nclient.crt                                                              100% 1907     9.7MB/s   00:00 \n</code></pre> </li> <li> <p>Now switch back to your terminal tab or window for your session on the RHEL host.  A gentle reminder of what that tab or window looks like:</p> <p></p> </li> <li> <p>If you are doing the lab in one sitting, in order, then you are still logged in on the RHEL host.  If you need to login for any reason the command is <code>ssh -l ${StudentID} 192.168.22.64</code>.  Steps 15 and 16 will be performed on the RHEL 8.5 host.</p> </li> <li> <p>Switch to the directory where the CA \"sent\" your new certificate and list the files:</p> <pre><code>cd ${HOME}/rsyslogClientWork/ &amp;&amp; ls -ltr\n</code></pre> File listing shows your client certificate (client.crt) <pre><code>total 16\n-rw------- 1 student02 hpvs_students 3247 Feb 13 20:42 client-key.pem\n-rw-r--r-- 1 student02 hpvs_students  192 Feb 13 20:44 client.cnf\n-rw-r--r-- 1 student02 hpvs_students 1691 Feb 13 20:45 client-req.csr\n-rw-r--r-- 1 student02 hpvs_students 1907 Feb 13 21:06 client.crt\n</code></pre> </li> <li> <p>Display your certificate in human-readable form to make sure your CA did their job correctly:</p> <pre><code>openssl x509 -noout -text -issuer -subject -in client.crt\n</code></pre> Example display of certificate <pre><code>Certificate:\n    Data:\n        Version: 1 (0x0)\n        Serial Number:\n            29:4a:dd:c7:66:81:ab:5a:1d:bb:20:76:a0:25:34:90:21:93:40:6b\n        Signature Algorithm: sha256WithRSAEncryption\n        Issuer: C = US, O = IBM WSC IBM Z and LinuxONE, CN = CA for rsyslog for SE-enabled KVM guests\n        Validity\n            Not Before: Feb 14 01:58:14 2023 GMT\n            Not After : Feb 14 01:58:14 2024 GMT\n        Subject: C = US, O = IBM WSC IBM Z and LinuxONE, CN = SE-enabled HPVS 2.1.6 Grep11 Server\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n                RSA Public-Key: (4096 bit)\n                Modulus:\n                    00:b0:38:b1:27:ee:a2:9f:35:10:dd:74:b2:46:e6:\n                    b8:2a:e4:c9:7f:7d:b3:1d:45:96:7d:bc:9d:5a:90:\n                    06:64:da:b8:23:73:f3:99:46:54:a3:2a:a8:8e:db:\n                    10:96:7e:de:04:65:81:ee:68:f1:5e:4d:a1:3d:db:\n                    2e:44:3a:ff:e2:fe:60:86:ad:90:b9:91:f1:4b:94:\n                    c9:43:4a:85:56:32:2a:ab:c9:2a:71:de:b7:fc:40:\n                    e2:1b:aa:17:08:3a:65:4a:b8:70:d8:5c:b4:b6:ca:\n                    4f:8d:a1:d0:03:04:20:4e:7e:23:26:20:85:45:e4:\n                    21:ec:bb:f8:38:64:36:6d:7c:a1:8a:d8:af:14:1b:\n                    72:bf:e8:cd:2f:2d:2c:0b:5a:39:4e:53:41:f8:a0:\n                    33:91:be:90:64:18:1c:cf:c2:d9:a0:bf:78:db:88:\n                    19:6b:be:0c:10:76:fc:96:fb:01:14:f5:90:8a:4d:\n                    a8:0c:0b:10:29:1d:fb:45:e1:f2:59:b5:33:e5:20:\n                    f8:76:22:c8:4d:d1:55:dc:de:10:79:66:b8:ff:fa:\n                    ee:e4:03:a5:77:9d:50:a1:f2:60:35:84:e1:44:ef:\n                    f4:be:be:a9:1b:17:5e:26:4a:ea:24:7d:ff:80:d2:\n                    d6:95:4f:1b:b6:5e:22:c6:f2:81:17:bb:fe:ce:f6:\n                    44:29:79:4e:ad:76:04:db:a7:8d:a4:db:8c:e3:cd:\n                    bf:48:37:99:4c:1c:e0:26:0f:9f:8b:a4:1f:48:71:\n                    44:d0:5f:ae:c6:93:83:ab:b8:7b:7b:b8:f3:1d:f1:\n                    7d:34:3b:d5:32:f0:74:d9:ee:0b:cd:e7:a9:54:49:\n                    2b:23:dc:1a:57:ae:a3:03:d8:9c:47:14:75:0c:47:\n                    c6:be:e3:84:61:e7:15:b8:fe:0b:5f:53:a0:f6:a8:\n                    92:e4:2c:c9:51:43:de:3f:be:0f:a6:c7:44:1f:81:\n                    c9:c0:9d:d3:3a:42:2f:b0:52:59:47:c6:da:96:93:\n                    ba:e7:11:f4:dd:ba:75:46:86:b5:ef:ee:49:34:92:\n                    36:03:32:00:99:71:ed:83:1a:cd:3f:e3:79:7b:ee:\n                    04:49:59:aa:01:ce:4d:67:0e:0f:88:e6:62:82:1e:\n                    0b:07:01:cf:74:38:20:7b:0d:69:f5:2e:09:e5:84:\n                    20:f3:82:15:7f:a4:0d:ae:35:da:de:f2:a9:30:6e:\n                    3e:e3:72:26:b3:18:10:6c:d7:df:4c:fc:bf:e3:33:\n                    8c:c6:e3:83:04:db:c9:a9:a8:41:d2:97:be:a0:ec:\n                    bd:f1:89:18:eb:c5:e7:0b:fc:47:30:c8:e1:cd:e6:\n                    54:cd:f1:e7:c3:23:51:48:4f:fd:89:49:43:6d:96:\n                    e0:cc:69\n                Exponent: 65537 (0x10001)\n    Signature Algorithm: sha256WithRSAEncryption\n        9f:41:62:18:0f:db:0a:84:f6:59:bc:cd:22:e4:73:d6:18:b0:\n        d0:4e:2a:da:8f:5c:46:06:f1:80:f3:4b:5d:cf:fe:a2:a3:97:\n        cc:bd:96:8e:d2:d4:58:ab:ac:56:dd:6f:12:3b:52:a8:df:e5:\n        4b:26:8e:92:b3:ed:28:9a:c3:28:6d:8b:f9:13:b0:01:fa:ed:\n        8f:48:08:08:07:ac:8f:61:00:fc:53:41:9e:d2:53:c5:b8:d7:\n        f4:f2:c9:cc:87:58:2d:48:f3:34:be:fe:0d:dc:9e:b6:11:74:\n        18:da:92:db:db:b3:c6:4f:10:63:6c:4c:fb:5f:86:36:9a:a8:\n        58:a9:d3:d9:7c:e0:8d:2f:96:f3:64:85:bf:8d:39:28:d2:06:\n        8b:63:93:d6:42:e3:ad:6d:5b:2e:d3:5a:3d:3c:af:1e:a2:61:\n        a0:d7:c7:a0:4f:b7:16:f1:3b:94:44:23:d8:16:6f:d7:38:36:\n        84:10:31:ac:e7:17:43:2a:24:04:26:5b:46:50:03:05:7c:8d:\n        cc:77:f5:c1:c1:e3:a2:04:4a:6d:7c:b2:c7:1e:e3:68:b0:4e:\n        24:92:63:dd:bd:87:3c:af:8c:63:a5:ea:2f:41:90:67:79:e3:\n        31:89:41:54:be:aa:44:89:45:65:85:2e:5e:b9:8c:af:7c:7e:\n        0f:08:9a:9b:97:7c:6f:fc:9f:30:e8:0c:30:c4:be:7a:0c:7d:\n        d0:45:71:f2:a7:35:c3:f9:f1:b7:2c:9e:1d:a1:da:3b:70:59:\n        5b:05:93:a3:fc:59:41:c5:db:bf:0f:20:ec:15:ef:64:61:7e:\n        52:3b:6a:a1:69:0b:73:93:52:a4:a3:79:ca:b3:0c:b8:cd:2b:\n        59:b5:19:03:2e:21:b8:b5:d3:8d:05:2e:d6:0d:b0:9a:7d:e9:\n        f9:e7:2b:96:3a:a5:e3:05:b6:d8:0a:e2:ea:2f:b0:02:42:ba:\n        a5:9c:1d:d8:29:7f:3b:bd:7c:73:1a:4a:ae:ca:3a:1d:50:16:\n        3a:42:3c:0c:23:6a:15:ed:57:01:88:f3:dc:b7:e3:3e:55:48:\n        31:07:4f:38:9c:dc:10:71:e8:8c:82:d3:9e:a6:97:ca:70:20:\n        e9:70:31:b2:46:09:79:03:20:93:b0:16:af:07:67:eb:0c:4f:\n        b0:c0:a9:e8:eb:bc:ab:74:37:93:76:89:92:82:f3:48:a5:a1:\n        16:62:39:2d:d5:79:67:e2:ea:6e:a9:6e:40:e1:7f:da:01:df:\n        f0:4f:6f:a0:36:80:ae:ab:a2:4d:07:6e:ba:14:bf:85:82:50:\n        e1:3d:df:64:bc:91:3d:60:c4:90:8c:3b:6f:0f:11:31:a6:5f:\n        4f:36:5a:69:04:05:88:b5\nissuer=C = US, O = IBM WSC IBM Z and LinuxONE, CN = CA for rsyslog for SE-enabled KVM guests\nsubject=C = US, O = IBM WSC IBM Z and LinuxONE, CN = SE-enabled HPVS 2.1.6 Grep11 Server\n</code></pre> </li> </ol> <p>Click the Next link at the bottom of the page to continue to the next part of the lab, where you will create the contract that HPVS 2.1.6 expects, so that you can run your GREP11 Server.</p>"},{"location":"lab/grep11/createGREP11Contract/","title":"Create Contract for GREP11 Server","text":""},{"location":"lab/grep11/createGREP11Contract/#overview-of-this-section","title":"Overview of this section","text":"<p>IBM provides the Secure Execution feature on z15 and newer generations of its IBM Z and LinuxONE servers.  Currently, that's z15 and LinuxONE III for the \"z15\" generation and z16 and LinuxONE Emperor 4 for the \"z16\" generation.</p> <p>You could create your own Secure Execution-enabled KVM guests and run a workload in it without Hyper Protect Virtual Servers 2.1.6.  However, there's non-trivial work involved in setting this up.  HPVS 2.1.6 has done that hard work for you, and provided a KVM guest image that will run your application workload as an OCI-compliant (again, think \"Docker\" in the popular vernacular) container within the HPVS 2.1.6 KVM guest.  There is still some work involved in setting up the contract that HPVS 2.1.6 expects- but this is work closer to the application or business level. There is also added value in HPVS 2.1.6 in areas such as:</p> <ul> <li> logging</li> <li> attestation</li> <li> verification during boot</li> <li> encryption</li> <li> persistent disk protection</li> <li> separation of duties</li> </ul> <p>This lab covers the features that are checked in the list above.  (We won't rest on our laurels until we've built this lab out to cover everything under the sun, but, as the saying goes, Rome wasn't built in a day).</p> <p>One of the things we just mentioned in the previous paragraph was separation of duties. In a real world situation, multiple personas could create different portions of the contract:</p> <ul> <li>an application owner deployer might create the workload section of the contract</li> <li>a systems administrator might create the environment section of the contract</li> </ul> <p>Then, you could imagine the following scenario taking place:</p> <ol> <li>application owner can encrypt their piece of the contract such that it can only be decrypted within the HPVS 2.1.6 runtime</li> <li>application owner passes their encrypted piece of the contract to the systems administrator</li> <li>the systems administrator encrypts their own section</li> <li>the systems administrator combines the two sections and signs the resultant contract so that it can be verified by the HPVS 2.1.6 runtime.</li> </ol> <p>Your inquiring mind may say, well that's all well and good, but what about the disk storage of the machine?</p> <p>If your workload requires persistent disk storage (to survive a container restart) then each of the two personas supplies part of a seed that is used in the calculation of an encryption key for the persistent disk. Neither persona has knowledge of the other's part of the seed if it is passed between parties encrypted, so that no human has the ability to decrypt the persistent disk.  The HPVS developers have thought through security very carefully!  </p> <p>Now our lab does not include all of the above features (yet)- for example, the GREP11 Server is stateless (this is a feature, not a bug) so we do not need persistent disk storage.  And for this lab, you have and will continue to wear many hats, including both the application owner workload deployer and the system administrator environment deployer.  We are not going to cover attestation in this lab either, but hope to do so in a future lab.</p>"},{"location":"lab/grep11/createGREP11Contract/#creation-of-directory-structure-for-contract","title":"Creation of directory structure for contract","text":"<p>This section starts where the last section left off- on your session with the RHEL host:</p> <p></p> <p>This command will create the directory structure expected by the lab instructions:</p> <pre><code>mkdir -p ${HOME}/contract/grep11Server/{workload,environment}\n</code></pre> <p>A contract requires a workload section and an environment section, and they each get their own directory. Then the sections are packaged together, and signed, and the signature is added as the third section.  This final result- the contract-  will be stored in your <code>${HOME}/contract/grep11Server</code> directory.</p>"},{"location":"lab/grep11/createGREP11Contract/#create-workload-section-of-the-contract","title":"Create workload section of the contract","text":"<p>Switch to your workload directory:</p> <pre><code>cd ${HOME}/contract/grep11Server/workload\n</code></pre> <p>HPVS expects the contract to specify an OCI container specified by a Docker Compose file.  The Docker Compose file specifies an OCI image to run and other information necessary to configure the resulting container. Your workload is the GREP11 Server, so, yes, there's an OCI image for that. The container that runs the GREP11 Server will be configured with information such as:</p> <ul> <li>the port it listens on</li> <li>a configuration file that describes the GREP11 server</li> <li>another configuration file that describes its connection to the CENA4SEE server</li> <li>certificates and keys to enable TLS communication with the CENA4SEE server</li> <li>certificates and keys to enable TLS communication with clients that call the GREP11 Server</li> </ul> <p>That's right, two more \"sets\" of X509 certificates, egads!!  You've already worked with one set for the rsyslog service, so we'll offer the commands for these next two sets without as much commentary.</p> <p>A brief history of the term 'CENA4SEE', or, you say to-MAY-toe and I say to-MAH-toe<p>You will not see the term CENA4SEE in any official product documentation.  Try googling it. CENA4SEE is the instructor's abbreviation for Crypto Express Network API for Secure Execution Enclaves.  The product documentation often uses the term c16.  When the instructor inquired to the developers what c16 stood for, because he is sure that customers will ask that question, and was told that it doesn't stand for anything, he coined this acronym and will continue to use it until he is threatened with either legal action or involuntary termination of employment.  </p> </p> <p>You are going to put the building blocks for the workload section of the contract together in the following order:</p> <ol> <li> <p>You will create a docker-compose file</p> <ol> <li>docker-compose.yml - this file will reference each of the files listed in items 2-5 of this list</li> </ol> </li> <li> <p>You will create a GREP11 Server configuration file</p> <ol> <li>ep11server.yaml</li> </ol> </li> <li> <p>You will create a configuration file for the GREP11 Server to the CENA4SEE server connection</p> <ol> <li>c16client.yaml</li> </ol> </li> <li> <p>You will create x509 material to enable secure communication between GREP11 clients and the GREP11 Server </p> <ol> <li> <p>grep11-ca.pem</p> </li> <li> <p>grep11-server.pem</p> </li> <li> <p>grep11-server.key</p> </li> </ol> </li> <li> <p>You will create or obtain x509 material to enable secure communication between GREP11 Server and the CENA4SEE server </p> <ol> <li> <p>c16-ca.pem - this file has already been created by the instructors</p> </li> <li> <p>c16-client.key</p> </li> <li> <p>c16-client.pem - the instructors will create this file upon your request in a subsequent step in the lab</p> </li> </ol> </li> </ol> <p>Let's get started!</p>"},{"location":"lab/grep11/createGREP11Contract/#create-docker-compose-file","title":"Create docker-compose file","text":"<p>Create a directory and switch to it:</p> <pre><code>mkdir -p compose &amp;&amp; cd compose\n</code></pre> <p>Create the docker-compose file:</p> <pre><code>cat &lt;&lt; EOF &gt; docker-compose.yml\nservices:\n  $(whoami)-ep11server:\n    user: \"0\"\n    image: quay.io/gmoney23/grep11server@sha256:a864174faadc39650e61ca45d8a3ceb01ea88602cfe6f4bd4e35c48e60556900\n    ports:\n        - 9876:9876\n    volumes:\n        - ./c16client.yaml:/etc/c16/c16client.yaml\n        - ./c16-ca.pem:/cfg/c16-ca.pem\n        - ./c16-client.key:/cfg/c16-client.key\n        - ./c16-client.pem:/cfg/c16-client.pem\n        - ./grep11server.yaml:/etc/ep11server/ep11server.yaml\n        - ./grep11-ca.pem:/cfg/grep11-ca.pem\n        - ./grep11-server.pem:/cfg/grep11-server.pem\n        - ./grep11-server.key:/cfg/grep11-server.key\n\nEOF\n</code></pre> <p>Notice the value of the image key.  This is the GREP11 Server OCI image provided with the Crypto Express Network API for Secure Execution Enclaves 1.1.2 (CENA4SEE) that Garrett (gmoney23) has uploaded to his account on Quay.io for this lab. (Not for your production usage as it could disappear at any time).</p> <p>Notice the list of eight items under the volumes section. The left side of each entry in the list specifies the name of the file on the RHEL host.  The value after the ':' specifies where that file is mapped to within the OCI container that will run in the HPVS 2.1.6 guest.  Taking the first item in the list as an example, you will create a file named c16client.yaml and then within the OCI container it will be available at /etc/c16/c16client.yaml.  (As an aside, you can also map entire directories from your host to a Docker container, although this example only maps individual files).</p>"},{"location":"lab/grep11/createGREP11Contract/#create-the-configuration-file-for-the-grep11-server","title":"Create the configuration file for the GREP11 server","text":"<p>Run this command to create the configuration file for the GREP11 server:</p> <pre><code>cat &lt;&lt; EOF &gt; grep11server.yaml\n#\n# Copyright IBM Corp. All Rights Reserved.\n#\n# SPDX-License-Identifier: Apache-2.0\n#\n\nlogging:\n  # Package log levels\n  # Levels: info, warning, debug, error, fatal, trace, and panic\n  levels:\n    entry: debug\n    # example below\n    # entry: info\n\n###################################\n## GRPC SERVICES TALKING TO GREP11 server ##\nep11crypto:\n  enabled: true\n  connection:\n    address: 0.0.0.0\n    port: 9876\n\n    # Secure connection TLS options\n    tls:\n        enabled: true\n        # certfile, keyfilie and cacert refer to the pem files that holds the certs\n        certfile: /cfg/grep11-server.pem\n        keyfile: /cfg/grep11-server.key\n\n        mutual: true\n        cacert: /cfg/grep11-ca.pem\n\n        # same as above, but instead of filename, contents of PEM can be in an environment\n        # variable (i.e. to avoid mounting files into docker container)\n        cacertbytes:\n        certfilebytes:\n        keyfilebytes:\n\n    # Server TCP/IP connection monitoring\n    # serverKeepaliveTime is the duration in seconds after which if the server\n    # does not see any activity from the client it pings the client to see\n    # if it is alive\n    # serverKeepaliveTimeout is the duration the server waits for a response\n    # from the client after sending a ping before closing the connection\n    keepalive:\n        serverKeepaliveTime: 30\n        serverKeepaliveTimeout: 5\n\n    # Comma-separated list of card.domain tuples. card and domain are hex numbers\n    # i.e. \"08.0016,0a.0016\" corresponds to 22nd (x16) domain on eighth card and 22nd domain on tenth (x0a) card\n  domain: \"08.0016,0a.0016\"\nEOF\n</code></pre>"},{"location":"lab/grep11/createGREP11Contract/#create-the-client-configuration-file-for-the-cena4see-server","title":"Create the client configuration file for the CENA4SEE server.","text":"<ol> <li> <p>Run this command to create the client configuration for the the CENA4SEE server:</p> <pre><code>cat &lt;&lt; EOF &gt; c16client.yaml\n#trace, debug, info, warn, err, error, critical, off\nloglevel: 'debug'\nservers:\n  - hostname: 192.168.22.80\n    port: 9001\n    mTLS: true\n    server_cert_file: \"/cfg/c16-ca.pem\"\n    client_key_file: \"/cfg/c16-client.key\"\n    client_cert_file: \"/cfg/c16-client.pem\"\n\nEOF\n</code></pre> <p>Debug log level for lab purposes</p> <p>For the two configuration files you just created, you set the log level to debug. We would probably not recommend a log level of debug for most normal production use cases but you won't be trodding too heavily on the server in the lab and it provides extra information for your current pursuit of knowledge.</p> <p>The value for the hostname in c16client.yaml,  192.168.22.80, is the IP address of the CENA4SEE server running on the SSC LPAR used in the lab.</p> </li> <li> <p>Pick out the names of the files you will be creating from the grep11server.yaml file with the following command:</p> <pre><code>grep -e 'file:' -e 'cacert:' grep11server.yaml\n</code></pre> <p>Your output should look like this:</p> You will create these files in the lab [Click me] <pre><code>    certfile: /cfg/grep11-server.pem\n    keyfile: /cfg/grep11-server.key\n    cacert: /cfg/grep11-ca.pem\n</code></pre> </li> <li> <p>Pick out the names of the files you will be creating or getting from the instructors from the c16client.yaml file with the following command:</p> <pre><code>grep 'file:' c16client.yaml\n</code></pre> You get the first file and create the other two [Click me] <pre><code>    server_cert_file: \"/cfg/c16-ca.pem\"\n    client_key_file: \"/cfg/c16-client.key\"\n    client_cert_file: \"/cfg/c16-client.pem\"\n</code></pre> </li> </ol>"},{"location":"lab/grep11/createGREP11Contract/#create-x509-material-for-grep11-client-to-grep11-server-communication","title":"Create x509 material for GREP11 client to GREP11 Server communication","text":"<p>Your GREP11 Server acts as both a server and a client. Its primary purpose is to be a server- to serve requests from GREP11 clients.  But in order to get its job done, the GREP11 Server must send requests to the CENA4SEE server, so it is a client to the CENA4SEE server.  (It is also a client to the rsyslog service so that it can send its log messages there). </p> <p>In this section, you'll set up the material to enable the GREP11 Server's role as a, well, GREP11 Server!</p> <ol> <li> <p>Create and change to a new directory which you will use for your self-signed GREP11 Server CA:</p> <pre><code>mkdir -p ${HOME}/GREP11CAwork &amp;&amp; cd ${HOME}/GREP11CAwork\n</code></pre> </li> <li> <p>Create an RSA private key for your self-signed GREP11 Server CA:</p> <pre><code>openssl genrsa -out grep11-ca-key.pem 2048\n</code></pre> </li> <li> <p>Create a configuration file to assist in creation of your self-signed CA for the GREP11 Server:</p> <pre><code>cat &lt;&lt; EOF &gt; ca.cnf\n\n[ req ]\ndefault_bits           = 2048\ndefault_keyfile        = keyfile.pem\ndistinguished_name     = req_distinguished_name\nattributes             = req_attributes\nprompt                 = no\noutput_password        = mypass\n\n[ req_distinguished_name ]\nC                      = US\nST                     = Virginia\nL                      = Herndon\nO                      = IBM\nOU                     = Washington Systems Center - IBM Z and LinuxONE\nCN                     = WSC $(whoami) HPVS CA\nemailAddress           = student@notreal.email.com\n\n[ req_attributes ]\nchallengePassword              = A challenge password\n\n[ x509_extensions ]\nsubjectKeyIdentifier   = hash\nauthorityKeyIdentifier = keyid,issuer\nbasicConstraints       = critical,CA:TRUE\n\nEOF\n</code></pre> </li> <li> <p>Create your self-signed CA for the GREP11 Server. Notice it uses the private key you created two commands ago and refers to the configuration file your last command created:</p> <pre><code>openssl req -new -x509 \\\n-key grep11-ca-key.pem \\\n-out grep11-ca.pem \\\n-days 395 -config ca.cnf \\\n-extensions x509_extensions\n</code></pre> </li> <li> <p>Display the CA certificate that you just created:</p> <pre><code>openssl x509 -noout -text -in grep11-ca.pem\n</code></pre> <p>Your output will look similar to this:</p> Example of display of certificate: <pre><code>Certificate:\n    Data:\n        Version: 3 (0x2)\n        Serial Number:\n            61:1d:d1:10:f4:34:bd:84:7b:ca:0b:59:2b:cf:1e:e2:16:5a:01:5c\n        Signature Algorithm: sha256WithRSAEncryption\n        Issuer: C = US, ST = Virginia, L = Herndon, O = IBM, OU = Washington Systems Center - IBM Z and LinuxONE, CN = WSC student02 HPVS CA, emailAddress = student@notreal.email.com.com\n        Validity\n            Not Before: Feb 14 14:36:41 2023 GMT\n            Not After : Mar 15 14:36:41 2024 GMT\n        Subject: C = US, ST = Virginia, L = Herndon, O = IBM, OU = Washington Systems Center - IBM Z and LinuxONE, CN = WSC student02 HPVS CA, emailAddress = student@notreal.email.com\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n                RSA Public-Key: (2048 bit)\n                Modulus:\n                    00:a6:56:f3:c4:81:58:e0:d5:cd:87:28:38:bc:6b:\n                    e3:0f:b4:c7:61:2e:bd:4e:17:b0:a2:65:2e:ad:63:\n                    d1:2a:b4:a2:45:d6:f3:9d:ba:8a:0d:66:72:fd:15:\n                    b1:d3:4c:08:ff:3c:8d:c0:c4:23:86:c2:65:18:19:\n                    35:03:bb:3c:d5:e2:7a:66:47:4a:6e:d1:eb:37:3f:\n                    f7:62:c0:35:45:5f:38:7a:2f:4a:1e:aa:f7:8b:4a:\n                    55:6f:bb:b4:e3:1e:a6:62:20:55:df:1f:04:1e:70:\n                    73:c5:32:b5:5e:77:6f:45:6d:43:fd:01:76:84:83:\n                    6f:c8:9a:6e:20:27:81:94:af:e7:fb:7c:c0:8c:91:\n                    bf:f1:47:d3:05:a7:56:69:29:bd:1b:59:0d:54:c0:\n                    53:e1:d8:58:a9:f1:d1:fb:d4:c0:e1:9d:f3:f2:36:\n                    51:ff:60:2a:91:28:9d:07:5e:27:5f:3a:68:f0:7e:\n                    5a:29:cb:1a:5e:b1:c5:98:e1:14:fa:38:29:67:81:\n                    4e:e3:4b:a2:bb:c7:c3:b5:24:c4:d4:c5:23:d8:70:\n                    2b:98:97:e2:ef:26:32:5a:ea:02:ea:3f:48:90:7f:\n                    a5:6f:b3:49:68:0a:31:d6:c9:18:c8:57:f7:7c:e0:\n                    4d:e4:46:f7:3c:30:7a:4a:16:df:f4:c9:b7:d8:c0:\n                    e7:bb\n                Exponent: 65537 (0x10001)\n        X509v3 extensions:\n            X509v3 Subject Key Identifier: \n                E3:62:2B:39:9A:DB:57:77:DE:A2:C5:7E:11:A6:76:22:5F:F7:91:9D\n            X509v3 Authority Key Identifier: \n                keyid:E3:62:2B:39:9A:DB:57:77:DE:A2:C5:7E:11:A6:76:22:5F:F7:91:9D\n\n            X509v3 Basic Constraints: critical\n                CA:TRUE\n    Signature Algorithm: sha256WithRSAEncryption\n        88:11:95:13:b8:fb:f8:b0:67:2c:a7:8f:d5:7b:27:24:e1:77:\n        45:4a:9d:af:fe:8b:34:f8:84:dc:80:69:a6:fb:50:5f:ce:86:\n        5d:a2:30:f5:f0:d9:1b:7a:92:9e:c1:69:78:f3:42:65:9f:2f:\n        3e:c9:61:96:bf:93:5a:4f:e9:70:16:de:b1:91:78:b7:0a:38:\n        2c:54:6c:21:32:be:90:e9:b5:25:29:d7:df:b2:a5:86:2d:bc:\n        04:9a:ca:ee:cb:1b:29:02:6e:59:4f:86:85:d9:06:a3:1b:8e:\n        94:df:9b:9b:56:20:f2:33:02:3c:ff:17:c3:46:04:2d:db:64:\n        1a:0f:9d:7b:2d:b6:af:dd:c4:5b:ad:70:89:09:5d:3b:02:b7:\n        74:24:79:e2:b5:a4:1a:ed:f9:8a:55:73:f6:20:4d:4f:88:42:\n        24:77:08:92:09:7d:42:2e:40:88:fa:42:1a:2b:10:b6:8f:28:\n        a1:b8:33:7c:99:fa:c6:29:0f:50:85:cd:f7:e0:b1:b7:ea:14:\n        0f:ac:a6:cd:16:3a:a9:7a:0e:f4:13:b5:35:f0:87:0d:5d:67:\n        d3:14:c3:e8:0e:b7:b1:4f:60:0b:c5:ca:23:93:6e:38:15:ee:\n        0b:e4:97:79:f9:97:43:ff:9d:42:f5:ea:80:96:d7:7b:b3:2b:\n        d1:4d:7f:36\n</code></pre> <p>Within your <code>${HOME}/GREP11CAWork</code> directory, you are a certification authority!</p> </li> <li> <p>If you change to this directory, you will be soon be a customer of your CA:</p> <pre><code>cd ${HOME}/contract/grep11Server/workload/compose\n</code></pre> </li> <li> <p>You want to create a certificate for your GREP11 Server to use for authenticating to GREP11 clients.  Start by creating an RSA private key:</p> <pre><code>openssl genrsa -out grep11-server.key 2048\n</code></pre> </li> <li> <p>Create a configuration file to assist the creation of your GREP11 Server's CSR:</p> <pre><code>cat &lt;&lt; EOF &gt; serverCSR.cnf\n# OpenSSL configuration file.\n#\n\n# Establish working directory.\n\ndir   = .\n\n[ ca ]\ndefault_ca  = CA_default\n\n[ CA_default ]\nserial   = $dir/serial\ndefault_days  = 365\ndefault_md  = sha256\npreserve  = no\nemail_in_dn  = no\nnameopt   = default_ca\ncertopt   = default_ca\ndefault_crl_days = 45\npolicy   = policy_match\n\n[ policy_match ]\ncountryName  = match\nstateOrProvinceName = optional\norganizationName = match\norganizationalUnitName = optional\ncommonName  = supplied\nemailAddress  = optional\n\n[ req ]\ndefault_md  = sha256\ndistinguished_name = req_distinguished_name\nprompt             = no\n\n[ req_distinguished_name ]\n\nC  = US\nST = Virginia\nL  = Herndon\nO  = IBM  \nOU = Washington Systems Center - IBM Z and LinuxONE\n\nCN = \\$ENV::COMMON_NAME\n\nEOF\n</code></pre> </li> <li> <p>Create the certificate signing request:</p> <pre><code>COMMON_NAME=${GREP11ServerIP}  openssl req -new -key grep11-server.key \\\n-out grep11-server.csr -config serverCSR.cnf\n</code></pre> </li> <li> <p>In your current directory, <code>${HOME}/contract/grep11Server/workload/compose</code>, you are a \"customer\" of the CA you created in <code>${HOME}/GREP11CAwork</code>.      Thus, \"send\" your CSR to your CA:</p> <pre><code>cp -ipv grep11-server.csr ${HOME}/GREP11CAwork/.\n</code></pre> </li> <li> <p>Put your CA hat back on and go to the CA directory:</p> <pre><code>cd ${HOME}/GREP11CAwork/\n</code></pre> </li> <li> <p>Create a configuration file to assist the creation of your GREP11 Server certificate:</p> <pre><code>cat &lt;&lt; EOF &gt; server.cnf\n# OpenSSL configuration file.\n#\n\n# Establish working directory.\n\ndir   = .\n\n[ ca ]\ndefault_ca  = CA_default\n\n[ CA_default ]\nserial   = $dir/serial\ndefault_days  = 365\ndefault_md  = sha256\npreserve  = no\nemail_in_dn  = no\nnameopt   = default_ca\ncertopt   = default_ca\ndefault_crl_days = 45\npolicy   = policy_match\n\n[ policy_match ]\ncountryName  = match\nstateOrProvinceName = optional\norganizationName = match\norganizationalUnitName = optional\ncommonName  = supplied\nemailAddress  = optional\n\n[ req ]\ndefault_md  = sha256\ndistinguished_name = req_distinguished_name\nprompt             = no\n\n[ req_distinguished_name ]\nC  = US\nST = Virginia\nL  = Herndon\nO  = IBM  \nOU = Washington Systems Center - IBM Z and LinuxONE\nCN = \\${ENV::COMMON_NAME}\n\n[ server ]\nbasicConstraints = CA:FALSE\nkeyUsage = digitalSignature, keyEncipherment, dataEncipherment\nextendedKeyUsage = serverAuth\nnsCertType = server\ncrlDistributionPoints = @crl\nsubjectAltName = \\${ENV::SUBJECT_ALT_NAME}\n\n[ crl ]\nURI=http://localhost/ca.crl\n\nEOF\n</code></pre> </li> <li> <p>Now, create the certificate:</p> <pre><code>SUBJECT_ALT_NAME=DNS:192.168.22.64:${GREP11ServerForwardedPort},IP:192.168.22.64,DNS:${GREP11ServerIP}:9876,IP:${GREP11ServerIP} \\\nCOMMON_NAME=${GREP11ServerIP} openssl x509 -sha256 -req \\\n-in grep11-server.csr -CA grep11-ca.pem -CAkey grep11-ca-key.pem \\\n-set_serial 8086 -extfile server.cnf -extensions server \\\n-days 390 -outform PEM -out grep11-server.pem\n</code></pre> Example output from certificate creation <pre><code>Signature ok\nsubject=C = US, ST = Virginia, L = Herndon, O = IBM, OU = Washington Systems Center - IBM Z and LinuxONE, CN = 172.16.0.61\nGetting CA Private Key\n</code></pre> </li> <li> <p>Display the info of the certificate you just created:</p> <pre><code>openssl x509 -noout -text -in grep11-server.pem\n</code></pre> <p>Your certificate will look similar to this:</p> Certificate info <pre><code>Certificate:\n    Data:\n        Version: 3 (0x2)\n        Serial Number: 8086 (0x1f96)\n        Signature Algorithm: sha256WithRSAEncryption\n        Issuer: C = US, ST = Virginia, L = Herndon, O = IBM, OU = Washington Systems Center - IBM Z and LinuxONE, CN = WSC student02 HPVS CA, emailAddress = student@notreal.email.com.com\n        Validity\n            Not Before: Feb 14 14:47:20 2023 GMT\n            Not After : Mar 10 14:47:20 2024 GMT\n        Subject: C = US, ST = Virginia, L = Herndon, O = IBM, OU = Washington Systems Center - IBM Z and LinuxONE, CN = 172.16.0.61\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n                RSA Public-Key: (2048 bit)\n                Modulus:\n                    00:ac:16:8c:e2:82:f2:18:4d:b0:c2:6b:1e:62:93:\n                    a2:6b:58:8f:eb:60:78:49:20:e1:68:64:d9:b7:a1:\n                    a7:3d:ce:ae:ca:f9:86:8e:c8:bd:f8:fc:e3:b6:bb:\n                    19:7d:d7:8d:59:36:c6:d6:63:44:d3:14:06:ff:92:\n                    d6:ee:c9:fe:ad:4c:a0:fe:c6:96:fa:5b:29:e4:bd:\n                    08:0b:da:1a:d0:38:eb:f6:90:12:a4:34:a4:b3:21:\n                    63:31:06:32:19:9b:33:d6:f1:93:36:f1:b7:27:c3:\n                    8f:9b:31:c7:ce:e9:b6:61:15:48:c7:a2:c6:80:18:\n                    46:79:73:75:67:6d:78:d1:ec:28:19:24:fc:72:38:\n                    37:49:be:05:60:54:0c:9f:fe:52:5f:a1:16:77:98:\n                    fc:a3:d8:2e:fe:f3:b2:4f:eb:2f:45:ad:b1:c9:35:\n                    05:f3:ab:e5:44:13:24:53:e9:67:93:47:08:a8:42:\n                    f3:68:61:66:14:65:d2:c1:fe:09:05:06:3d:5f:72:\n                    5c:8b:8b:6b:c4:13:3d:71:9b:f3:5b:29:95:33:e4:\n                    3e:d4:1a:04:9a:93:71:07:ec:02:58:c9:f2:47:b8:\n                    d3:dc:db:6f:c4:bc:ff:67:e9:b0:bb:f7:5e:f8:ca:\n                    a4:cf:5e:ef:05:cf:06:25:56:1e:c4:ee:24:0d:4e:\n                    c9:e7\n                Exponent: 65537 (0x10001)\n        X509v3 extensions:\n            X509v3 Basic Constraints: \n                CA:FALSE\n            X509v3 Key Usage: \n                Digital Signature, Key Encipherment, Data Encipherment\n            X509v3 Extended Key Usage: \n                TLS Web Server Authentication\n            Netscape Cert Type: \n                SSL Server\n            X509v3 CRL Distribution Points: \n\n                Full Name:\n                URI:http://localhost/ca.crl\n\n            X509v3 Subject Alternative Name: \n                DNS:192.168.22.64:19878, IP Address:192.168.22.64, DNS:172.16.0.61:9876, IP Address:172.16.0.61\n    Signature Algorithm: sha256WithRSAEncryption\n        84:1e:74:25:f5:7b:d5:c4:d1:7a:7e:5d:c6:84:87:96:2a:75:\n        7c:20:ce:40:c4:8d:54:d5:2a:cd:53:81:b6:c0:46:73:e8:55:\n        88:ac:8c:21:0e:71:3c:1a:8f:3e:25:34:55:fc:aa:23:dc:9b:\n        ba:0b:5f:4a:e3:c3:09:d6:c4:d7:4c:27:a1:d3:d2:0d:f0:a2:\n        e0:64:d2:89:b6:61:18:1e:c9:a7:ee:66:fb:36:53:58:3d:a9:\n        5c:03:4a:fa:5f:e7:10:08:5a:8b:e0:24:1a:90:48:b2:1c:5e:\n        63:d9:23:60:24:80:5f:f6:27:7e:9f:6c:d9:9e:58:98:71:80:\n        e3:ea:1b:fa:4a:dc:67:7e:e9:23:fe:5f:d1:09:a9:3f:bc:6e:\n        9b:09:47:3a:4e:df:50:8d:26:0f:e2:75:25:ec:ce:80:1d:a7:\n        38:29:ef:b2:d6:f0:4e:7d:68:c2:b4:7e:00:7a:ff:79:8f:32:\n        8e:c1:79:54:38:3a:40:de:6b:d3:b7:6f:31:7d:ac:71:7e:37:\n        27:ac:7c:e7:b9:7e:12:b2:78:41:68:f4:5e:35:77:8c:d9:3c:\n        94:f7:0f:95:1c:1b:31:62:9c:f9:99:09:2c:60:03:7c:9c:c1:\n        56:c7:a0:7e:7b:0e:c3:22:42:95:76:ee:9c:1a:b4:e5:a8:a8:\n        6d:0f:b3:1f\n</code></pre> </li> <li> <p>\"Send\" the completed certificate to the \"customer\":</p> <pre><code>cp -ipv grep11-server.pem ${HOME}/contract/grep11Server/workload/compose/.\n</code></pre> </li> <li> <p>Also send your public certificate to the customer as they will need it to verify certificates that are sent by their connection partners. (GREP11 clients in this case).</p> <pre><code>cp -ipv grep11-ca.pem ${HOME}/contract/grep11Server/workload/compose/.\n</code></pre> </li> <li> <p>Switch directories again:</p> <pre><code>cd ${HOME}/contract/grep11Server/workload/compose\n</code></pre> </li> </ol>"},{"location":"lab/grep11/createGREP11Contract/#create-x509-material-for-grep11-server-to-cena4see-server-communication","title":"Create x509 material for GREP11 Server to CENA4SEE Server communication","text":"<ol> <li> <p>Learn a new argument (--after-context) to the grep command and display just a portion of the docker-compose file:</p> <pre><code>grep --after-context 8 volumes docker-compose.yml\n</code></pre> Expected output <pre><code>    volumes:\n    - ./c16client.yaml:/etc/c16/c16client.yaml\n    - ./c16-ca.pem:/cfg/c16-ca.pem\n    - ./c16-client.key:/cfg/c16-client.key\n    - ./c16-client.pem:/cfg/c16-client.pem\n    - ./grep11server.yaml:/etc/ep11server/ep11server.yaml\n    - ./grep11-ca.pem:/cfg/grep11-ca.pem\n    - ./grep11-server.pem:/cfg/grep11-server.pem\n    - ./grep11-server.key:/cfg/grep11-server.key\n</code></pre> <p>Of the eight files, you have created five of them:</p> <ul> <li> 2 .yaml files</li> <li> 3 grep11-* files</li> <li> 3 c16-* files</li> </ul> </li> <li> <p>Now it is time to create or acquire the three files called for from c16client.yaml.</p> <p>There is only one CENA4SEE server that all of the lab students will use.  The instructors have set this up, and have created the \"self-signed\" CA that governs communication between the CENA4SEE server and its clients (each student's GREP11 Server is a client of the CENA4SEE server). You need to acquire the certificate of the CA the instructors created:</p> <pre><code>cp -ipv /data/lab/c16-ca-public/c16-ca.pem .\n</code></pre> </li> <li> <p>Create an RSA private key using certtool:</p> <p>Certtool</p> <p>You used openssl for your previous certificate work.  You will use another tool called certtool now.  </p> <pre><code>certtool --generate-privkey --outfile c16-client.key\n</code></pre> Output from private key creation <pre><code>Generating a 3072 bit RSA private key...\n</code></pre> </li> <li> <p>Create the following template file to avoid being asked questions from certtool:</p> <pre><code>cat &lt;&lt; EOF &gt; csr.cfg\n# The common name of the certificate owner.\ncn = \"c16client\"\n\n# The organizational unit of the subject.\nunit = \"IBM WSC IBM Z and LinuxONE\"\n\n# The organization of the subject\norganization = \"IBM WSC\"\n\n# The location of the subject\nlocality = \"Herndon\"\n\n# The state of the subject.\nstate = \"Virginia\"\n\n# The country of the subject. Two letter code.\ncountry = \"US\"\n\n# The subject's domain component\ndc = \"bczkvm\"\n\n# A dnsname \ndns_name = ${GREP11ServerIP}\n\n# An IP address \nip_address = ${GREP11ServerIP}\n\n# Use certificate for TLS client\ntls_www_client\nEOF\n</code></pre> </li> <li> <p>Now create a CSR:</p> <pre><code>certtool --generate-request \\\n--load-privkey c16-client.key \\\n--template csr.cfg \\\n--outfile c16-client.csr </code></pre> Output from creating CSR <pre><code>Generating a PKCS #10 certificate request...\n</code></pre> </li> <li> <p>Display information about your CSR:</p> <pre><code>certtool --crq-info --infile c16-client.csr\n</code></pre> <p>Your output should look similar to this:</p> Example CSR info <pre><code>PKCS #10 Certificate Request Information:\n        Version: 1\n        Subject: DC=bczkvm,C=US,ST=Virginia,L=Herndon,O=IBM WSC,OU=IBM WSC IBM Z and LinuxONE,CN=c16client\n        Subject Public Key Algorithm: RSA\n        Algorithm Security Level: High (3072 bits)\n            Modulus (bits 3072):\n                00:b8:89:6a:97:6f:fd:78:30:e0:c0:16:0e:64:42:fa\n                e6:b9:6b:b1:c2:fd:25:c2:0f:f6:9d:f8:29:14:c5:38\n                0f:a2:0e:57:07:30:4f:bb:23:03:af:52:fb:65:e5:5b\n                e6:fe:93:21:74:8d:5c:e3:de:e0:1c:3b:47:1f:2f:4d\n                c2:8d:e1:87:01:f7:6b:d9:c0:5d:c4:2e:53:d1:64:39\n                90:be:a9:76:38:5b:52:14:aa:26:b1:9c:1b:24:18:f4\n                7c:d7:02:27:3d:08:4a:16:b3:83:c5:70:37:d9:ae:a9\n                b4:94:cf:a9:77:d0:96:19:f1:06:5d:5e:b6:ff:76:85\n                d3:88:fe:b1:b3:40:a7:75:61:1b:d8:23:93:1f:01:3f\n                4a:5e:a3:4b:95:26:36:37:b7:3e:14:c8:dc:c2:d1:1c\n                ee:0a:60:a8:57:18:c1:ef:6f:9a:4f:e7:95:93:6a:a6\n                15:41:34:d1:9c:51:f6:74:28:5c:79:cb:61:86:f2:73\n                db:f0:7d:78:1b:4f:a2:08:92:c5:6d:8f:11:02:28:fd\n                70:27:17:88:7f:6c:42:d5:c5:90:06:06:34:a7:bc:cd\n                d9:c5:c3:4e:00:48:88:7b:d4:53:d2:63:9e:c6:6e:a8\n                6e:29:a5:57:38:7d:c3:02:05:8c:ec:83:95:43:b9:5e\n                28:fd:1d:a0:9d:b0:98:58:2e:31:b4:fd:78:75:e7:6a\n                40:60:eb:1c:53:eb:ef:31:6a:fd:96:49:c1:db:c7:53\n                c6:f8:ca:7c:db:c3:16:31:37:32:2e:25:ed:d4:96:08\n                4e:bc:ce:04:b2:ed:c4:91:c1:72:1b:b0:9f:16:3d:17\n                df:0f:b3:b7:4d:25:db:c4:ad:b4:42:b9:b2:a8:3c:41\n                52:5c:d7:20:40:62:61:29:cf:89:0f:29:db:e9:53:17\n                51:65:fc:50:0b:79:13:b5:d6:ab:cb:f8:92:e2:e9:b5\n                0d:87:d3:c9:5f:d1:dc:c7:03:c4:e9:6c:ce:f2:09:22\n                f1\n            Exponent (bits 24):\n                01:00:01\n    Signature Algorithm: RSA-SHA256\n        Attributes:\n            Extensions:\n                Subject Alternative Name (not critical):\n                    DNSname: 172.16.0.61\n                    IPAddress: 172.16.0.61\n                Basic Constraints (critical):\n                    Certificate Authority (CA): FALSE\n                Key Usage (critical):\n                    Digital signature.\n                Key Purpose (critical):\n                    TLS WWW Client.\nOther Information:\n        Public Key ID:\n            sha1:70d0427d152be23fc9015be370581d19f3c47ff7\n            sha256:8f5547027afe8e10cd64d840903692e6a703b61a63fdbaebf9e0f446013a2ee6\n        Public Key PIN:\n            pin-sha256:j1VHAnr+jhDNZNhAkDaS5qcDthpj/brr+eD0RgE6LuY=\n\nSelf signature: verified\n\n-----BEGIN NEW CERTIFICATE REQUEST-----\nMIIERDCCAqwCAQAwgZgxEjAQBgNVBAMTCWMxNmNsaWVudDEmMCQGA1UECxMdSUJN\nIFdTQyB6U3lzdGVtcyBhbmQgTGludXhPTkUxEDAOBgNVBAoTB0lCTSBXU0MxEDAO\nBgNVBAcTB0hlcm5kb24xETAPBgNVBAgTCFZpcmdpbmlhMQswCQYDVQQGEwJVUzEW\nMBQGCgmSJomT8ixkARkWBmJjemt2bTCCAaIwDQYJKoZIhvcNAQEBBQADggGPADCC\nAYoCggGBALiJapdv/Xgw4MAWDmRC+ua5a7HC/SXCD/ad+CkUxTgPog5XBzBPuyMD\nr1L7ZeVb5v6TIXSNXOPe4Bw7Rx8vTcKN4YcB92vZwF3ELlPRZDmQvql2OFtSFKom\nsZwbJBj0fNcCJz0IShazg8VwN9muqbSUz6l30JYZ8QZdXrb/doXTiP6xs0CndWEb\n2COTHwE/Sl6jS5UmNje3PhTI3MLRHO4KYKhXGMHvb5pP55WTaqYVQTTRnFH2dChc\necthhvJz2/B9eBtPogiSxW2PEQIo/XAnF4h/bELVxZAGBjSnvM3ZxcNOAEiIe9RT\n0mOexm6obimlVzh9wwIFjOyDlUO5Xij9HaCdsJhYLjG0/Xh152pAYOscU+vvMWr9\nlknB28dTxvjKfNvDFjE3Mi4l7dSWCE68zgSy7cSRwXIbsJ8WPRffD7O3TSXbxK20\nQrmyqDxBUlzXIEBiYSnPiQ8p2+lTF1Fl/FALeRO11qvL+JLi6bUNh9PJX9HcxwPE\n6WzO8gki8QIDAQABoGYwZAYJKoZIhvcNAQkOMVcwVTAcBgNVHREEFTATggsxNzIu\nMTYuMC42MYcErBAAPTAMBgNVHRMBAf8EAjAAMA8GA1UdDwEB/wQFAwMHgAAwFgYD\nVR0lAQH/BAwwCgYIKwYBBQUHAwIwDQYJKoZIhvcNAQELBQADggGBAA17uU7a2aJx\nFNi2syniSomFbZSVQBBTJop7mplzpdyH+/IN/2eJU6wakXuuvCp6Yo2UYd6wMD5V\njl9AuZssXYZZRxfCzLtZ/KhCmNzFqnJIGMPpaPW5W72Jtmo3GE1VRRYEnVGZGqbx\nhnUzY0uiHThT+M31P+ZwpYwsPZmWYm0zBT2NfMAPpgYC0EqXstSqUdksgK1Qxa/L\nT3pede66CtIDbO+cRCv2ITWyfElZ7HZU93fDAG+R9kSMQDxNyjFQQ1H/b0F155hZ\nDjkGJ/VSU5RAv59oud4ZUYkGFOFOXlH+4fRhszAGOA53mDGUxL+Oh1VuYijeWyWo\nkepWkbYZ1o39pb5Zj1PEN6V2pwrLVg1My0VWNoxgnOWVJOGUnAt1jFYo+1fNMBsg\nxx44AFTZKvKJmHoOnbcSw/maVqg8taeF4vyPHOddsrK9fC4lg5+ZWrLoqhh7t0Ac\nTNVxGDGmyklOsttcINyIfbyQGMUTURDEDYLl7xLNX8IFTcG+xtlS1g==\n-----END NEW CERTIFICATE REQUEST-----\n</code></pre> <p>The \"self-signed\" CA for the CENA4SEE server is under instructor control- since there is only one CENA4SEE for the class to share, there is only one CA.  Let the instructors know that you are ready to have a client certificate created and the instructors will create a certificate for you and place it in the same directory that you are presently working in.  </p> <p>How the instructors will create this certificate for you</p> <p>In the interests of transparency, this is the command the instructors will use to create your certificate (after setting the ${student} environment variable appropriately).  Don't try to run this command as it won't work for you because you do not have access to the \"self-signed\" CA's private key.  (You can try- if you succeed, you are either an excellent hacker, or the instructors are not excellent system administrators, or some combination thereof).</p> <pre><code>### for your information only\ncerttool --generate-certificate \\\n--load-request /home/${student}/contract/grep11Server/workload/compose/c16-client.csr \\\n--outfile ${student}-c16-client.pem \\\n--load-ca-certificate c16server-ca.pem \\\n--load-ca-privkey c16server-ca.key \\\n--template cert.cfg \n\ncp -ipv ${student}-c16-client.pem /home/${student}/contract/grep11Server/workload/compose/c16-client.pem\n\nchown ${student}:hpvs_students /home/${student}/contract/grep11Server/workload/compose/c16-client.pem </code></pre> <p>This is also for information only- it is the contents of the configuration file cert.cfg that the instructors use in the above command:</p> cert.cfg<pre><code># Expiration days\nexpiration_days = 300\n\n# Honor certificate request extensions \n#honor_crq_extensions\n\n# keyUsage \nhonor_crq_ext = 2.5.29.15\n\n# extKeyUsage\nhonor_crq_ext = 2.5.27.39\n\n# subjectAltName\nhonor_crq_ext = 2.5.29.17\n\n# basicConstraints\nhonor_crq_ext = 2.5.29.19\n\ntls_www_client\n</code></pre> </li> <li> <p>After the instructors notify you that your certificate is ready , display it:</p> <pre><code>certtool --certificate-info --infile c16-client.pem\n</code></pre> <p>Your certificate will look like this:</p> CENA4SEE client certificate info <pre><code>X.509 Certificate Information:\n        Version: 3\n        Serial Number (hex): 6c8e1ecbc1ee385c441c03bd1dd64759641c5073\n        Issuer: DC=hpvs1,C=US,ST=Virginia,L=Herndon,O=IBM WSC IBM Z and LinuxONE,OU=IBM WSC,CN=c16server CA\n        Validity:\n            Not Before: Tue Feb 14 15:41:45 UTC 2023\n            Not After: Mon Dec 11 15:41:45 UTC 2023\n        Subject: DC=bczkvm,C=US,ST=Virginia,L=Herndon,O=IBM WSC,OU=IBM WSC IBM Z and LinuxONE,CN=c16client\n        Subject Public Key Algorithm: RSA\n        Algorithm Security Level: High (3072 bits)\n            Modulus (bits 3072):\n                00:b8:89:6a:97:6f:fd:78:30:e0:c0:16:0e:64:42:fa\n                e6:b9:6b:b1:c2:fd:25:c2:0f:f6:9d:f8:29:14:c5:38\n                0f:a2:0e:57:07:30:4f:bb:23:03:af:52:fb:65:e5:5b\n                e6:fe:93:21:74:8d:5c:e3:de:e0:1c:3b:47:1f:2f:4d\n                c2:8d:e1:87:01:f7:6b:d9:c0:5d:c4:2e:53:d1:64:39\n                90:be:a9:76:38:5b:52:14:aa:26:b1:9c:1b:24:18:f4\n                7c:d7:02:27:3d:08:4a:16:b3:83:c5:70:37:d9:ae:a9\n                b4:94:cf:a9:77:d0:96:19:f1:06:5d:5e:b6:ff:76:85\n                d3:88:fe:b1:b3:40:a7:75:61:1b:d8:23:93:1f:01:3f\n                4a:5e:a3:4b:95:26:36:37:b7:3e:14:c8:dc:c2:d1:1c\n                ee:0a:60:a8:57:18:c1:ef:6f:9a:4f:e7:95:93:6a:a6\n                15:41:34:d1:9c:51:f6:74:28:5c:79:cb:61:86:f2:73\n                db:f0:7d:78:1b:4f:a2:08:92:c5:6d:8f:11:02:28:fd\n                70:27:17:88:7f:6c:42:d5:c5:90:06:06:34:a7:bc:cd\n                d9:c5:c3:4e:00:48:88:7b:d4:53:d2:63:9e:c6:6e:a8\n                6e:29:a5:57:38:7d:c3:02:05:8c:ec:83:95:43:b9:5e\n                28:fd:1d:a0:9d:b0:98:58:2e:31:b4:fd:78:75:e7:6a\n                40:60:eb:1c:53:eb:ef:31:6a:fd:96:49:c1:db:c7:53\n                c6:f8:ca:7c:db:c3:16:31:37:32:2e:25:ed:d4:96:08\n                4e:bc:ce:04:b2:ed:c4:91:c1:72:1b:b0:9f:16:3d:17\n                df:0f:b3:b7:4d:25:db:c4:ad:b4:42:b9:b2:a8:3c:41\n                52:5c:d7:20:40:62:61:29:cf:89:0f:29:db:e9:53:17\n                51:65:fc:50:0b:79:13:b5:d6:ab:cb:f8:92:e2:e9:b5\n                0d:87:d3:c9:5f:d1:dc:c7:03:c4:e9:6c:ce:f2:09:22\n                f1\n            Exponent (bits 24):\n                01:00:01\n        Extensions:\n            Key Usage (critical):\n                Digital signature.\n            Subject Alternative Name (not critical):\n                DNSname: 172.16.0.61\n                IPAddress: 172.16.0.61\n            Basic Constraints (critical):\n                Certificate Authority (CA): FALSE\n            Key Purpose (not critical):\n                TLS WWW Client.\n            Subject Key Identifier (not critical):\n                70d0427d152be23fc9015be370581d19f3c47ff7\n            Authority Key Identifier (not critical):\n                a9a6c37c6e9d71c63f44db39cb5d5fca84228467\n        Signature Algorithm: RSA-SHA256\n        Signature:\n            16:5d:90:43:8d:ab:7e:5a:d5:7f:3a:20:36:0c:8e:04\n            5d:58:32:27:e1:80:19:f2:7e:2a:9e:9d:c1:11:50:6e\n            11:03:16:f5:90:4a:32:32:73:b5:59:1d:ef:a0:2e:26\n            3b:dc:09:ee:9b:c9:02:99:97:7e:54:d5:93:b1:18:5d\n            42:4f:f8:29:5e:f0:60:2c:b0:51:28:52:a3:6f:5c:93\n            be:e3:38:2a:cf:23:bf:3e:ce:6e:39:ff:7f:02:44:c3\n            9e:2b:54:8a:a7:14:17:75:32:38:ea:e4:0f:12:db:22\n            0b:07:93:bd:8f:5a:5e:00:1f:40:67:77:4a:1c:6a:5e\n            bf:d2:46:53:42:80:87:d5:67:0e:54:dc:ce:60:92:9b\n            15:4f:0c:eb:d2:4a:cb:5e:c0:ad:1c:00:80:66:fb:22\n            b1:87:fd:cf:43:f1:21:0d:e6:76:03:ed:99:d0:01:e2\n            07:fb:e3:b1:d6:a9:b3:5f:28:8e:48:4b:0b:b8:fa:b3\n            3e:f6:c4:66:39:ea:2d:97:fe:56:38:69:52:bb:31:ba\n            bc:04:6f:99:ee:f5:0e:02:e7:d1:56:87:22:a8:cd:09\n            c2:be:1a:31:a4:87:42:ff:ba:f7:43:d5:b1:d7:f5:5d\n            8c:fc:18:8d:5c:78:ef:ce:83:30:76:7c:99:dd:98:d4\n            cd:3b:ba:24:5b:bf:a0:be:d4:e5:aa:c2:db:fb:ca:9a\n            52:99:6d:02:f4:c7:da:bc:f0:76:d3:54:3a:91:5d:55\n            37:13:84:e4:ca:71:6e:1d:24:8b:05:ad:54:15:ee:02\n            9d:66:04:2a:eb:82:9e:53:a1:90:7d:43:4d:0e:ab:61\n            76:2e:ba:32:4a:10:41:c5:8b:4c:e7:1f:11:0a:7b:17\n            37:4b:b6:28:60:5c:69:6c:ae:ac:53:6b:6a:e4:f7:2a\n            b6:d1:7d:c4:9b:ea:8c:88:d4:de:11:13:ee:15:7e:d7\n            3e:4a:37:bc:19:de:8e:8e:ac:3d:e7:55:bf:8f:8d:6c\nOther Information:\n        Fingerprint:\n            sha1:479b56297c57950ebc2a112e651f9e2031bb3e5f\n            sha256:63bbb36695023e4abcb92222eccb15b43d2b8bc8d80b9e35ec9eb89ea5dd816b\n        Public Key ID:\n            sha1:70d0427d152be23fc9015be370581d19f3c47ff7\n            sha256:8f5547027afe8e10cd64d840903692e6a703b61a63fdbaebf9e0f446013a2ee6\n        Public Key PIN:\n            pin-sha256:j1VHAnr+jhDNZNhAkDaS5qcDthpj/brr+eD0RgE6LuY=\n\n-----BEGIN CERTIFICATE-----\nMIIFWDCCA8CgAwIBAgIUbI4ey8HuOFxEHAO9HdZHWWQcUHMwDQYJKoZIhvcNAQEL\nBQAwgZoxFTATBgNVBAMTDGMxNnNlcnZlciBDQTEQMA4GA1UECxMHSUJNIFdTQzEm\nMCQGA1UEChMdSUJNIFdTQyB6U3lzdGVtcyBhbmQgTGludXhPTkUxEDAOBgNVBAcT\nB0hlcm5kb24xETAPBgNVBAgTCFZpcmdpbmlhMQswCQYDVQQGEwJVUzEVMBMGCgmS\nJomT8ixkARkWBWhwdnMxMB4XDTIzMDIxNDE1NDE0NVoXDTIzMTIxMTE1NDE0NVow\ngZgxEjAQBgNVBAMTCWMxNmNsaWVudDEmMCQGA1UECxMdSUJNIFdTQyB6U3lzdGVt\ncyBhbmQgTGludXhPTkUxEDAOBgNVBAoTB0lCTSBXU0MxEDAOBgNVBAcTB0hlcm5k\nb24xETAPBgNVBAgTCFZpcmdpbmlhMQswCQYDVQQGEwJVUzEWMBQGCgmSJomT8ixk\nARkWBmJjemt2bTCCAaIwDQYJKoZIhvcNAQEBBQADggGPADCCAYoCggGBALiJapdv\n/Xgw4MAWDmRC+ua5a7HC/SXCD/ad+CkUxTgPog5XBzBPuyMDr1L7ZeVb5v6TIXSN\nXOPe4Bw7Rx8vTcKN4YcB92vZwF3ELlPRZDmQvql2OFtSFKomsZwbJBj0fNcCJz0I\nShazg8VwN9muqbSUz6l30JYZ8QZdXrb/doXTiP6xs0CndWEb2COTHwE/Sl6jS5Um\nNje3PhTI3MLRHO4KYKhXGMHvb5pP55WTaqYVQTTRnFH2dChcecthhvJz2/B9eBtP\nogiSxW2PEQIo/XAnF4h/bELVxZAGBjSnvM3ZxcNOAEiIe9RT0mOexm6obimlVzh9\nwwIFjOyDlUO5Xij9HaCdsJhYLjG0/Xh152pAYOscU+vvMWr9lknB28dTxvjKfNvD\nFjE3Mi4l7dSWCE68zgSy7cSRwXIbsJ8WPRffD7O3TSXbxK20QrmyqDxBUlzXIEBi\nYSnPiQ8p2+lTF1Fl/FALeRO11qvL+JLi6bUNh9PJX9HcxwPE6WzO8gki8QIDAQAB\no4GVMIGSMA8GA1UdDwEB/wQFAwMHgAAwHAYDVR0RBBUwE4ILMTcyLjE2LjAuNjGH\nBKwQAD0wDAYDVR0TAQH/BAIwADATBgNVHSUEDDAKBggrBgEFBQcDAjAdBgNVHQ4E\nFgQUcNBCfRUr4j/JAVvjcFgdGfPEf/cwHwYDVR0jBBgwFoAUqabDfG6dccY/RNs5\ny11fyoQihGcwDQYJKoZIhvcNAQELBQADggGBABZdkEONq35a1X86IDYMjgRdWDIn\n4YAZ8n4qnp3BEVBuEQMW9ZBKMjJztVkd76AuJjvcCe6byQKZl35U1ZOxGF1CT/gp\nXvBgLLBRKFKjb1yTvuM4Ks8jvz7Objn/fwJEw54rVIqnFBd1Mjjq5A8S2yILB5O9\nj1peAB9AZ3dKHGpev9JGU0KAh9VnDlTczmCSmxVPDOvSSstewK0cAIBm+yKxh/3P\nQ/EhDeZ2A+2Z0AHiB/vjsdaps18ojkhLC7j6sz72xGY56i2X/lY4aVK7Mbq8BG+Z\n7vUOAufRVociqM0Jwr4aMaSHQv+690PVsdf1XYz8GI1ceO/OgzB2fJndmNTNO7ok\nW7+gvtTlqsLb+8qaUpltAvTH2rzwdtNUOpFdVTcThOTKcW4dJIsFrVQV7gKdZgQq\n64KeU6GQfUNNDqthdi66MkoQQcWLTOcfEQp7FzdLtihgXGlsrqxTa2rk9yq20X3E\nm+qMiNTeERPuFX7XPko3vBnejo6sPedVv4+NbA==\n-----END CERTIFICATE-----\n</code></pre> </li> <li> <p>Switch directories:</p> <pre><code>cd ${HOME}/contract/grep11Server/workload/.\n</code></pre> </li> <li> <p>Time to add a convenience script</p> <p>You are almost finished with the workload section.  One thing to do is to add a convenience script to the workload directory.  This script is not supplied with the product, but is very useful in the creation of the contract.  Create it now and feel free to peruse it but do not run it now. It will be called later by another script.  Comments have been added to help explain what the script does. </p> <pre><code>cat &lt;&lt;-EOF &gt; flow.workload\n# Create the workload section of the contract and add the contents in the workload.yaml file.\n\n# # The Docker Compose file and all supporting configuration files are assumed to be in the ./compose directory\n# There should not be any unnecessary files as they will get tarred up and added to the COMPOSE_B64 variable\n#\nCOMPOSE_B64=\\$(tar -czv -C compose . | base64 -w0)\n\n#\n# This specifies an intermediate file that could be deleted at the end of the script but # is left intact for lab learning purposes-  it is plaintext so keeping it implies that\n# you would have to protect it appropriately.  In production you'll probably want to delete it\n#\nWORKLOAD_PLAIN=./workload.yaml.plaintext\n\n#\n# This specifies a file will be encrypted and signed and is the primary output of this script.  # It is combined with the encrypted and signed environment section that is created by # another script (flow.signature which is one directory level higher)\n# Note: this file will also wind up one directory level higher\n#\nWORKLOAD=workload.yaml\n\necho \"  type: workload\ncompose:\narchive: \\${COMPOSE_B64}\" &gt; \\${WORKLOAD_PLAIN}\n\n#\n# This is the encryption certificate for Hyper Protect Container Runtime and it is\n# provided with the Hyper Protect Virtual Servers v2.1.6 product\n#\nCONTRACT_KEY=/data/lab/hpvs216Certs/ibm-hyper-protect-container-runtime-23.6.2-encrypt.crt\n\n#\n# This variable holds a random password:\n#\nPASSWORD_WORKLOAD=\"\\$(openssl rand 32 | base64 -w0)\"\n\n#\n# This variable holds the output of the command pipe that\n# takes your plaintext workload yaml ($WORKLOAD_PLAIN) and encrypts it using the password that \n# was generated above ($PASSWORD_WORKLOAD) and then base64 encodes this encrypted workload\n#\n# As long as nobody else knows your random password ($PASSWORD_WORKLOAD) your data is safe.  \n# But, the Hyper Protect Container Runtime has to encrypt it, so it needs your password. \n# How will it get that password securely?  Read the next set of comment lines to find out.\n#\nENCRYPTED_WORKLOAD=\"\\$(echo -n \"\\$PASSWORD_WORKLOAD\" | base64 -d | openssl enc -aes-256-cbc -pbkdf2 -pass stdin -in \"\\$WORKLOAD_PLAIN\" | base64 -w0)\"\n\n#\n# This variable provides secure passage of your random password.  How?  \n# It encrypts it with the encryption key of the Hyper Protect Container Runtime (HPCR).\n# (A key that is encrypted by another key is often called a wrapped key).\n# Only the HPCR image has the private key which can decrypt this. It is protected from \n# access from any administrators.  So, malicious actors cannot do anything with this\n# wrapped key, even if they were able to get a hold of it.\n# \n#\nENCRYPTED_WORKLOAD_PASSWORD=\"\\$(echo -n \"\\$PASSWORD_WORKLOAD\" | base64 -d | openssl rsautl -encrypt -inkey \\$CONTRACT_KEY -certin | base64 -w0 )\"\n\n#\n# Use the following command to get the encrypted section of the contract:\n# This variable holds the output of a concatenation of a header, \"hyper-protect-basic\",\n# Your wrapped key, and your encrypted workload. \n#\nWORKLOAD_ENCRYPTED=\"hyper-protect-basic.\\${ENCRYPTED_WORKLOAD_PASSWORD}.\\${ENCRYPTED_WORKLOAD}\"\n\n#\n# The above variable is echoed to the a file the directory one level above\n#\necho \"\\$WORKLOAD_ENCRYPTED\" &gt; ../\\$WORKLOAD\n\n# \n# NOTE: In a production scenario the plaintext workload section would be \n# deleted or stored securely but it has been left here for student perusal.  \n# The filename is workload.yaml.plaintext\n#\nEOF\n</code></pre> </li> </ol>"},{"location":"lab/grep11/createGREP11Contract/#create-environment-section-of-the-contract","title":"Create environment section of the contract","text":"<ol> <li> <p>Change to the directory where you will prepare for environment section of the contract:</p> <pre><code>cd ../environment\n</code></pre> </li> <li> <p>In the environment section of the contract you are going to specify the information in  order to have your GREP11 Server log to the rsyslog that you configured earlier in the lab.</p> <ol> <li> <p>Create a directory to gather some files you will need for this rsyslog configuration and change to it:</p> <pre><code>mkdir -p rsyslog &amp;&amp; cd rsyslog\n</code></pre> </li> <li> <p>You will need the CA certificate of the rsyslog service that you created on your Ubuntu KVM guest which you can get via scp:</p> <pre><code>scp student@${StudentGuestIP}:rsyslogWork/ca.crt .\n</code></pre> </li> <li> <p>Copy your rsyslog client certificate from your working directory:</p> <pre><code>cp -ipv ${HOME}/rsyslogClientWork/client.crt .\n</code></pre> </li> <li> <p>Convert the client certificate to PKCS#8 format</p> <p>The directory you just copied the client certificate from also has your private key that you need. However, the HPCR image requires this to be in PKCS#8  (Public Key Cryptography Standard #8) format. Therefore you can't just copy it over- you need to convert it to PKCS#8 format:</p> <pre><code>openssl pkcs8 -topk8 -inform PEM -outform PEM -nocrypt \\\n-in ${HOME}/rsyslogClientWork/client-key.pem \\\n-out client-key-pkcs8.pem\n</code></pre> </li> <li> <p>Go back up one directory level:</p> <pre><code>cd .. &amp;&amp; pwd\n</code></pre> </li> <li> <p>We have provided a convenience script to assist in creating the environment section of the contract</p> <p>This script is not supplied with the product, but is very useful in the creation of the contract. Create it now and feel free to peruse it but do not run it now. It will be called later by another script. Comments have been added to help explain what the script does. </p> <pre><code>cat &lt;&lt;-EOF &gt; flow.env\n# Create the env section of the contract and add the contents in the env.yaml file.\n\n#\n# set some file locations at the top of the file here\n#\nRSYSLOG_CA_CRT=\"./rsyslog/ca.crt\"\nRSYSLOG_CLIENT_CRT=\"./rsyslog/client.crt\"\nRSYSLOG_CLIENT_KEY=\"./rsyslog/client-key-pkcs8.pem\"\n\n#\n# This specifies an intermediate file that could be deleted at the end of the script but # is left intact for lab learning purposes-  it is plaintext so keeping it implies that\n# you would have to protect it appropriately.  In production you'll probably want to delete it\n#\nENV_PLAIN=\"./env.yaml.plaintext\"\n\n#\n# This specifies a file will be encrypted and signed and is the primary output of this script.  # It is combined with the encrypted and signed workload section that is created by # another script (flow.signature which is one directory level higher)\n# Note: this file will also wind up one directory level higher\n#\nENV=\"env.yaml\"\n\n#\n# This variable holds the output of taking all the newlines out of the rsyslog CA certificate and\n# replacing them with the \"\\n\" characters.  In other words, a multiple line file is squashed down \n# to one line.  The HPCR runtime image will then convert it back to the multiple line format\n#\nENV_RSYSLOG_SERVER=\\$(awk -vRS=\"\\n\" -vORS=\"\\\\\\\\\\n\" '1' \\${RSYSLOG_CA_CRT})\n\n#\n# This variable holds the output of taking all the newlines out of the client certificate that the\n# HPCR runtime uses for communicating with rsyslog and replacing them with the \"\\n\" characters.\n# In other words, a multiple line file is squashed down to one line. THe HPCR runtime image will \n# then convert it back to the multiple line format\n#\nENV_RSYSLOG_CERT=\\$(awk -vRS=\"\\n\" -vORS=\"\\\\\\\\\\n\" '1' \\${RSYSLOG_CLIENT_CRT})\n\n#\n# This variable holds the output of taking all the newlines out of the client private key that the\n# HPCR runtime uses for communicating with rsyslog and replacing them with the \"\\n\" characters.\n# In other words, a multiple line file is squashed down to one line. THe HPCR runtime image will \n# then convert it back to the multiple line format. Before this all happens, the Private Key is \n# converted to PKCS#8 format\n#\nENV_RSYSLOG_KEY=\\$(awk -vRS=\"\\n\" -vORS=\"\\\\\\\\\\n\" '1'  \\${RSYSLOG_CLIENT_KEY})\n\n\necho \"  type: env\nlogging:\nsyslog:\nhostname: \\\"\\${StudentGuestIP}\\\"\nport: 6514\nserver: \\\"\\${ENV_RSYSLOG_SERVER}\\\"\ncert: \\\"\\${ENV_RSYSLOG_CERT}\\\"\nkey: \\\"\\${ENV_RSYSLOG_KEY}\\\"\" &gt;\\${ENV_PLAIN}\n\n#\n# This command adds the public signing key to the plaintext environment yaml.  This key is used inside \n# the Hyper Protect Container Runtime image to verify the signature over workload and environment sections of\n# the contract. \n#\ncat ./pubSigningKey.yaml &gt;&gt; \\${ENV_PLAIN}\n\n# This is the encryption certificate for Hyper Protect Container Runtime and it is\n# provided with the Hyper Protect Virtual Servers v2.1.6 product\n#\nCONTRACT_KEY=/data/lab/hpvs216Certs/ibm-hyper-protect-container-runtime-23.6.2-encrypt.crt\n\n#\n# This variable holds a random password:\n#\nPASSWORD_ENV=\"\\$(openssl rand 32 | base64 -w0)\"\n\n#\n# This variable holds the output of the command pipe that\n# takes your plaintext environment yaml (\\$ENV_PLAIN) and encrypts it using the password that \n# was generated above (\\$PASSWORD_ENV) and then base64 encodes this encrypted environment yaml\n#\n# As long as nobody else knows your random password (\\$PASSWORD_ENV) your data is safe.  \n# But, the Hyper Protect Container Runtime has to encrypt it, so it needs your password. \n# How will it get that password securely?  Read the next set of comment lines to find out.\n#\nENCRYPTED_ENV=\"\\$(echo -n \"\\$PASSWORD_ENV\" | base64 -d | openssl enc -aes-256-cbc -pbkdf2 -pass stdin -in \"\\$ENV_PLAIN\" | base64 -w0)\"\n\n#\n# This variable provides secure passage for your random password.  How?  \n# It encrypts it with the encryption key of the Hyper Protect Container Runtime (HPCR).\n# (A key that is encrypted by another key is often called a wrapped key).\n# Only the HPCR image has the private key which can decrypt this. It is protected from \n# access from any administrators.  So, malicious actors cannot do anything with this\n# wrapped key, even if they were able to get a hold of it.\n#\nENCRYPTED_ENV_PASSWORD=\"\\$(echo -n \"\\$PASSWORD_ENV\" | base64 -d | openssl rsautl -encrypt -inkey \\$CONTRACT_KEY -certin | base64 -w0 )\"\n\n#\n# Use the following command to get the encrypted environment section of the contract:\n# This variable holds the output of a concatenation of a header, \"hyper-protect-basic\",\n# Your wrapped key, and your encrypted environment yaml.. \n#\nENV_ENCRYPTED=\"hyper-protect-basic.\\${ENCRYPTED_ENV_PASSWORD}.\\${ENCRYPTED_ENV}\"\n#\n# The above variable writes the encrypted environment section to the directory one level above\n#\necho \"\\$ENV_ENCRYPTED\" &gt; ../\\$ENV\nEOF\n</code></pre> </li> </ol> </li> <li> <p>Backup one more directory level:</p> <pre><code>cd ..\n</code></pre> </li> <li> <p>You will create three more files that are convenience scripts, similar to flow.workload and flow.env which you have already created:</p> <ol> <li> <p>The first script will provide some preparation steps.  Create it, peruse it, love it, but don't run it yet:</p> <pre><code>cat &lt;&lt; EOF &gt; flow.prepare\n\n# Use the following command to generate a key pair to sign the contract \nopenssl genrsa -aes128 -passout pass:test1234 -out private.pem 4096\nopenssl rsa -in private.pem -passin pass:test1234 -pubout -out public.pem\n\n# The following command is an example of how you can get the signing key:\nkey=\\$(awk -vRS=\"\\n\" -vORS=\"\\\\\\\\\\n\" '1' public.pem)\necho \"  signingKey: \\\"\\${key%\\\\\\\\n}\\\"\" &gt; environment/pubSigningKey.yaml\nEOF\n</code></pre> </li> <li> <p>Create the second script which signs the concatenated workload and environment sections of the contract and then appends the signature as the third and final element of the contract.  Don't run it yet!</p> <pre><code>cat &lt;&lt; EOF &gt; flow.signature\n# combine workload and environment\ncat workload.yaml env.yaml | tr -d '\\n' &gt; contract.yaml\n\n# Sign the combination from workload and env being approved\necho \\$( cat contract.yaml | openssl dgst -sha256 -sign private.pem -passin pass:test1234 | openssl enc -base64) | tr -d ' ' &gt; signature.yaml\n\n# Create user data and add signature:\necho \"workload: \\$(cat workload.yaml)\nenv: \\$(cat env.yaml)\nenvWorkloadSignature: \\$(cat signature.yaml)\" &gt; user_data.yaml\n\necho \"\"\necho \"import \\`pwd\\`/user_data.yaml into User Data or copy and paste from below:\"\necho \"\"\n\ncat user_data.yaml\nEOF\n</code></pre> </li> <li> <p>This script isn't strictly necessary for the lab for reasons stated in the comments in the script, but you can create it anyway:</p> <pre><code>cat &lt;&lt; EOF &gt; flow.clear\n#\n# It isn't really necessary to run this in our lab environment \n# because the other scripts will happily trod on these files \n# as necessary.\n#\n# It is more likely that you would run this after running the\n# other scripts in order to remove these files for security\n# reasons\n#\n# But if you ever had a need to save your signing key pair, \n# you would want to save private.pem somewhere safe.\n# \nrm private.pem public.pem\nrm environment/pubSigningKey.yaml environment/env.yaml.plaintext\nrm workload/workload.yaml.plaintext\nrm env.yaml workload.yaml contract.yaml signature.yaml user_data.yaml\nEOF\n</code></pre> </li> </ol> </li> </ol>"},{"location":"lab/grep11/createGREP11Contract/#encrypt-and-sign-the-contract","title":"Encrypt and sign the contract","text":"<ol> <li> <p>Create a final helper script which calls the flow.* scripts you created earlier:</p> <pre><code>cat &lt;&lt; EOF &gt; makeContract\n. ./flow.prepare\ncd workload\n. ./flow.workload\ncd ../environment\n. ./flow.env\ncd ..\n. ./flow.signature\n\nEOF\n</code></pre> </li> <li> <p>Now run the helper script that you just created:</p> <pre><code>. ./makeContract\n</code></pre> </li> </ol> <p>The script creates the final contract in a file named <code>user_data.yaml</code>.  It also displays the contents of this file to the screen. At the bottom of the output you will see an envWorkloadSignature key.  If there is a gobbledygook value (base64-encoded text) associated with this key then things went well.</p>"},{"location":"lab/grep11/createGREP11Contract/#create-the-startup-file-for-the-hpvs-216-grep11-guest","title":"Create the startup file for the HPVS 2.1.6 GREP11 guest","text":"<ol> <li> <p>Create a copy of the <code>user_data.yaml</code> file that your created</p> <p>The contract that you just created is going to be packaged with some other files into a startup file for the HPVS 2.1.6 guest that will run your GREP11 Server. One of the files expected is a file named <code>user-data</code> that is just a copy of the <code>user_data.yaml</code> file that was just created</p> <pre><code>cp -ipv user_data.yaml user-data\n</code></pre> <p>Why didn't the script just do the above copy for me</p> <p>We kept user-data intact in case something went wrong in the process, in which case user_data.yaml may be rubbish but at least you haven't trampled on a good user-data that might already be in use.  </p> </li> <li> <p>Create <code>vendor-data</code> which is another file required by the process:</p> <pre><code>cat &lt;&lt; EOF &gt; vendor-data\n#cloud-config\nusers:\n- default\nEOF\n</code></pre> </li> <li> <p>Create <code>meta-data</code> which is also required, and it will have a hostname tailored for your userid:</p> <pre><code>cat &lt;&lt; EOF &gt; meta-data\nlocal-hostname: $(whoami)-grep11server\nEOF\n</code></pre> </li> <li> <p>Run this command (RHEL-specific, see product documentation for Ubuntu command) in order to create the startup file, ciiso.iso:</p> <pre><code>genisoimage -output /var/lib/libvirt/images/hpvslab/$(whoami)/ciiso.iso \\\n-volid cidata -joliet -rock user-data meta-data vendor-data\n</code></pre> <p>Your output will look like this:</p> Output from genisoimage command <pre><code>I: -input-charset not specified, using utf-8 (detected in locale settings)\nTotal translation table size: 0\nTotal rockridge attributes bytes: 414\nTotal directory bytes: 0\nPath table size(bytes): 10\nMax brk space used 0\n203 extents written (0 MB)\n</code></pre> </li> </ol> <p>Please click the Next link at the bottom of the page to continue with the lab.</p>"},{"location":"lab/grep11/hackMeIfYouCan/","title":"Demonstrate the protection of the Secure Execution-enabled HPVS 2.1.6 guest","text":""},{"location":"lab/grep11/hackMeIfYouCan/#overview-of-this-section","title":"Overview of this section","text":"<p>In this section you will demonstrate the protection offered by the Secure Execution-enabled HPVS 2.1.6 guest in contrast to the ease in which a malicious insider can eavesdrop on a standard KVM guest.</p>"},{"location":"lab/grep11/hackMeIfYouCan/#log-out-of-your-ubuntu-kvm-guest","title":"Log out of your Ubuntu KVM guest","text":"<p>All of the work in this section is performed on the RHEL 8.5 host, so log out of your Ubuntu KVM guest. You have finished your work in the Ubuntu KVM guest for this lab:</p> <pre><code>exit\n</code></pre>"},{"location":"lab/grep11/hackMeIfYouCan/#switch-to-your-rhel-host-terminal-session","title":"Switch to your RHEL host terminal session","text":"<p>Switch to your terminal tab or window for your RHEL host session:</p> <p></p> <p>You should be logged in still if you have been following the lab in order in one sitting, but if you need to log in again the command is <code>ssh -l ${StudentID} 192.168.22.64</code></p>"},{"location":"lab/grep11/hackMeIfYouCan/#snoop-into-your-standard-kvm-guest-with-ease","title":"Snoop into your standard KVM guest with ease","text":"<p>A systems administrator at the host level does not have a difficult time getting into a standard KVM guest's business.  Try this command to dump the entire address space of your Ubuntu KVM guest in the home directory of your lab userid:</p> <pre><code>cd ${HOME} &amp;&amp; sudo virsh dump $(whoami) $(whoami).dump\n</code></pre> <p>This will take a little while but you have just dumped the entire memory of your KVM guest.</p> <p>Look at the file size:</p> <pre><code>ls -lh $(whoami).dump\n</code></pre> <p>We suspect that a malicious actor might have a few more tools in their toolbag than what we will show you here, but try this command:</p> <pre><code>sudo strings $(whoami).dump\n</code></pre> <p>The above command will print out all of the strings it recognizes in the memory dump.  You are probably getting tired of seeing them pass by on your terminal screen, so type <code>Ctrl-C</code> when you want your command prompt back.</p> <p>Try this command to see how many strings were found in the file:</p> <pre><code>sudo strings $(whoami).dump | wc --lines\n</code></pre> <p>Your output may differ, but when we tried this command while writing up the lab, we had 2,397,409 strings found in our dump.  Now we didn't dig much deeper than this, but it's possible that a motivated hacker might find something among those millions of strings with which to make mischief.</p>"},{"location":"lab/grep11/hackMeIfYouCan/#go-ahead-and-try-to-hack-me-says-the-hpvs-216-guest","title":"Go ahead and try to hack me says the HPVS 2.1.6 guest","text":"<p>Try to snoop on your Secure Execution-enabled Hyper Protect Virtual Servers 2.1.6 guest that is running your GREP11 Server. See what happens:</p> <pre><code>suffix=$(temp=$(whoami) &amp;&amp; echo ${temp: -2}) ; sudo virsh dump grep11se${suffix} grep11se${suffix}.dump\n</code></pre> Shot down in flames, ain't it a shame <pre><code>error: Failed to core dump domain 'grep11se01' to grep11se01.dump\nerror: internal error: unable to execute QEMU command 'migrate': protected VMs are currently not migrateable.\n</code></pre> <p>If your name or address or credit card number or social security number or bank card PIN code or cryptocurrency wallet was in memory, would you have preferred it to be in memory in a standard KVM guest or in a Secure Execution-enabled Hyper Protect Virtual Servers guest?  If you answered  standard KVM guest, then please return to the beginning of the lab and start over.  If you chose SE-enabled HPVS guest, then congratulations, you have successfully completed the lab!! (Except for cleanup).</p> <p>Please proceed to the next section of the lab for lab cleanup.</p>"},{"location":"lab/grep11/labCleanup/","title":"Clean up the resources you created during the lab","text":"<p>All of the work in this section is performed on the RHEL 8.5 host:</p> <p></p> <p>You should already be logged in to it if you have been following this lab in order.</p>"},{"location":"lab/grep11/labCleanup/#shut-down-your-standard-ubuntu-kvm-guest","title":"Shut down your standard Ubuntu KVM guest","text":"<p>Enter this command to shut down your standard Ubuntu KVM guest:</p> <pre><code>sudo virsh shutdown $(whoami)\n</code></pre>"},{"location":"lab/grep11/labCleanup/#shut-down-your-hpvs-216-guest-your-grep11-server","title":"Shut down your HPVS 2.1.6 guest (your GREP11 server):","text":"<pre><code>suffix=$(temp=$(whoami) &amp;&amp; echo ${temp: -2}) ; sudo virsh shutdown grep11se${suffix} </code></pre>"},{"location":"lab/grep11/labCleanup/#clean-up-the-home-directory-of-your-userid-on-the-rhel-85-host","title":"Clean up the home directory of your userid on the RHEL 8.5 host:","text":"<pre><code>cd ${HOME} &amp;&amp; rm -rf rsyslogClientWork GREP11CAwork contract $(whoami).dump\n</code></pre>"},{"location":"lab/grep11/labCleanup/#log-out-of-the-rhel-host","title":"Log out of the RHEL host:","text":"<pre><code>exit\n</code></pre> <p>Thank you for cleaning up and congratulations on finishing the lab!  We hope you enjoyed it and learned from it and we welcome your feedback on how to make it better.</p> <p>There is no need to click the <code>Next</code> link at the bottom as that will take you to a page that is for instructor usage.  Feel free to check it out though, as it will give you insight into the tools that we use to create and update the lab documentation. </p>"},{"location":"lab/grep11/launchGREP11guest/","title":"Start the GREP11 Server as a Secure Execution-enabled, HPVS 2.1.6 guest","text":""},{"location":"lab/grep11/launchGREP11guest/#launch-the-hpvs-216-grep11-server","title":"launch the HPVS 2.1.6 GREP11 server","text":"<p>You will start this section from your login session on the RHEL host, and will soon be instructed to switch to your Ubuntu KVM guest session. But until then, start from this familiar window or tab:</p> <p></p> <p>This fancy command figures out the last two characters of your assigned userid and is used in other commands in this section, so that the lab instructions will work for everybody:</p> <pre><code>suffix=$(temp=$(whoami) &amp;&amp; echo ${temp: -2})\n</code></pre> <p>You aren't going to change anything here since it's already been defined for you by the instructors, but you can display the KVM guest definition of your HPVS 2.1.6 GREP11 Server:</p> <pre><code>sudo virsh dumpxml grep11se${suffix}\n</code></pre> Definition of KVM guest for GREP11 Server <pre><code>&lt;domain type='kvm'&gt;\n  &lt;name&gt;grep11se02&lt;/name&gt;\n  &lt;uuid&gt;2315f8ea-a340-4506-abbf-ae04cf7ea868&lt;/uuid&gt;\n  &lt;metadata&gt;\n    &lt;libosinfo:libosinfo xmlns:libosinfo=\"http://libosinfo.org/xmlns/libvirt/domain/1.0\"&gt;\n      &lt;libosinfo:os id=\"http://ubuntu.com/ubuntu/20.04\"/&gt;\n    &lt;/libosinfo:libosinfo&gt;\n  &lt;/metadata&gt;\n  &lt;memory unit='KiB'&gt;3903488&lt;/memory&gt;\n  &lt;currentMemory unit='KiB'&gt;3903488&lt;/currentMemory&gt;\n  &lt;vcpu placement='static'&gt;2&lt;/vcpu&gt;\n  &lt;os&gt;\n    &lt;type arch='s390x' machine='s390-ccw-virtio-rhel8.2.0'&gt;hvm&lt;/type&gt;\n    &lt;boot dev='hd'/&gt;\n  &lt;/os&gt;\n  &lt;cpu mode='host-model' check='partial'/&gt;\n  &lt;clock offset='utc'/&gt;\n  &lt;on_poweroff&gt;destroy&lt;/on_poweroff&gt;\n  &lt;on_reboot&gt;restart&lt;/on_reboot&gt;\n  &lt;on_crash&gt;destroy&lt;/on_crash&gt;\n  &lt;devices&gt;\n    &lt;emulator&gt;/usr/libexec/qemu-kvm&lt;/emulator&gt;\n    &lt;disk type='file' device='disk'&gt;\n      &lt;driver name='qemu' type='qcow2' iommu='on'/&gt;\n      &lt;source file='/var/lib/libvirt/images/hpcr/student02/ibm-hyper-protect-container-runtime-23.6.2.qcow2'/&gt;\n      &lt;backingStore/&gt;\n      &lt;target dev='vda' bus='virtio'/&gt;\n      &lt;address type='ccw' cssid='0xfe' ssid='0x0' devno='0x0000'/&gt;\n    &lt;/disk&gt;\n    &lt;disk type='file' device='disk'&gt;\n      &lt;driver name='qemu' type='raw' cache='none' io='native' iommu='on'/&gt;\n      &lt;source file='/var/lib/libvirt/images/hpvslab/student02/ciiso.iso'/&gt;\n      &lt;target dev='vdc' bus='virtio'/&gt;\n      &lt;readonly/&gt;\n      &lt;address type='ccw' cssid='0xfe' ssid='0x0' devno='0x0002'/&gt;\n    &lt;/disk&gt;\n    &lt;controller type='pci' index='0' model='pci-root'/&gt;\n    &lt;interface type='network'&gt;\n      &lt;mac address='52:54:00:b1:e0:11'/&gt;\n      &lt;source network='default'/&gt;\n      &lt;model type='virtio'/&gt;\n      &lt;driver name='vhost' iommu='on'/&gt;\n      &lt;address type='ccw' cssid='0xfe' ssid='0x0' devno='0x0001'/&gt;\n    &lt;/interface&gt;\n    &lt;console type='pty'&gt;\n      &lt;target type='sclp' port='0'/&gt;\n    &lt;/console&gt;\n    &lt;audio id='1' type='none'/&gt;\n    &lt;memballoon model='none'/&gt;\n    &lt;panic model='s390'/&gt;\n  &lt;/devices&gt;\n&lt;/domain&gt;\n</code></pre> <p>Start your GREP11 Server and attach to its console.  Watch the messages carefully.  You should not see any failures:</p> <pre><code>sudo virsh start grep11se${suffix} --console\n</code></pre> This is what success looks like <pre><code>Domain 'grep11se02' started\nConnected to domain 'grep11se02'\nEscape character is ^] (Ctrl + ])\n# HPL11 build:23.8.5 enabler:23.6.0\n# Tue Sep  5 21:07:01 UTC 2023\n# Machine Type/Plant/Serial: 8561/02/31A38\n# create new root partition...\n# encrypt root partition...\n# create root filesystem...\n# write OS to root disk...\n# decrypt user-data...\n2 token decrypted, 0 encrypted token ignored\n# run attestation...\n# set hostname...\n# finish root disk setup...\n# Tue Sep  5 21:07:29 UTC 2023\n# HPL11 build:23.8.5 enabler:23.6.0\n# HPL11099I: bootloader end\nhpcr-dnslookup[729]: HPL14000I: Network connectivity check completed successfully.\nhpcr-logging[871]: Configuring logging ...\nhpcr-logging[872]: Version [1.1.145]\nhpcr-logging[872]: Configuring logging, input [/var/hyperprotect/user-data.decrypted] ...\nhpcr-logging[872]: HPL01010I: Logging has been setup successfully.\nhpcr-logging[871]: Logging has been configured\nhpcr-catch-success[1337]: VSI has started successfully.\nhpcr-catch-success[1337]: HPL10001I: Services succeeded -&gt; systemd triggered hpl-catch-success service\n</code></pre> <p>You will have to enter the <code>Ctrl + ]</code> key-combination to break out of the console.</p>"},{"location":"lab/grep11/launchGREP11guest/#verify-that-grep11-server-log-messages-are-received-by-rsyslog","title":"verify that GREP11 server log messages are received by rsyslog","text":"<p>The logging of the GREP11 server is going to the rsyslog service that you configured on your Ubuntu guest, so switch to the terminal tab or window for your KVM standard guest.</p> <p>You should still be comfortably logged in on this tab or window:</p> <p></p> <p>The arguments to the journalctl command here aren't the most elegant in the world, but, unless midnight passed since you started your GREP11 Server, you will be able to see messages in rsyslog from when you just started up your GREP11 Server:</p> <pre><code>journalctl --since today --no-pager\n</code></pre> <p>There are a lot of messages logged, a veritable trove of treasure for the curious.  Here is an example of what you should be able to see:</p> Log messages in rsyslog from starting the GREP11 Server <pre><code>Sep 05 21:07:31 ubuntu2204 vpcnode[1777]: authentication probe\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Linux version 5.15.0-79-generic (buildd@bos02-s390x-016) (gcc (Ubuntu 11.3.0-1ubuntu1~22.04.1) 11.3.0, GNU ld (GNU Binutils for Ubuntu) 2.38) #86-Ubuntu SMP Mon Jul 10 16:19:54 UTC 2023 (Ubuntu 5.15.0-79.86-generic 5.15.111)\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  setup: Linux is running under KVM in 64-bit mode\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  setup: Relocating AMODE31 section of size 0x00003000\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  setup: The maximum memory size is 3812MB\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  cpu: 2 configured CPUs, 0 standby CPUs\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Write protected kernel read-only data: 18692k\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Zone ranges:\nSep 05 21:07:32 ubuntu2204 kernel[1777]:    DMA      [mem 0x0000000000000000-0x000000007fffffff]\nSep 05 21:07:32 ubuntu2204 kernel[1777]:    Normal   [mem 0x0000000080000000-0x00000000ee3fffff]\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Movable zone start for each node\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Early memory node ranges\nSep 05 21:07:32 ubuntu2204 kernel[1777]:    node   0: [mem 0x0000000000000000-0x00000000ee3fffff]\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Initmem setup node 0 [mem 0x0000000000000000-0x00000000ee3fffff]\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  On node 0, zone Normal: 7168 pages in unavailable ranges\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  percpu: Embedded 32 pages/cpu s91904 r8192 d30976 u131072\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  pcpu-alloc: s91904 r8192 d30976 u131072 alloc=32*4096\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  pcpu-alloc: [0] 0 [0] 1 \nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Built 1 zonelists, mobility grouping on.  Total pages: 960624\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Policy zone: Normal\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Kernel command line: panic=0 blacklist=virtio_rng swiotlb=262144 cloud-init=disabled console=ttyS0 printk.time=0 systemd.getty_auto=0 systemd.firstboot=0 module.sig_enforce=1 quiet loglevel=0 systemd.show_status=0\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Unknown kernel command line parameters \"blacklist=virtio_rng cloud-init=disabled\", will be passed to user space.\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Dentry cache hash table entries: 524288 (order: 10, 4194304 bytes, linear)\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Inode-cache hash table entries: 262144 (order: 9, 2097152 bytes, linear)\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  mem auto-init: stack:off, heap alloc:on, heap free:off\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  software IO TLB: mapped [mem 0x000000005fffc000-0x000000007fffc000] (512MB)\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Memory: 3266280K/3903488K available (11988K kernel code, 3212K rwdata, 6704K rodata, 5200K init, 1252K bss, 637208K reserved, 0K cma-reserved)\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  SLUB: HWalign=256, Order=0-3, MinObjects=0, CPUs=2, Nodes=1\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  ftrace: allocating 34120 entries in 134 pages\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  ftrace: allocated 134 pages with 3 groups\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  rcu: Hierarchical RCU implementation.\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  rcu: #011RCU restricting CPUs from NR_CPUS=512 to nr_cpu_ids=2.\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  #011Rude variant of Tasks RCU enabled.\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  #011Tracing variant of Tasks RCU enabled.\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  rcu: RCU calculated value of scheduler-enlistment delay is 10 jiffies.\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  rcu: Adjusting geometry for rcu_fanout_leaf=16, nr_cpu_ids=2\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  NR_IRQS: 3, nr_irqs: 3, preallocated irqs: 3\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  clocksource: tod: mask: 0xffffffffffffffff max_cycles: 0x3b0a9be803b0a9, max_idle_ns: 1805497147909793 ns\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  random: crng init done\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Console: colour dummy device 80x25\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  printk: console [ttyS0] enabled\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  printk: console [ttysclp0] enabled\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Calibrating delay loop (skipped)... 24038.00 BogoMIPS preset\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  pid_max: default: 32768 minimum: 301\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  LSM: Security Framework initializing\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  landlock: Up and running.\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Yama: becoming mindful.\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  AppArmor: AppArmor initialized\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Mount-cache hash table entries: 8192 (order: 4, 65536 bytes, linear)\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Mountpoint-cache hash table entries: 8192 (order: 4, 65536 bytes, linear)\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  rcu: Hierarchical SRCU implementation.\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  smp: Bringing up secondary CPUs ...\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  smp: Brought up 1 node, 2 CPUs\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  devtmpfs: initialized\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  futex hash table entries: 512 (order: 5, 131072 bytes, linear)\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  NET: Registered PF_NETLINK/PF_ROUTE protocol family\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  audit: initializing netlink subsys (disabled)\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  audit: type=2000 audit(1693948021.799:1): state=initialized audit_enabled=0 res=1\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Spectre V2 mitigation: etokens\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  HugeTLB registered 1.00 MiB page size, pre-allocated 0 pages\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  iommu: Default domain type: Translated \nSep 05 21:07:32 ubuntu2204 kernel[1777]:  iommu: DMA domain TLB invalidation policy: strict mode \nSep 05 21:07:32 ubuntu2204 kernel[1777]:  SCSI subsystem initialized\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  NetLabel: Initializing\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  NetLabel:  domain hash size = 128\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  NetLabel:  protocols = UNLABELED CIPSOv4 CALIPSO\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  NetLabel:  unlabeled traffic allowed by default\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  zpci: PCI is not supported because CPU facilities 69 or 71 are not available\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  VFS: Disk quotas dquot_6.6.0\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  VFS: Dquot-cache hash table entries: 512 (order 0, 4096 bytes)\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  AppArmor: AppArmor Filesystem Enabled\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  NET: Registered PF_INET protocol family\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  IP idents hash table entries: 65536 (order: 7, 524288 bytes, linear)\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  tcp_listen_portaddr_hash hash table entries: 2048 (order: 3, 32768 bytes, linear)\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Table-perturb hash table entries: 65536 (order: 6, 262144 bytes, linear)\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  TCP established hash table entries: 32768 (order: 6, 262144 bytes, linear)\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  TCP bind hash table entries: 32768 (order: 7, 524288 bytes, linear)\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  TCP: Hash tables configured (established 32768 bind 32768)\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  MPTCP token hash table entries: 4096 (order: 4, 98304 bytes, linear)\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  UDP hash table entries: 2048 (order: 4, 65536 bytes, linear)\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  UDP-Lite hash table entries: 2048 (order: 4, 65536 bytes, linear)\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  NET: Registered PF_UNIX/PF_LOCAL protocol family\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  NET: Registered PF_XDP protocol family\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Trying to unpack rootfs image as initramfs...\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  kvm-s390: SIE is not available\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  hypfs: The hardware system does not support hypfs\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Initialise system trusted keyrings\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Key type blacklist registered\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  workingset: timestamp_bits=45 max_order=20 bucket_order=0\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  zbud: loaded\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  squashfs: version 4.0 (2009/01/31) Phillip Lougher\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  fuse: init (API version 7.34)\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  integrity: Platform Keyring initialized\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Key type asymmetric registered\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Asymmetric key parser 'x509' registered\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Block layer SCSI generic (bsg) driver version 0.4 loaded (major 249)\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  io scheduler mq-deadline registered\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  hvc_iucv: The z/VM IUCV HVC device driver cannot be used without z/VM\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  loop: module loaded\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  tun: Universal TUN/TAP device driver, 1.6\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  device-mapper: core: CONFIG_IMA_DISABLE_HTABLE is disabled. Duplicate IMA measurements will not be recorded in the IMA log.\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  device-mapper: uevent: version 1.0.3\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  device-mapper: ioctl: 4.45.0-ioctl (2021-03-22) initialised: dm-devel@redhat.com\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  drop_monitor: Initializing network drop monitor service\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  NET: Registered PF_INET6 protocol family\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Freeing initrd memory: 9828K\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Segment Routing with IPv6\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  In-situ OAM (IOAM) with IPv6\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  NET: Registered PF_PACKET protocol family\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Key type dns_resolver registered\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  cio: Channel measurement facility initialized using format extended (mode autodetected)\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  sclp_sd: Store Data request failed (eq=2, di=3, response=0x40f0, flags=0x00, status=0, rc=-5)\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  ap: The hardware system does not support AP instructions\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  registered taskstats version 1\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Loading compiled-in X.509 certificates\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Loaded X.509 cert 'Build time autogenerated kernel key: 033cfe156234b615233dffd1cb0a66d4b6280b04'\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Loaded X.509 cert 'Canonical Ltd. Live Patch Signing: 14df34d1a87cf37625abec039ef2bf521249b969'\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Loaded X.509 cert 'Canonical Ltd. Kernel Module Signing: 88f752e560a1e0737e31163a466ad7b70a850c19'\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  blacklist: Loading compiled-in revocation X.509 certificates\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Loaded X.509 cert 'Canonical Ltd. Secure Boot Signing: 61482aa2830d0ab2ad5af10b7250da9033ddcef0'\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Loaded X.509 cert 'Canonical Ltd. Secure Boot Signing (2017): 242ade75ac4a15e50d50c84b0d45ff3eae707a03'\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Loaded X.509 cert 'Canonical Ltd. Secure Boot Signing (ESM 2018): 365188c1d374d6b07c3c8f240f8ef722433d6a8b'\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Loaded X.509 cert 'Canonical Ltd. Secure Boot Signing (2019): c0746fd6c5da3ae827864651ad66ae47fe24b3e8'\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Loaded X.509 cert 'Canonical Ltd. Secure Boot Signing (2021 v1): a8d54bbb3825cfb94fa13c9f8a594a195c107b8d'\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Loaded X.509 cert 'Canonical Ltd. Secure Boot Signing (2021 v2): 4cf046892d6fd3c9a5b03f98d845f90851dc6a8c'\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Loaded X.509 cert 'Canonical Ltd. Secure Boot Signing (2021 v3): 100437bb6de6e469b581e61cd66bce3ef4ed53af'\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Loaded X.509 cert 'Canonical Ltd. Secure Boot Signing (Ubuntu Core 2019): c1d57b8f6b743f23ee41f4f7ee292f06eecadfb9'\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  zswap: loaded using pool lzo/zbud\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Key type .fscrypt registered\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Key type fscrypt-provisioning registered\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Key type encrypted registered\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  AppArmor: AppArmor sha1 policy hashing enabled\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  ima: No TPM chip found, activating TPM-bypass!\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Loading compiled-in module X.509 certificates\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Loaded X.509 cert 'Build time autogenerated kernel key: 033cfe156234b615233dffd1cb0a66d4b6280b04'\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  ima: Allocated hash algorithm: sha1\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  ima: No architecture policies found\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  evm: Initialising EVM extended attributes:\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  evm: security.selinux\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  evm: security.SMACK64\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  evm: security.SMACK64EXEC\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  evm: security.SMACK64TRANSMUTE\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  evm: security.SMACK64MMAP\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  evm: security.apparmor\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  evm: security.ima\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  evm: security.capability\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  evm: HMAC attrs: 0x1\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Freeing unused kernel image (initmem) memory: 5200K\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Write protected read-only-after-init data: 136k\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Checked W+X mappings: passed, no unexpected W+X pages found\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Run /init as init process\nSep 05 21:07:32 ubuntu2204 kernel[1777]:    with arguments:\nSep 05 21:07:32 ubuntu2204 kernel[1777]:      /init\nSep 05 21:07:32 ubuntu2204 kernel[1777]:    with environment:\nSep 05 21:07:32 ubuntu2204 kernel[1777]:      HOME=/\nSep 05 21:07:32 ubuntu2204 kernel[1777]:      TERM=linux\nSep 05 21:07:32 ubuntu2204 kernel[1777]:      blacklist=virtio_rng\nSep 05 21:07:32 ubuntu2204 kernel[1777]:      cloud-init=disabled\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  virtio_blk virtio0: [vda] 209715200 512-byte logical blocks (107 GB/100 GiB)\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  GPT:Primary header thinks Alt. header is not at the end of the disk.\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  GPT:8388607 != 209715199\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  GPT:Alternate GPT header not at the end of the disk.\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  GPT:8388607 != 209715199\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  GPT: Use GNU Parted to correct GPT errors.\nSep 05 21:07:32 ubuntu2204 kernel[1777]:   vda: vda1\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  virtio_blk virtio1: [vdb] 816 512-byte logical blocks (418 kB/408 KiB)\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  EXT4-fs (dm-0): mounted filesystem with ordered data mode. Opts: (null). Quota mode: none.\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  EXT4-fs (vda1): mounted filesystem with ordered data mode. Opts: (null). Quota mode: none.\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  ISO 9660 Extensions: Microsoft Joliet Level 3\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  ISO 9660 Extensions: RRIP_1991A\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  EXT4-fs (dm-0): re-mounted. Opts: (null). Quota mode: none.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  systemd 249.11-0ubuntu3.9 running in system mode (+PAM +AUDIT +SELINUX +APPARMOR +IMA +SMACK +SECCOMP +GCRYPT +GNUTLS +OPENSSL +ACL +BLKID +CURL +ELFUTILS +FIDO2 +IDN2 -IDN +IPTC +KMOD +LIBCRYPTSETUP +LIBFDISK +PCRE2 -PWQUALITY -P11KIT -QRENCODE +BZIP2 +LZ4 +XZ +ZLIB +ZSTD -XKBCOMMON +UTMP +SYSVINIT default-hierarchy=unified)\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Detected virtualization kvm.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Detected architecture s390x.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Hostname set to &lt;student02-grep11server&gt;.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Initializing machine ID from random generator.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Installed transient /etc/machine-id file.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  /lib/systemd/system/verify-disk-encryption-invoker.service:6: Special user nobody configured, this is not safe!\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  /lib/systemd/system/se-dnslookup.service:10: Special user nobody configured, this is not safe!\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  /lib/systemd/system/hpl-catch-success.service:13: Special user nobody configured, this is not safe!\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  /lib/systemd/system/hpl-catch-failed.service:10: Special user nobody configured, this is not safe!\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  se-registry-auth.service: Found ordering cycle on hpl-logging.target/verify-active\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  se-registry-auth.service: Found dependency on se-logging-sync.target/start\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  se-registry-auth.service: Found dependency on se-logging.service/start\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  se-registry-auth.service: Found dependency on basic.target/start\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  se-registry-auth.service: Found dependency on sockets.target/start\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  se-registry-auth.service: Found dependency on docker.socket/start\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  se-registry-auth.service: Found dependency on se-registry-auth.service/start\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  se-registry-auth.service: Job sockets.target/start deleted to break ordering cycle starting with se-registry-auth.service/start\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Queued start job for default target Multi-User System.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Created slice Slice /system/modprobe.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Created slice Slice /system/systemd-fsck.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Created slice User and Session Slice.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Started Dispatch Password Requests to Console Directory Watch.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Started Forward Password Requests to Wall Directory Watch.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Set up automount Arbitrary Executable File Formats File System Automount Point.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Reached target Local Encrypted Volumes.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Reached target Path Units.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Reached target Remote File Systems.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Reached target Slice Units.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Reached target Swaps.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Reached target Local Verity Protected Volumes.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Listening on Syslog Socket.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Listening on fsck to fsckd communication Socket.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Listening on initctl Compatibility Named Pipe.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Listening on Journal Audit Socket.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Listening on Journal Socket (/dev/log).\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Listening on Journal Socket.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Listening on Network Service Netlink Socket.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Listening on udev Control Socket.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Listening on udev Kernel Socket.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Mounting Huge Pages File System...\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Mounting POSIX Message Queue File System...\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Mounting Kernel Debug File System...\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Mounting Kernel Trace File System...\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting Journal Service...\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting Set the console keyboard layout...\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting Create List of Static Device Nodes...\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting Load Kernel Module chromeos_pstore...\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting Load Kernel Module configfs...\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting Load Kernel Module drm...\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting Load Kernel Module efi_pstore...\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting Load Kernel Module fuse...\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting Load Kernel Module pstore_blk...\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting Load Kernel Module pstore_zone...\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting Load Kernel Module ramoops...\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Condition check resulted in OpenVSwitch configuration for cleanup being skipped.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting File System Check on Root Device...\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting Load Kernel Modules...\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting Coldplug All udev Devices...\nSep 05 21:07:32 ubuntu2204 systemd-journald[1777]:  Journal started\nSep 05 21:07:32 ubuntu2204 systemd-journald[1777]:  Runtime Journal (/run/log/journal/a536ae21ee0d4480954246b1ce38e0dd) is 4.0M, max 32.0M, 28.0M free.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Started Journal Service.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Mounted Huge Pages File System.\nSep 05 21:07:32 ubuntu2204 systemd-fsck[1777]:  /dev/mapper/luks-c88abd09-279d-4108-b5df-6faba4dd318e: clean, 26377/6291456 files, 808668/25161728 blocks\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Mounted POSIX Message Queue File System.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Mounted Kernel Debug File System.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Mounted Kernel Trace File System.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Finished Create List of Static Device Nodes.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  modprobe@chromeos_pstore.service: Deactivated successfully.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Finished Load Kernel Module chromeos_pstore.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  modprobe@efi_pstore.service: Deactivated successfully.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Finished Load Kernel Module efi_pstore.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  modprobe@fuse.service: Deactivated successfully.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Finished Load Kernel Module fuse.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  modprobe@pstore_blk.service: Deactivated successfully.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Finished Load Kernel Module pstore_blk.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  modprobe@pstore_zone.service: Deactivated successfully.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Finished Load Kernel Module pstore_zone.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Finished File System Check on Root Device.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Finished Load Kernel Modules.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Mounting FUSE Control File System...\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Started File System Check Daemon to report status.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting Remount Root and Kernel File Systems...\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting Apply Kernel Variables...\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  modprobe@configfs.service: Deactivated successfully.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Finished Load Kernel Module configfs.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  modprobe@drm.service: Deactivated successfully.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Finished Load Kernel Module drm.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  modprobe@ramoops.service: Deactivated successfully.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Finished Load Kernel Module ramoops.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Mounting Kernel Configuration File System...\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Mounted FUSE Control File System.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Mounted Kernel Configuration File System.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Finished Coldplug All udev Devices.\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  EXT4-fs (dm-0): re-mounted. Opts: errors=remount-ro. Quota mode: none.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Finished Remount Root and Kernel File Systems.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting Flush Journal to Persistent Storage...\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Condition check resulted in Platform Persistent Storage Archival being skipped.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting Load/Save Random Seed...\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting Create System Users...\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Finished Apply Kernel Variables.\nSep 05 21:07:32 ubuntu2204 systemd-journald[1777]:  Time spent on flushing to /var/log/journal/a536ae21ee0d4480954246b1ce38e0dd is 2.005ms for 272 entries.\nSep 05 21:07:32 ubuntu2204 systemd-journald[1777]:  System Journal (/var/log/journal/a536ae21ee0d4480954246b1ce38e0dd) is 8.0M, max 4.0G, 3.9G free.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Finished Create System Users.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting Create Static Device Nodes in /dev...\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Finished Load/Save Random Seed.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Condition check resulted in First Boot Complete being skipped.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Finished Create Static Device Nodes in /dev.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting Rule-based Manager for Device Events and Files...\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Finished Set the console keyboard layout.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Reached target Preparation for Local File Systems.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Finished Flush Journal to Persistent Storage.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Started Rule-based Manager for Device Events and Files.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting Network Configuration...\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  VFIO - User Level meta-driver version: 0.3\nSep 05 21:07:32 ubuntu2204 systemd-networkd[1777]:  lo: Link UP\nSep 05 21:07:32 ubuntu2204 systemd-networkd[1777]:  lo: Gained carrier\nSep 05 21:07:32 ubuntu2204 systemd-networkd[1777]:  Enumeration completed\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Started Network Configuration.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting Wait for Network to be Configured...\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Finished Wait for Network to be Configured.\nSep 05 21:07:32 ubuntu2204 systemd-udevd[1777]:  Using default interface naming scheme 'v249'.\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  virtio_net virtio2 enc1: renamed from eth0\nSep 05 21:07:32 ubuntu2204 systemd-networkd[1777]:  eth0: Interface name change detected, renamed to enc1.\nSep 05 21:07:32 ubuntu2204 systemd-udevd[1777]:  Using default interface naming scheme 'v249'.\nSep 05 21:07:32 ubuntu2204 systemd-networkd[1777]:  enc1: Link UP\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Found device /dev/disk/by-uuid/4d7e976d-b69c-48ec-9a8a-a47cd2e28e70.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting File System Check on /dev/disk/by-uuid/4d7e976d-b69c-48ec-9a8a-a47cd2e28e70...\nSep 05 21:07:32 ubuntu2204 systemd-fsck[1777]:  /dev/vda1: clean, 13/262144 files, 140195/1048064 blocks\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Finished File System Check on /dev/disk/by-uuid/4d7e976d-b69c-48ec-9a8a-a47cd2e28e70.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Mounting /boot...\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Mounted /boot.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Reached target Local File Systems.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting Load AppArmor profiles...\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting Set console font and keymap...\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting Set Up Additional Binary Formats...\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Condition check resulted in Store a System Token in an EFI Variable being skipped.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting Commit a transient machine-id on disk...\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting Create Volatile Files and Directories...\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  EXT4-fs (vda1): mounted filesystem with ordered data mode. Opts: (null). Quota mode: none.\nSep 05 21:07:32 ubuntu2204 apparmor.systemd[1777]:  Restarting AppArmor\nSep 05 21:07:32 ubuntu2204 apparmor.systemd[1777]:  Reloading AppArmor profiles\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Finished Set console font and keymap.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  proc-sys-fs-binfmt_misc.automount: Got automount request for /proc/sys/fs/binfmt_misc, triggered by 702 (systemd-binfmt)\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Mounting Arbitrary Executable File Formats File System...\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Finished Create Volatile Files and Directories.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting Network Name Resolution...\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting Network Time Synchronization...\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting Record System Boot/Shutdown in UTMP...\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Mounted Arbitrary Executable File Formats File System.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Finished Set Up Additional Binary Formats.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Finished Record System Boot/Shutdown in UTMP.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Finished Commit a transient machine-id on disk.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Started Network Time Synchronization.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Reached target System Time Set.\nSep 05 21:07:32 ubuntu2204 systemd-resolved[1777]:  Positive Trust Anchors:\nSep 05 21:07:32 ubuntu2204 systemd-resolved[1777]:  . IN DS 20326 8 2 e06d44b80b8f1d39a95c0b0d7c65d08458e880409bbc683457104237c7f8ec8d\nSep 05 21:07:32 ubuntu2204 systemd-resolved[1777]:  Negative trust anchors: home.arpa 10.in-addr.arpa 16.172.in-addr.arpa 17.172.in-addr.arpa 18.172.in-addr.arpa 19.172.in-addr.arpa 20.172.in-addr.arpa 21.172.in-addr.arpa 22.172.in-addr.arpa 23.172.in-addr.arpa 24.172.in-addr.arpa 25.172.in-addr.arpa 26.172.in-addr.arpa 27.172.in-addr.arpa 28.172.in-addr.arpa 29.172.in-addr.arpa 30.172.in-addr.arpa 31.172.in-addr.arpa 168.192.in-addr.arpa d.f.ip6.arpa corp home internal intranet lan local private test\nSep 05 21:07:32 ubuntu2204 audit[1777]:  AVC apparmor=\"STATUS\" operation=\"profile_load\" profile=\"unconfined\" name=\"lsb_release\" pid=717 comm=\"apparmor_parser\"\nSep 05 21:07:32 ubuntu2204 systemd-resolved[1777]:  Using system hostname 'student02-grep11server'.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Started Network Name Resolution.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Reached target Network.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Reached target Network is Online.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Reached target Host and Network Name Lookups.\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  audit: type=1400 audit(1693948049.519:2): apparmor=\"STATUS\" operation=\"profile_load\" profile=\"unconfined\" name=\"lsb_release\" pid=717 comm=\"apparmor_parser\"\nSep 05 21:07:32 ubuntu2204 audit[1777]:  AVC apparmor=\"STATUS\" operation=\"profile_load\" profile=\"unconfined\" name=\"nvidia_modprobe\" pid=718 comm=\"apparmor_parser\"\nSep 05 21:07:32 ubuntu2204 audit[1777]:  AVC apparmor=\"STATUS\" operation=\"profile_load\" profile=\"unconfined\" name=\"nvidia_modprobe//kmod\" pid=718 comm=\"apparmor_parser\"\nSep 05 21:07:32 ubuntu2204 apparmor.systemd[1777]:  Skipping profile in /etc/apparmor.d/disable: usr.sbin.rsyslogd\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  audit: type=1400 audit(1693948049.549:3): apparmor=\"STATUS\" operation=\"profile_load\" profile=\"unconfined\" name=\"nvidia_modprobe\" pid=718 comm=\"apparmor_parser\"\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  audit: type=1400 audit(1693948049.549:4): apparmor=\"STATUS\" operation=\"profile_load\" profile=\"unconfined\" name=\"nvidia_modprobe//kmod\" pid=718 comm=\"apparmor_parser\"\nSep 05 21:07:32 ubuntu2204 audit[1777]:  AVC apparmor=\"STATUS\" operation=\"profile_load\" profile=\"unconfined\" name=\"/usr/lib/NetworkManager/nm-dhcp-client.action\" pid=719 comm=\"apparmor_parser\"\nSep 05 21:07:32 ubuntu2204 audit[1777]:  AVC apparmor=\"STATUS\" operation=\"profile_load\" profile=\"unconfined\" name=\"/usr/lib/NetworkManager/nm-dhcp-helper\" pid=719 comm=\"apparmor_parser\"\nSep 05 21:07:32 ubuntu2204 audit[1777]:  AVC apparmor=\"STATUS\" operation=\"profile_load\" profile=\"unconfined\" name=\"/usr/lib/connman/scripts/dhclient-script\" pid=719 comm=\"apparmor_parser\"\nSep 05 21:07:32 ubuntu2204 audit[1777]:  AVC apparmor=\"STATUS\" operation=\"profile_load\" profile=\"unconfined\" name=\"/{,usr/}sbin/dhclient\" pid=719 comm=\"apparmor_parser\"\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Finished Load AppArmor profiles.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Reached target System Initialization.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Started Daily apt download activities.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Started Daily apt upgrade and clean activities.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Started Daily dpkg database backup timer.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Started Periodic ext4 Online Metadata Check for All Filesystems.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Started Discard unused blocks once a week.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Started Daily rotation of log files.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Started Message of the Day.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Started Podman auto-update timer.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Started Daily Cleanup of Temporary Directories.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Condition check resulted in Ubuntu Pro Timer for running repeated jobs being skipped.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Started Timer for calling verify disk encryption invoker service.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Reached target Basic System.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Reached target Timer Units.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Listening on D-Bus System Message Bus Socket.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Listening on Podman API Socket.\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  audit: type=1400 audit(1693948049.789:5): apparmor=\"STATUS\" operation=\"profile_load\" profile=\"unconfined\" name=\"/usr/lib/NetworkManager/nm-dhcp-client.action\" pid=719 comm=\"apparmor_parser\"\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  audit: type=1400 audit(1693948049.789:6): apparmor=\"STATUS\" operation=\"profile_load\" profile=\"unconfined\" name=\"/usr/lib/NetworkManager/nm-dhcp-helper\" pid=719 comm=\"apparmor_parser\"\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  audit: type=1400 audit(1693948049.789:7): apparmor=\"STATUS\" operation=\"profile_load\" profile=\"unconfined\" name=\"/usr/lib/connman/scripts/dhclient-script\" pid=719 comm=\"apparmor_parser\"\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  audit: type=1400 audit(1693948049.789:8): apparmor=\"STATUS\" operation=\"profile_load\" profile=\"unconfined\" name=\"/{,usr/}sbin/dhclient\" pid=719 comm=\"apparmor_parser\"\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting containerd container runtime...\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Started D-Bus System Message Bus.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Started Save initial kernel messages after boot.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting Remove Stale Online ext4 Metadata Check Snapshots...\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Condition check resulted in getty on tty2-tty6 if dbus and logind are not available being skipped.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Reached target Login Prompts.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting Dispatcher daemon for systemd-networkd...\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting Podman auto-update service...\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting Podman Start All Containers With Restart Policy Set To Always...\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting Podman API Service...\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting Logging Configuration...\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting User Login Management...\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting Permit User Sessions...\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Condition check resulted in Ubuntu Pro reboot cmds being skipped.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Condition check resulted in Ubuntu Pro Background Auto Attach being skipped.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Started Podman API Service.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Finished Permit User Sessions.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting Set console scheme...\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Finished Set console scheme.\nSep 05 21:07:32 ubuntu2204 dbus-daemon[1777]:  [system] AppArmor D-Bus mediation is enabled\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  e2scrub_reap.service: Deactivated successfully.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Finished Remove Stale Online ext4 Metadata Check Snapshots.\nSep 05 21:07:32 ubuntu2204 systemd-logind[1777]:  New seat seat0.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Started User Login Management.\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:29.948346972Z\" level=info msg=\"starting containerd\" revision= version=1.7.2\nSep 05 21:07:32 ubuntu2204 networkd-dispatcher[1777]:  No valid path found for iwconfig\nSep 05 21:07:32 ubuntu2204 networkd-dispatcher[1777]:  No valid path found for iw\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Started Dispatcher daemon for systemd-networkd.\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:29.986902685Z\" level=info msg=\"loading plugin \\\"io.containerd.snapshotter.v1.btrfs\\\"...\" type=io.containerd.snapshotter.v1\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:29.992601773Z\" level=info msg=\"skip loading plugin \\\"io.containerd.snapshotter.v1.btrfs\\\"...\" error=\"path /var/lib/containerd/io.containerd.snapshotter.v1.btrfs (ext4) must be a btrfs filesystem to be used with the btrfs snapshotter: skip plugin\" type=io.containerd.snapshotter.v1\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:29.992655035Z\" level=info msg=\"loading plugin \\\"io.containerd.content.v1.content\\\"...\" type=io.containerd.content.v1\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:29.992737527Z\" level=info msg=\"loading plugin \\\"io.containerd.snapshotter.v1.native\\\"...\" type=io.containerd.snapshotter.v1\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:29.992815968Z\" level=info msg=\"loading plugin \\\"io.containerd.snapshotter.v1.overlayfs\\\"...\" type=io.containerd.snapshotter.v1\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:29.994445610Z\" level=info msg=\"loading plugin \\\"io.containerd.metadata.v1.bolt\\\"...\" type=io.containerd.metadata.v1\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:29.994480649Z\" level=info msg=\"metadata content store policy set\" policy=shared\nSep 05 21:07:32 ubuntu2204 podman[1777]:  time=\"2023-09-05T21:07:29Z\" level=info msg=\"/usr/bin/podman filtering at log level info\"\nSep 05 21:07:32 ubuntu2204 podman[1777]:  time=\"2023-09-05T21:07:29Z\" level=info msg=\"/usr/bin/podman filtering at log level info\"\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.004455490Z\" level=info msg=\"loading plugin \\\"io.containerd.differ.v1.walking\\\"...\" type=io.containerd.differ.v1\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.004488438Z\" level=info msg=\"loading plugin \\\"io.containerd.event.v1.exchange\\\"...\" type=io.containerd.event.v1\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.004503586Z\" level=info msg=\"loading plugin \\\"io.containerd.gc.v1.scheduler\\\"...\" type=io.containerd.gc.v1\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.004540771Z\" level=info msg=\"loading plugin \\\"io.containerd.lease.v1.manager\\\"...\" type=io.containerd.lease.v1\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.004553332Z\" level=info msg=\"loading plugin \\\"io.containerd.nri.v1.nri\\\"...\" type=io.containerd.nri.v1\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.004591270Z\" level=info msg=\"NRI interface is disabled by configuration.\"\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.004600441Z\" level=info msg=\"loading plugin \\\"io.containerd.runtime.v2.task\\\"...\" type=io.containerd.runtime.v2\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.004665859Z\" level=info msg=\"loading plugin \\\"io.containerd.runtime.v2.shim\\\"...\" type=io.containerd.runtime.v2\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.004679908Z\" level=info msg=\"loading plugin \\\"io.containerd.sandbox.store.v1.local\\\"...\" type=io.containerd.sandbox.store.v1\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.004693273Z\" level=info msg=\"loading plugin \\\"io.containerd.sandbox.controller.v1.local\\\"...\" type=io.containerd.sandbox.controller.v1\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.004703656Z\" level=info msg=\"loading plugin \\\"io.containerd.streaming.v1.manager\\\"...\" type=io.containerd.streaming.v1\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.004716116Z\" level=info msg=\"loading plugin \\\"io.containerd.service.v1.introspection-service\\\"...\" type=io.containerd.service.v1\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.004725918Z\" level=info msg=\"loading plugin \\\"io.containerd.service.v1.containers-service\\\"...\" type=io.containerd.service.v1\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.004736897Z\" level=info msg=\"loading plugin \\\"io.containerd.service.v1.content-service\\\"...\" type=io.containerd.service.v1\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.004751456Z\" level=info msg=\"loading plugin \\\"io.containerd.service.v1.diff-service\\\"...\" type=io.containerd.service.v1\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.004761696Z\" level=info msg=\"loading plugin \\\"io.containerd.service.v1.images-service\\\"...\" type=io.containerd.service.v1\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.004770993Z\" level=info msg=\"loading plugin \\\"io.containerd.service.v1.namespaces-service\\\"...\" type=io.containerd.service.v1\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.004780547Z\" level=info msg=\"loading plugin \\\"io.containerd.service.v1.snapshots-service\\\"...\" type=io.containerd.service.v1\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.004790646Z\" level=info msg=\"loading plugin \\\"io.containerd.runtime.v1.linux\\\"...\" type=io.containerd.runtime.v1\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.004835598Z\" level=info msg=\"loading plugin \\\"io.containerd.monitor.v1.cgroups\\\"...\" type=io.containerd.monitor.v1\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.005053689Z\" level=info msg=\"loading plugin \\\"io.containerd.service.v1.tasks-service\\\"...\" type=io.containerd.service.v1\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.005079036Z\" level=info msg=\"loading plugin \\\"io.containerd.grpc.v1.introspection\\\"...\" type=io.containerd.grpc.v1\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.005089501Z\" level=info msg=\"loading plugin \\\"io.containerd.transfer.v1.local\\\"...\" type=io.containerd.transfer.v1\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.005107004Z\" level=info msg=\"loading plugin \\\"io.containerd.internal.v1.restart\\\"...\" type=io.containerd.internal.v1\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.005146580Z\" level=info msg=\"loading plugin \\\"io.containerd.grpc.v1.containers\\\"...\" type=io.containerd.grpc.v1\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.005162499Z\" level=info msg=\"loading plugin \\\"io.containerd.grpc.v1.content\\\"...\" type=io.containerd.grpc.v1\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.005176845Z\" level=info msg=\"loading plugin \\\"io.containerd.grpc.v1.diff\\\"...\" type=io.containerd.grpc.v1\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.005220181Z\" level=info msg=\"loading plugin \\\"io.containerd.grpc.v1.events\\\"...\" type=io.containerd.grpc.v1\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.005229711Z\" level=info msg=\"loading plugin \\\"io.containerd.grpc.v1.healthcheck\\\"...\" type=io.containerd.grpc.v1\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.005239184Z\" level=info msg=\"loading plugin \\\"io.containerd.grpc.v1.images\\\"...\" type=io.containerd.grpc.v1\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.005250961Z\" level=info msg=\"loading plugin \\\"io.containerd.grpc.v1.leases\\\"...\" type=io.containerd.grpc.v1\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.005259808Z\" level=info msg=\"loading plugin \\\"io.containerd.grpc.v1.namespaces\\\"...\" type=io.containerd.grpc.v1\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.005270364Z\" level=info msg=\"loading plugin \\\"io.containerd.internal.v1.opt\\\"...\" type=io.containerd.internal.v1\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.005600410Z\" level=info msg=\"loading plugin \\\"io.containerd.grpc.v1.sandbox-controllers\\\"...\" type=io.containerd.grpc.v1\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.005619593Z\" level=info msg=\"loading plugin \\\"io.containerd.grpc.v1.sandboxes\\\"...\" type=io.containerd.grpc.v1\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.005629434Z\" level=info msg=\"loading plugin \\\"io.containerd.grpc.v1.snapshots\\\"...\" type=io.containerd.grpc.v1\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.005640996Z\" level=info msg=\"loading plugin \\\"io.containerd.grpc.v1.streaming\\\"...\" type=io.containerd.grpc.v1\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.005650346Z\" level=info msg=\"loading plugin \\\"io.containerd.grpc.v1.tasks\\\"...\" type=io.containerd.grpc.v1\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.005661167Z\" level=info msg=\"loading plugin \\\"io.containerd.grpc.v1.transfer\\\"...\" type=io.containerd.grpc.v1\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.005673456Z\" level=info msg=\"loading plugin \\\"io.containerd.grpc.v1.version\\\"...\" type=io.containerd.grpc.v1\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.005684487Z\" level=info msg=\"loading plugin \\\"io.containerd.grpc.v1.cri\\\"...\" type=io.containerd.grpc.v1\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.005783067Z\" level=info msg=\"Start cri plugin with config {PluginConfig:{ContainerdConfig:{Snapshotter:overlayfs DefaultRuntimeName:runc DefaultRuntime:{Type: Path: Engine: PodAnnotations:[] ContainerAnnotations:[] Root: Options:map[] PrivilegedWithoutHostDevices:false PrivilegedWithoutHostDevicesAllDevicesAllowed:false BaseRuntimeSpec: NetworkPluginConfDir: NetworkPluginMaxConfNum:0 Snapshotter: SandboxMode:} UntrustedWorkloadRuntime:{Type: Path: Engine: PodAnnotations:[] ContainerAnnotations:[] Root: Options:map[] PrivilegedWithoutHostDevices:false PrivilegedWithoutHostDevicesAllDevicesAllowed:false BaseRuntimeSpec: NetworkPluginConfDir: NetworkPluginMaxConfNum:0 Snapshotter: SandboxMode:} Runtimes:map[runc:{Type:io.containerd.runc.v2 Path: Engine: PodAnnotations:[] ContainerAnnotations:[] Root: Options:map[BinaryName: CriuImagePath: CriuPath: CriuWorkPath: IoGid:0 IoUid:0 NoNewKeyring:false NoPivotRoot:false Root: ShimCgroup: SystemdCgroup:false] PrivilegedWithoutHostDevices:false PrivilegedWithoutHostDevicesAllDevicesAllowed:false BaseRuntimeSpec: NetworkPluginConfDir: NetworkPluginMaxConfNum:0 Snapshotter: SandboxMode:podsandbox}] NoPivot:false DisableSnapshotAnnotations:true DiscardUnpackedLayers:false IgnoreBlockIONotEnabledErrors:false IgnoreRdtNotEnabledErrors:false} CniConfig:{NetworkPluginBinDir:/opt/cni/bin NetworkPluginConfDir:/etc/cni/net.d NetworkPluginMaxConfNum:1 NetworkPluginSetupSerially:false NetworkPluginConfTemplate: IPPreference:} Registry:{ConfigPath: Mirrors:map[] Configs:map[] Auths:map[] Headers:map[]} ImageDecryption:{KeyModel:node} DisableTCPService:true StreamServerAddress:127.0.0.1 StreamServerPort:0 StreamIdleTimeout:4h0m0s EnableSelinux:false SelinuxCategoryRange:1024 SandboxImage:registry.k8s.io/pause:3.8 StatsCollectPeriod:10 SystemdCgroup:false EnableTLSStreaming:false X509KeyPairStreaming:{TLSCertFile: TLSKeyFile:} MaxContainerLogLineSize:16384 DisableCgroup:false DisableApparmor:false RestrictOOMScoreAdj:false MaxConcurrentDownloads:3 DisableProcMount:false UnsetSeccompProfile: TolerateMissingHugetlbController:true DisableHugetlbController:true DeviceOwnershipFromSecurityContext:false IgnoreImageDefinedVolumes:false NetNSMountsUnderStateDir:false EnableUnprivilegedPorts:false EnableUnprivilegedICMP:false EnableCDI:false CDISpecDirs:[/etc/cdi /var/run/cdi] ImagePullProgressTimeout:1m0s DrainExecSyncIOTimeout:0s} ContainerdRootDir:/var/lib/containerd ContainerdEndpoint:/run/containerd/containerd.sock RootDir:/var/lib/containerd/io.containerd.grpc.v1.cri StateDir:/run/containerd/io.containerd.grpc.v1.cri}\"\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.005833821Z\" level=info msg=\"Connect containerd service\"\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.005852221Z\" level=info msg=\"using legacy CRI server\"\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.005856641Z\" level=info msg=\"using experimental NRI integration - disable nri plugin to prevent this\"\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.005886955Z\" level=info msg=\"Get image filesystem path \\\"/var/lib/containerd/io.containerd.snapshotter.v1.overlayfs\\\"\"\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.006370465Z\" level=info msg=\"loading plugin \\\"io.containerd.tracing.processor.v1.otlp\\\"...\" type=io.containerd.tracing.processor.v1\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.006395817Z\" level=info msg=\"Start subscribing containerd event\"\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.006425898Z\" level=info msg=\"Start recovering state\"\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.006466590Z\" level=info msg=\"Start event monitor\"\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.006476779Z\" level=info msg=\"Start snapshots syncer\"\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.006484085Z\" level=info msg=\"Start cni network conf syncer for default\"\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.006490388Z\" level=info msg=\"Start streaming server\"\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.006645556Z\" level=info msg=\"skip loading plugin \\\"io.containerd.tracing.processor.v1.otlp\\\"...\" error=\"no OpenTelemetry endpoint: skip plugin\" type=io.containerd.tracing.processor.v1\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.006655987Z\" level=info msg=\"loading plugin \\\"io.containerd.internal.v1.tracing\\\"...\" type=io.containerd.internal.v1\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.006665801Z\" level=info msg=\"skipping tracing processor initialization (no tracing plugin)\" error=\"no OpenTelemetry endpoint: skip plugin\"\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.006790238Z\" level=info msg=serving... address=/run/containerd/containerd.sock.ttrpc\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.006806339Z\" level=info msg=serving... address=/run/containerd/containerd.sock\nSep 05 21:07:32 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:30.010390952Z\" level=info msg=\"containerd successfully booted in 0.064417s\"\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Started containerd container runtime.\nSep 05 21:07:32 ubuntu2204 podman[1777]:  time=\"2023-09-05T21:07:30Z\" level=info msg=\"[graphdriver] using prior storage driver: overlay\"\nSep 05 21:07:32 ubuntu2204 podman[1777]:  time=\"2023-09-05T21:07:30Z\" level=info msg=\"[graphdriver] using prior storage driver: overlay\"\nSep 05 21:07:32 ubuntu2204 podman[1777]:  time=\"2023-09-05T21:07:30Z\" level=info msg=\"Found CNI network podman (type=bridge) at /etc/cni/net.d/87-podman-bridge.conflist\"\nSep 05 21:07:32 ubuntu2204 podman[1777]:  time=\"2023-09-05T21:07:30Z\" level=info msg=\"Found CNI network podman (type=bridge) at /etc/cni/net.d/87-podman-bridge.conflist\"\nSep 05 21:07:32 ubuntu2204 podman[1777]:  2023-09-05 21:07:30.089577891 +0000 UTC m=+0.233357472 system refresh\nSep 05 21:07:32 ubuntu2204 podman[1777]:  time=\"2023-09-05T21:07:30Z\" level=info msg=\"Setting parallel job count to 7\"\nSep 05 21:07:32 ubuntu2204 podman[1777]:  time=\"2023-09-05T21:07:30Z\" level=info msg=\"Setting parallel job count to 7\"\nSep 05 21:07:32 ubuntu2204 podman[1777]:  time=\"2023-09-05T21:07:30Z\" level=info msg=\"using systemd socket activation to determine API endpoint\"\nSep 05 21:07:32 ubuntu2204 podman[1777]:  time=\"2023-09-05T21:07:30Z\" level=info msg=\"using API endpoint: ''\"\nSep 05 21:07:32 ubuntu2204 podman[1777]:  time=\"2023-09-05T21:07:30Z\" level=info msg=\"API service listening on \\\"/run/podman/podman.sock\\\"\"\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  etc-machine\\x2did.mount: Deactivated successfully.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  var-lib-containers-storage-overlay.mount: Deactivated successfully.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  var-lib-containers-storage-overlay.mount: Deactivated successfully.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Finished Podman Start All Containers With Restart Policy Set To Always.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  podman-auto-update.service: Deactivated successfully.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Finished Podman auto-update service.\nSep 05 21:07:32 ubuntu2204 systemd-networkd[1777]:  enc1: Gained carrier\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  IPv6: ADDRCONF(NETDEV_CHANGE): enc1: link becomes ready\nSep 05 21:07:32 ubuntu2204 systemd-networkd[1777]:  enc1: DHCPv4 address 172.16.0.62/24 via 172.16.0.1\nSep 05 21:07:32 ubuntu2204 dbus-daemon[1777]:  [system] Activating via systemd: service name='org.freedesktop.hostname1' unit='dbus-org.freedesktop.hostname1.service' requested by ':1.3' (uid=100 pid=647 comm=\"/lib/systemd/systemd-networkd \" label=\"unconfined\")\nSep 05 21:07:32 ubuntu2204 systemd-timesyncd[1777]:  Network configuration changed, trying to establish connection.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting Hostname Service...\nSep 05 21:07:32 ubuntu2204 systemd-timesyncd[1777]:  Initial synchronization to time server 185.125.190.58:123 (ntp.ubuntu.com).\nSep 05 21:07:32 ubuntu2204 dbus-daemon[1777]:  [system] Successfully activated service 'org.freedesktop.hostname1'\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Started Hostname Service.\nSep 05 21:07:32 ubuntu2204 systemd-networkd[1777]:  Could not set hostname: Access denied\nSep 05 21:07:32 ubuntu2204 hpcr-dnslookup[1777]:  HPL14000I: Network connectivity check completed successfully.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Finished Logging Configuration.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Reached target Early Initialization.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Reached target Logging to remote monitoring server is initiated..\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting Logging Configuration...\nSep 05 21:07:32 ubuntu2204 hpcr-logging[1777]:  Configuring logging ...\nSep 05 21:07:32 ubuntu2204 hpcr-logging[1777]:  Version [1.1.145]\nSep 05 21:07:32 ubuntu2204 hpcr-logging[1777]:  Configuring logging, input [/var/hyperprotect/user-data.decrypted] ...\nSep 05 21:07:32 ubuntu2204 hpcr-logging[1777]:  ValidateContractE ...\nSep 05 21:07:32 ubuntu2204 hpcr-logging[1777]:  config written: /etc/rsyslog.d/22-logging.conf\nSep 05 21:07:32 ubuntu2204 hpcr-logging[1777]:  HPL01010I: Logging has been setup successfully.\nSep 05 21:07:32 ubuntu2204 hpcr-logging[1777]:  Logging has been configured\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Finished Logging Configuration.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting System Logging Service...\nSep 05 21:07:32 ubuntu2204 rsyslogd[1777]:  rsyslogd's groupid changed to 111\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Started System Logging Service.\nSep 05 21:07:32 ubuntu2204 rsyslogd[1777]:  rsyslogd's userid changed to 104\nSep 05 21:07:32 ubuntu2204 rsyslogd[1777]:  [origin software=\"rsyslogd\" swVersion=\"8.2112.0\" x-pid=\"876\" x-info=\"https://www.rsyslog.com\"] start\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Reached target Synchronizes the Logging Target.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Reached target Logging to remote log server is initiated..\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting Service that does validation of contract...\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting HPCR Registry Authentication...\nSep 05 21:07:32 ubuntu2204 rsyslogd[1777]:  imjournal: No statefile exists, /var/spool/rsyslog/journal_state will be created (ignore if this is first run): No such file or directory [v8.2112.0 try https://www.rsyslog.com/e/2040 ]\nSep 05 21:07:32 ubuntu2204 hpcr-registry-auth[1777]:  Starting Registry Authentication ...\nSep 05 21:07:32 ubuntu2204 hpcr-contract[1777]:  Welcome to SE Contract Validator\nSep 05 21:07:32 ubuntu2204 hpcr-contract[1777]:  Contract file passed is:  /var/hyperprotect/user-data.decrypted\nSep 05 21:07:32 ubuntu2204 hpcr-registry-auth[1777]:  Version [1.0.70]\nSep 05 21:07:32 ubuntu2204 hpcr-registry-auth[1777]:  Writing auth config: /root/.docker/config.json\nSep 05 21:07:32 ubuntu2204 hpcr-registry-auth[1777]:  Registry Authentication started\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Finished HPCR Registry Authentication.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting Docker Socket for the API...\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Listening on Docker Socket for the API.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting Docker Application Container Engine...\nSep 05 21:07:32 ubuntu2204 rsyslogd[1777]:  imjournal: journal files changed, reloading...  [v8.2112.0 try https://www.rsyslog.com/e/0 ]\nSep 05 21:07:32 ubuntu2204 dockerd[1777]:  time=\"2023-09-05T21:07:31.120373172Z\" level=info msg=\"Starting up\"\nSep 05 21:07:32 ubuntu2204 dockerd[1777]:  time=\"2023-09-05T21:07:31.121621507Z\" level=info msg=\"detected 127.0.0.53 nameserver, assuming systemd-resolved, so using resolv.conf: /run/systemd/resolve/resolv.conf\"\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  var-lib-containers-storage-overlay.mount: Deactivated successfully.\nSep 05 21:07:32 ubuntu2204 hpcr-contract[1777]:  Contract file is valid.\nSep 05 21:07:32 ubuntu2204 hpcr-contract[1777]:  Extracting workload from /var/hyperprotect/user-data.decrypted to /var/hyperprotect/workload-data.decrypted\nSep 05 21:07:32 ubuntu2204 hpcr-contract[1777]:  Extraction completed\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Finished Service that does validation of contract.\nSep 05 21:07:32 ubuntu2204 audit[1777]:  AVC apparmor=\"STATUS\" operation=\"profile_load\" profile=\"unconfined\" name=\"docker-default\" pid=901 comm=\"apparmor_parser\"\nSep 05 21:07:32 ubuntu2204 dockerd[1777]:  time=\"2023-09-05T21:07:31.212965202Z\" level=info msg=\"parsed scheme: \\\"unix\\\"\" module=grpc\nSep 05 21:07:32 ubuntu2204 dockerd[1777]:  time=\"2023-09-05T21:07:31.213035643Z\" level=info msg=\"scheme \\\"unix\\\" not registered, fallback to default scheme\" module=grpc\nSep 05 21:07:32 ubuntu2204 dockerd[1777]:  time=\"2023-09-05T21:07:31.213072082Z\" level=info msg=\"ccResolverWrapper: sending update to cc: {[{unix:///run/containerd/containerd.sock  &lt;nil&gt; 0 &lt;nil&gt;}] &lt;nil&gt; &lt;nil&gt;}\" module=grpc\nSep 05 21:07:32 ubuntu2204 dockerd[1777]:  time=\"2023-09-05T21:07:31.213099168Z\" level=info msg=\"ClientConn switching balancer to \\\"pick_first\\\"\" module=grpc\nSep 05 21:07:32 ubuntu2204 dockerd[1777]:  time=\"2023-09-05T21:07:31.213993545Z\" level=info msg=\"parsed scheme: \\\"unix\\\"\" module=grpc\nSep 05 21:07:32 ubuntu2204 dockerd[1777]:  time=\"2023-09-05T21:07:31.214032153Z\" level=info msg=\"scheme \\\"unix\\\" not registered, fallback to default scheme\" module=grpc\nSep 05 21:07:32 ubuntu2204 dockerd[1777]:  time=\"2023-09-05T21:07:31.214063511Z\" level=info msg=\"ccResolverWrapper: sending update to cc: {[{unix:///run/containerd/containerd.sock  &lt;nil&gt; 0 &lt;nil&gt;}] &lt;nil&gt; &lt;nil&gt;}\" module=grpc\nSep 05 21:07:32 ubuntu2204 dockerd[1777]:  time=\"2023-09-05T21:07:31.214087732Z\" level=info msg=\"ClientConn switching balancer to \\\"pick_first\\\"\" module=grpc\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  audit: type=1400 audit(1693948051.199:9): apparmor=\"STATUS\" operation=\"profile_load\" profile=\"unconfined\" name=\"docker-default\" pid=901 comm=\"apparmor_parser\"\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting Service that does signature validation of Env Workload of contract...\nSep 05 21:07:32 ubuntu2204 hpcr-signature[1777]:  Welcome to SE ENV Workload Signature Validator\nSep 05 21:07:32 ubuntu2204 hpcr-signature[1777]:  Decrypted Contract file passed is:  /var/hyperprotect/workload-data.decrypted\nSep 05 21:07:32 ubuntu2204 hpcr-signature[1777]:  Encrypted Contract file passed is:  /var/hyperprotect/cidata/user-data\nSep 05 21:07:32 ubuntu2204 hpcr-signature[1777]:  Check Dependency params Public key and EnvWorkload signature\nSep 05 21:07:32 ubuntu2204 hpcr-signature[1777]:  Access Public key and EnvWorkload signature\nSep 05 21:07:32 ubuntu2204 hpcr-signature[1777]:  Create combined EnvWorkload contract content\nSep 05 21:07:32 ubuntu2204 hpcr-signature[1777]:  Verify signing key, signature and combined EnvWorkload contract\nSep 05 21:07:32 ubuntu2204 hpcr-signature[1777]:  Verified OK\nSep 05 21:07:32 ubuntu2204 hpcr-signature[1777]:  Successfully verified contract with signature and signing key\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Finished Service that does signature validation of Env Workload of contract.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Reached target Contract is unpacked and ready for consumption..\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting Service that waits until the user devices are ready...\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting Set podman image policy...\nSep 05 21:07:32 ubuntu2204 hpcr-disk-standby[1777]:  Waiting for devices ...\nSep 05 21:07:32 ubuntu2204 hpcr-disk-standby[1777]:  Version [1.0.112]\nSep 05 21:07:32 ubuntu2204 hpcr-disk-standby[1777]:  WaitForDevices input=[/var/hyperprotect/user-data.decrypted], timeout=[2023-09-05 21:22:31.298142241 +0000 UTC m=+900.029451094]\nSep 05 21:07:32 ubuntu2204 hpcr-disk-standby[1777]:  ParseContract ...\nSep 05 21:07:32 ubuntu2204 hpcr-disk-standby[1777]:  ValidateContract ...\nSep 05 21:07:32 ubuntu2204 hpcr-disk-standby[1777]:  MergeVolumes ...\nSep 05 21:07:32 ubuntu2204 hpcr-disk-standby[1777]:  Waiting for devices is completed\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Finished Service that waits until the user devices are ready.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting Service that mounts the data volumes after they are ready...\nSep 05 21:07:32 ubuntu2204 dockerd[1777]:  time=\"2023-09-05T21:07:31.308065659Z\" level=info msg=\"Loading containers: start.\"\nSep 05 21:07:32 ubuntu2204 hpcr-disk-mount[1777]:  Mounting volumes ...\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  bridge: filtering via arp/ip/ip6tables is no longer available by default. Update your scripts to load br_netfilter if you need this.\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Bridge firewalling registered\nSep 05 21:07:32 ubuntu2204 hpcr-disk-mount[1777]:  Version [1.0.112]\nSep 05 21:07:32 ubuntu2204 hpcr-disk-mount[1777]:  MountVolumes input=[/var/hyperprotect/user-data.decrypted]\nSep 05 21:07:32 ubuntu2204 hpcr-disk-mount[1777]:  ParseContract ...\nSep 05 21:07:32 ubuntu2204 hpcr-image-play[1777]:  Getting image source signatures\nSep 05 21:07:32 ubuntu2204 hpcr-image-play[1777]:  Copying blob sha256:66d62867ae2452322f4769f943913be00b22e73039d1902e8f785b9f49838193\nSep 05 21:07:32 ubuntu2204 hpcr-disk-mount[1777]:  ValidateContract ...\nSep 05 21:07:32 ubuntu2204 hpcr-disk-mount[1777]:  MergeVolumes ...\nSep 05 21:07:32 ubuntu2204 hpcr-disk-mount[1777]:  Mounting volumes ...\nSep 05 21:07:32 ubuntu2204 hpcr-disk-mount[1777]:  Volume config ..\nSep 05 21:07:32 ubuntu2204 hpcr-disk-mount[1777]:  HPL07003I: Mounting volumes done\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Finished Service that mounts the data volumes after they are ready.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Reached target Data volumes are mounted ready to be used..\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Started Service that verifies all disks are encrypted and logs output to systemd journal.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Started Service that periodically logs entry to trigger verify disk encryption service.\nSep 05 21:07:32 ubuntu2204 verify-disk-encryption[1777]:  Verify disk encryption started...\nSep 05 21:07:32 ubuntu2204 hpcr-image-play[1777]:  Copying config sha256:9eca761232387055827db0a9f2232f2635bc8c6d5f23ecfb39d34bb4ab0dca09\nSep 05 21:07:32 ubuntu2204 hpcr-image-play[1777]:  Writing manifest to image destination\nSep 05 21:07:32 ubuntu2204 hpcr-image-play[1777]:  Storing signatures\nSep 05 21:07:32 ubuntu2204 dockerd[1777]:  time=\"2023-09-05T21:07:31.476373977Z\" level=info msg=\"Default bridge (docker0) is assigned with an IP address 172.17.0.0/16. Daemon option --bip can be used to set a preferred IP address\"\nSep 05 21:07:32 ubuntu2204 kernel[1777]:  Initializing XFRM netlink socket\nSep 05 21:07:32 ubuntu2204 networkd-dispatcher[1777]:  WARNING:Unknown index 3 seen, reloading interface list\nSep 05 21:07:32 ubuntu2204 hpcr-image-play[1777]:  Loaded image(s): k8s.gcr.io/pause:3.5\nSep 05 21:07:32 ubuntu2204 podman[1777]:  2023-09-05 21:07:31.326771212 +0000 UTC m=+0.070314326 image loadfromarchive  /usr/local/se-image-play/pause.tar\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  var-lib-containers-storage-overlay.mount: Deactivated successfully.\nSep 05 21:07:32 ubuntu2204 sudo[1777]:      root : PWD=/ ; USER=nobody ; COMMAND=/usr/local/bin/se-image-play\nSep 05 21:07:32 ubuntu2204 systemd-networkd[1777]:  docker0: Link UP\nSep 05 21:07:32 ubuntu2204 sudo[1777]:  pam_unix(sudo:session): session opened for user nobody(uid=65534) by (uid=0)\nSep 05 21:07:32 ubuntu2204 hpcr-image-play[1777]:  Version [1.1.112]\nSep 05 21:07:32 ubuntu2204 sudo[1777]:  pam_unix(sudo:session): session closed for user nobody\nSep 05 21:07:32 ubuntu2204 hpcr-image-play[1777]:  tar: etc/containers/policy.json: time stamp 2023-09-05 21:07:32 is 0.466076487 s in the future\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Finished Set podman image policy.\nSep 05 21:07:32 ubuntu2204 dockerd[1777]:  time=\"2023-09-05T21:07:31.539054768Z\" level=info msg=\"Loading containers: done.\"\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting Service that creates a set of containers...\nSep 05 21:07:32 ubuntu2204 sudo[1777]:      root : PWD=/ ; USER=nobody ; COMMAND=/usr/local/bin/se-container-play\nSep 05 21:07:32 ubuntu2204 sudo[1777]:  pam_unix(sudo:session): session opened for user nobody(uid=65534) by (uid=0)\nSep 05 21:07:32 ubuntu2204 hpcr-container-play[1777]:  Version [1.1.116]\nSep 05 21:07:32 ubuntu2204 sudo[1777]:  pam_unix(sudo:session): session closed for user nobody\nSep 05 21:07:32 ubuntu2204 hpcr-container-play[1777]:  HPL15004I: The pod started successfully.\nSep 05 21:07:32 ubuntu2204 hpcr-container-play[1777]:  HPL15006I: No pod definitions found.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Finished Service that creates a set of containers.\nSep 05 21:07:32 ubuntu2204 dockerd[1777]:  time=\"2023-09-05T21:07:31.612717146Z\" level=info msg=\"Docker daemon\" commit=\"20.10.25-0ubuntu1~22.04.2\" graphdriver(s)=overlay2 version=20.10.25\nSep 05 21:07:32 ubuntu2204 dockerd[1777]:  time=\"2023-09-05T21:07:31.612770737Z\" level=info msg=\"Daemon has completed initialization\"\nSep 05 21:07:32 ubuntu2204 dockerd[1777]:  time=\"2023-09-05T21:07:31.643705432Z\" level=info msg=\"API listen on /run/docker.sock\"\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Started Docker Application Container Engine.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting Set docker image policy...\nSep 05 21:07:32 ubuntu2204 hpcr-image[1777]:  Starting image service...\nSep 05 21:07:32 ubuntu2204 hpcr-image[1777]:  Contract yaml file: /var/hyperprotect/workload-data.decrypted\nSep 05 21:07:32 ubuntu2204 hpcr-image[1777]:  Extracting image contract\nSep 05 21:07:32 ubuntu2204 hpcr-image[1777]:  Successfully extracted Image contract\nSep 05 21:07:32 ubuntu2204 hpcr-image[1777]:  Extracting container contract\nSep 05 21:07:32 ubuntu2204 hpcr-image[1777]:  Checking for image with digest\nSep 05 21:07:32 ubuntu2204 hpcr-image[1777]:  No image for DCT verification\nSep 05 21:07:32 ubuntu2204 hpcr-image[1777]:  Image service completed successfully\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Finished Set docker image policy.\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  Starting Service that creates a set of containers...\nSep 05 21:07:32 ubuntu2204 hpcr-container[1777]:  Starting container service...\nSep 05 21:07:32 ubuntu2204 hpcr-container[1777]:  Validating contract...\nSep 05 21:07:32 ubuntu2204 hpcr-container[1777]:  Compose folder /data1/compose created\nSep 05 21:07:32 ubuntu2204 hpcr-container[1777]:  Contract yaml file: /var/hyperprotect/workload-data.decrypted\nSep 05 21:07:32 ubuntu2204 hpcr-container[1777]:  Compose folder: /data1/compose\nSep 05 21:07:32 ubuntu2204 hpcr-container[1777]:  Validation completed\nSep 05 21:07:32 ubuntu2204 hpcr-container[1777]:  Parsing contract...\nSep 05 21:07:32 ubuntu2204 hpcr-container[1777]:  Parsing of the Contract File completed successfully\nSep 05 21:07:32 ubuntu2204 hpcr-container[1777]:  Extracting compose...\nSep 05 21:07:32 ubuntu2204 hpcr-container[1777]:  Extracting done...\nSep 05 21:07:32 ubuntu2204 hpcr-container[1777]:  Extracting the ENV Contents...\nSep 05 21:07:32 ubuntu2204 hpcr-container[1777]:  Writing new env file /data1/compose/.env ...\nSep 05 21:07:32 ubuntu2204 hpcr-container[1777]:  Reading existing env file /data1/compose/.env ...\nSep 05 21:07:32 ubuntu2204 hpcr-container[1777]:  Extracting of environment contents done\nSep 05 21:07:32 ubuntu2204 hpcr-container[1777]:  Check if docker is ready\nSep 05 21:07:32 ubuntu2204 hpcr-container[1777]:  docker-compose.yml file is present in the directory\nSep 05 21:07:32 ubuntu2204 hpcr-container[1777]:  Starting workload containers...\nSep 05 21:07:32 ubuntu2204 dockerd[1777]:  time=\"2023-09-05T21:07:31.912808357Z\" level=warning msg=\"reference for unknown type: \" digest=\"sha256:a864174faadc39650e61ca45d8a3ceb01ea88602cfe6f4bd4e35c48e60556900\" remote=\"quay.io/gmoney23/grep11server@sha256:a864174faadc39650e61ca45d8a3ceb01ea88602cfe6f4bd4e35c48e60556900\"\nSep 05 21:07:32 ubuntu2204 systemd-networkd[1777]:  enc1: Gained IPv6LL\nSep 05 21:07:32 ubuntu2204 systemd[1777]:  var-lib-docker-overlay2-opaque\\x2dbug\\x2dcheck1111129260-merged.mount: Deactivated successfully.\nSep 05 21:07:34 ubuntu2204 networkd-dispatcher[1777]:  WARNING:Unknown index 4 seen, reloading interface list\nSep 05 21:07:34 ubuntu2204 systemd-networkd[1777]:  br-35f22f910f6f: Link UP\nSep 05 21:07:34 ubuntu2204 systemd[1777]:  var-lib-docker-overlay2-b0df35c73664d2a1dae1b726e9b3a17b4dceb966e3dc15a7c9362031c9d9b10e\\x2dinit-merged.mount: Deactivated successfully.\nSep 05 21:07:34 ubuntu2204 systemd[1777]:  dmesg.service: Deactivated successfully.\nSep 05 21:07:35 ubuntu2204 systemd-udevd[1777]:  Using default interface naming scheme 'v249'.\nSep 05 21:07:35 ubuntu2204 networkd-dispatcher[1777]:  WARNING:Unknown index 5 seen, reloading interface list\nSep 05 21:07:35 ubuntu2204 systemd-networkd[1777]:  veth09c9325: Link UP\nSep 05 21:07:35 ubuntu2204 dockerd[1777]:  time=\"2023-09-05T21:07:34.926762864Z\" level=info msg=\"No non-localhost DNS nameservers are left in resolv.conf. Using default external servers: [nameserver 8.8.8.8 nameserver 8.8.4.4]\"\nSep 05 21:07:35 ubuntu2204 dockerd[1777]:  time=\"2023-09-05T21:07:34.926902031Z\" level=info msg=\"IPv6 enabled; Adding default IPv6 external servers: [nameserver 2001:4860:4860::8888 nameserver 2001:4860:4860::8844]\"\nSep 05 21:07:35 ubuntu2204 kernel[1777]:  br-35f22f910f6f: port 1(veth09c9325) entered blocking state\nSep 05 21:07:35 ubuntu2204 kernel[1777]:  br-35f22f910f6f: port 1(veth09c9325) entered disabled state\nSep 05 21:07:35 ubuntu2204 kernel[1777]:  device veth09c9325 entered promiscuous mode\nSep 05 21:07:35 ubuntu2204 kernel[1777]:  br-35f22f910f6f: port 1(veth09c9325) entered blocking state\nSep 05 21:07:35 ubuntu2204 kernel[1777]:  br-35f22f910f6f: port 1(veth09c9325) entered forwarding state\nSep 05 21:07:35 ubuntu2204 kernel[1777]:  br-35f22f910f6f: port 1(veth09c9325) entered disabled state\nSep 05 21:07:35 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:34.985760220Z\" level=info msg=\"loading plugin \\\"io.containerd.internal.v1.shutdown\\\"...\" runtime=io.containerd.runc.v2 type=io.containerd.internal.v1\nSep 05 21:07:35 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:34.985814175Z\" level=info msg=\"loading plugin \\\"io.containerd.ttrpc.v1.pause\\\"...\" runtime=io.containerd.runc.v2 type=io.containerd.ttrpc.v1\nSep 05 21:07:35 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:34.986027394Z\" level=info msg=\"loading plugin \\\"io.containerd.event.v1.publisher\\\"...\" runtime=io.containerd.runc.v2 type=io.containerd.event.v1\nSep 05 21:07:35 ubuntu2204 containerd[1777]:  time=\"2023-09-05T21:07:34.986046098Z\" level=info msg=\"loading plugin \\\"io.containerd.ttrpc.v1.task\\\"...\" runtime=io.containerd.runc.v2 type=io.containerd.ttrpc.v1\nSep 05 21:07:35 ubuntu2204 systemd[1777]:  Started libcontainer container 5afe4af5b8a97851c54345117fabe0a3999e1761d03e1d7cd3f5c581f2a4d6b2.\nSep 05 21:07:35 ubuntu2204 systemd[1777]:  podman.service: Deactivated successfully.\nSep 05 21:07:35 ubuntu2204 kernel[1777]:  eth0: renamed from vethe318d71\nSep 05 21:07:35 ubuntu2204 systemd-networkd[1777]:  veth09c9325: Gained carrier\nSep 05 21:07:35 ubuntu2204 systemd-networkd[1777]:  br-35f22f910f6f: Gained carrier\nSep 05 21:07:35 ubuntu2204 kernel[1777]:  IPv6: ADDRCONF(NETDEV_CHANGE): veth09c9325: link becomes ready\nSep 05 21:07:35 ubuntu2204 kernel[1777]:  br-35f22f910f6f: port 1(veth09c9325) entered blocking state\nSep 05 21:07:35 ubuntu2204 kernel[1777]:  br-35f22f910f6f: port 1(veth09c9325) entered forwarding state\nSep 05 21:07:35 ubuntu2204 kernel[1777]:  IPv6: ADDRCONF(NETDEV_CHANGE): br-35f22f910f6f: link becomes ready\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  Docker Compose Logs:\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:   student02-ep11server Pulling\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  620e494ced91 Pulling fs layer\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  6c8a4d0d91d5 Pulling fs layer\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  870d2d701868 Pulling fs layer\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  17cad8585d31 Pulling fs layer\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  957151557b52 Pulling fs layer\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  356d6d7e116b Pulling fs layer\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  e90fb9a2f971 Pulling fs layer\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  6792527a66d0 Pulling fs layer\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  c5f3a9d4fd2b Pulling fs layer\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  f23b28cea2a0 Pulling fs layer\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  17cad8585d31 Waiting\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  957151557b52 Waiting\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  356d6d7e116b Waiting\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  e90fb9a2f971 Waiting\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  6792527a66d0 Waiting\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  c5f3a9d4fd2b Waiting\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  f23b28cea2a0 Waiting\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  620e494ced91 Downloading [==================================&gt;                ]     613B/890B\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  620e494ced91 Downloading [==================================================&gt;]     890B/890B\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  620e494ced91 Verifying Checksum\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  620e494ced91 Download complete\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  620e494ced91 Extracting [==================================================&gt;]     890B/890B\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  620e494ced91 Extracting [==================================================&gt;]     890B/890B\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  620e494ced91 Pull complete\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  6c8a4d0d91d5 Downloading [&gt;                                                  ]  1.369kB/113.9kB\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  6c8a4d0d91d5 Downloading [==================================================&gt;]  113.9kB/113.9kB\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  6c8a4d0d91d5 Verifying Checksum\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  6c8a4d0d91d5 Download complete\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  6c8a4d0d91d5 Extracting [==============&gt;                                    ]  32.77kB/113.9kB\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  6c8a4d0d91d5 Extracting [==================================================&gt;]  113.9kB/113.9kB\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  6c8a4d0d91d5 Extracting [==================================================&gt;]  113.9kB/113.9kB\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  6c8a4d0d91d5 Pull complete\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  870d2d701868 Downloading [&gt;                                                  ]  188.3kB/18.69MB\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  870d2d701868 Downloading [====&gt;                                              ]  1.554MB/18.69MB\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  870d2d701868 Downloading [=======&gt;                                           ]   2.73MB/18.69MB\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  957151557b52 Downloading [==================================================&gt;]     167B/167B\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  957151557b52 Verifying Checksum\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  957151557b52 Download complete\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  17cad8585d31 Downloading [&gt;                                                  ]  73.12kB/6.994MB\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  870d2d701868 Downloading [=============================&gt;                     ]  10.92MB/18.69MB\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  17cad8585d31 Downloading [==========&gt;                                        ]  1.521MB/6.994MB\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  870d2d701868 Downloading [============================================&gt;      ]  16.79MB/18.69MB\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  17cad8585d31 Downloading [=================&gt;                                 ]   2.48MB/6.994MB\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  870d2d701868 Verifying Checksum\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  356d6d7e116b Downloading [==================================================&gt;]     174B/174B\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  356d6d7e116b Verifying Checksum\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  356d6d7e116b Download complete\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  870d2d701868 Extracting [&gt;                                                  ]  196.6kB/18.69MB\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  870d2d701868 Extracting [========&gt;                                          ]  3.146MB/18.69MB\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  17cad8585d31 Downloading [================================&gt;                  ]  4.602MB/6.994MB\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  17cad8585d31 Verifying Checksum\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  17cad8585d31 Download complete\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  870d2d701868 Extracting [===============&gt;                                   ]  5.702MB/18.69MB\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  e90fb9a2f971 Downloading [==================================================&gt;]     156B/156B\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  e90fb9a2f971 Verifying Checksum\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  e90fb9a2f971 Download complete\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  870d2d701868 Extracting [======================&gt;                            ]  8.258MB/18.69MB\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  6792527a66d0 Downloading [==================================================&gt;]     139B/139B\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  6792527a66d0 Verifying Checksum\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  6792527a66d0 Download complete\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  870d2d701868 Extracting [==================================================&gt;]  18.69MB/18.69MB\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  870d2d701868 Pull complete\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  17cad8585d31 Extracting [&gt;                                                  ]   98.3kB/6.994MB\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  f23b28cea2a0 Downloading [==================================================&gt;]     142B/142B\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  f23b28cea2a0 Verifying Checksum\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  f23b28cea2a0 Download complete\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  17cad8585d31 Extracting [================&gt;                                  ]  2.359MB/6.994MB\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  c5f3a9d4fd2b Downloading [==================================================&gt;]     145B/145B\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  c5f3a9d4fd2b Verifying Checksum\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  c5f3a9d4fd2b Download complete\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  17cad8585d31 Extracting [=========================================&gt;         ]    5.8MB/6.994MB\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  17cad8585d31 Extracting [==================================================&gt;]  6.994MB/6.994MB\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  17cad8585d31 Pull complete\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  957151557b52 Extracting [==================================================&gt;]     167B/167B\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  957151557b52 Extracting [==================================================&gt;]     167B/167B\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  957151557b52 Pull complete\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  356d6d7e116b Extracting [==================================================&gt;]     174B/174B\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  356d6d7e116b Extracting [==================================================&gt;]     174B/174B\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  356d6d7e116b Pull complete\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  e90fb9a2f971 Extracting [==================================================&gt;]     156B/156B\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  e90fb9a2f971 Extracting [==================================================&gt;]     156B/156B\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  e90fb9a2f971 Pull complete\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  6792527a66d0 Extracting [==================================================&gt;]     139B/139B\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  6792527a66d0 Extracting [==================================================&gt;]     139B/139B\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  6792527a66d0 Pull complete\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  c5f3a9d4fd2b Extracting [==================================================&gt;]     145B/145B\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  c5f3a9d4fd2b Extracting [==================================================&gt;]     145B/145B\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  c5f3a9d4fd2b Pull complete\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  f23b28cea2a0 Extracting [==================================================&gt;]     142B/142B\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  f23b28cea2a0 Extracting [==================================================&gt;]     142B/142B\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  f23b28cea2a0 Pull complete\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  student02-ep11server Pulled\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  Network compose_default  Creating\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  Network compose_default  Created\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  Container compose-student02-ep11server-1  Creating\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  Container compose-student02-ep11server-1  Created\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  Container compose-student02-ep11server-1  Starting\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  Container compose-student02-ep11server-1  Started\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  #033[37mDEBU#033[0m[2023-09-05 21:07:35.293] Setting log level [debug] for module main    \nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  #033[37mDEBU#033[0m[2023-09-05 21:07:35.293] Setting log level [debug] for module ep11server \nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  #033[37mDEBU#033[0m[2023-09-05 21:07:35.293] Setting log level [debug] for module util    \nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  #033[37mDEBU#033[0m[2023-09-05 21:07:35.293] Setting log level [debug] for module entry   \nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  #033[37mDEBU#033[0m[2023-09-05 21:07:35.293] Setting log level [debug] for module config  \nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  #033[37mDEBU#033[0m[2023-09-05 21:07:35.293] Setting log level [debug] for module keyprotect \nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  #033[37mDEBU#033[0m[2023-09-05 21:07:35.293] Service postgrestemplate not found            #033[37mmodule#033[0m=entry\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  #033[37mDEBU#033[0m[2023-09-05 21:07:35.294] Service ep11manager not found                 #033[37mmodule#033[0m=entry\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  #033[37mDEBU#033[0m[2023-09-05 21:07:35.294] Service remoteconfig not found                #033[37mmodule#033[0m=entry\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  #033[37mDEBU#033[0m[2023-09-05 21:07:35.294] Service domaintemplate not found              #033[37mmodule#033[0m=entry\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  #033[37mDEBU#033[0m[2023-09-05 21:07:35.294] Service connectiontemplate not found          #033[37mmodule#033[0m=entry\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  #033[37mDEBU#033[0m[2023-09-05 21:07:35.294] Service tls not found                         #033[37mmodule#033[0m=entry\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  #033[37mDEBU#033[0m[2023-09-05 21:07:35.294] Service clientconnectiontemplate not found    #033[37mmodule#033[0m=entry\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  #033[37mDEBU#033[0m[2023-09-05 21:07:35.294] Service basevoteridtemplate not found         #033[37mmodule#033[0m=entry\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  #033[37mDEBU#033[0m[2023-09-05 21:07:35.294] Service logging not found                     #033[37mmodule#033[0m=entry\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  #033[37mDEBU#033[0m[2023-09-05 21:07:35.294] Service recoverykeyseedtemplate not found     #033[37mmodule#033[0m=entry\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  #033[37mDEBU#033[0m[2023-09-05 21:07:35.294] Service directiamauthtemplate not found       #033[37mmodule#033[0m=entry\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  #033[36mINFO#033[0m[2023-09-05 21:07:35.303] Starting GREP11 server []                     #033[36mmodule#033[0m=entry\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  #033[36mINFO#033[0m[2023-09-05 21:07:35.303] TLS is enabled                                #033[36mmodule#033[0m=config\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  #033[37mDEBU#033[0m[2023-09-05 21:07:35.303] Creating new listener for *config.EP11CryptoOpts  #033[37mmodule#033[0m=entry\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  [c16client][debug] hostname:port=192.168.22.80:9001\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  [c16client][debug] c16client::c16OpenAdapter: Entering ...\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  [c16client][debug] c16client::c16OpenAdapter: server_idx=0\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  [c16client][debug] c16client::makeNewC16ClientStub: target_str=192.168.22.80:9001\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  [c16client][debug] c16client::c16OpenAdapter: Done.\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  [c16client][debug] c16client::c16Request: Entering ...\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  [c16client][debug] c16client::c16DoEP11Request: Checking target i=0, ap_id=8, dom_id=22\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  [c16client][debug] c16client:c16DoEP11Request: Target still on same server\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  [c16client][debug] c16client:c16DoEP11Request: Target list check passed. (server_idx=0)\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  [c16client][debug] C16ClientStub::DoRequest: targets_num: 1\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  [c16client][debug] C16ClientStub::DoRequest: req_len: 37\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  Docker compose result:\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:   CONTAINER ID   IMAGE                           COMMAND                 CREATED        STATUS                  PORTS                                                  NAMES\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  5afe4af5b8a9   quay.io/gmoney23/grep11server   \"/usr/bin/ep11server\"   1 second ago   Up Less than a second   0.0.0.0:9876-&gt;9876/tcp, :::9876-&gt;9876/tcp, 50052/tcp   compose-student02-ep11server-1\nSep 05 21:07:35 ubuntu2204 hpcr-container[1777]:  Container service completed successfully\nSep 05 21:07:35 ubuntu2204 systemd[1777]:  Finished Service that creates a set of containers.\nSep 05 21:07:35 ubuntu2204 systemd[1777]:  Reached target Workload is up and running..\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  [c16client][debug] C16ClientStub::DoRequest: Setting resp_len: 54\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  [c16client][debug] c16client::c16Request: Done.\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  [c16client][debug] c16client::c16OpenAdapter: Entering ...\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  [c16client][debug] c16client::c16OpenAdapter: server_idx=0\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  [c16client][debug] c16client::makeNewC16ClientStub: target_str=192.168.22.80:9001\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  [c16client][debug] c16client::c16OpenAdapter: Done.\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  [c16client][debug] c16client::c16Request: Entering ...\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  [c16client][debug] c16client::c16DoEP11Request: Checking target i=0, ap_id=10, dom_id=22\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  [c16client][debug] c16client:c16DoEP11Request: Target still on same server\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  [c16client][debug] c16client:c16DoEP11Request: Target list check passed. (server_idx=0)\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  [c16client][debug] C16ClientStub::DoRequest: targets_num: 1\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  [c16client][debug] C16ClientStub::DoRequest: req_len: 37\nSep 05 21:07:35 ubuntu2204 systemd[1777]:  Starting Phase2 Catch Service...\nSep 05 21:07:35 ubuntu2204 hpcr-catch-success[1777]:  VSI has started successfully.\nSep 05 21:07:35 ubuntu2204 hpcr-catch-success[1777]:  HPL10001I: Services succeeded -&gt; systemd triggered hpl-catch-success service\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  [c16client][debug] C16ClientStub::DoRequest: Setting resp_len: 54\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  [c16client][debug] c16client::c16Request: Done.\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  [c16client][debug] c16client::c16Request: Entering ...\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  [c16client][debug] c16client::c16DoEP11Request: Checking target i=0, ap_id=8, dom_id=22\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  [c16client][debug] c16client:c16DoEP11Request: Target still on same server\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  [c16client][debug] c16client::c16DoEP11Request: Checking target i=1, ap_id=10, dom_id=22\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  [c16client][debug] c16client:c16DoEP11Request: Target still on same server\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  [c16client][debug] c16client:c16DoEP11Request: Target list check passed. (server_idx=0)\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  [c16client][debug] C16ClientStub::DoRequest: targets_num: 2\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  [c16client][debug] C16ClientStub::DoRequest: req_len: 46\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  [c16client][debug] C16ClientStub::DoRequest: Setting resp_len: 438\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  [c16client][debug] c16client::c16Request: Done.\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  [c16client][debug] c16client::c16Request: Entering ...\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  [c16client][debug] c16client::c16DoEP11Request: Checking target i=0, ap_id=8, dom_id=22\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  [c16client][debug] c16client:c16DoEP11Request: Target still on same server\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  [c16client][debug] c16client::c16DoEP11Request: Checking target i=1, ap_id=10, dom_id=22\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  [c16client][debug] c16client:c16DoEP11Request: Target still on same server\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  [c16client][debug] c16client:c16DoEP11Request: Target list check passed. (server_idx=0)\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  [c16client][debug] C16ClientStub::DoRequest: targets_num: 2\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  [c16client][debug] C16ClientStub::DoRequest: req_len: 58\nSep 05 21:07:35 ubuntu2204 systemd[1777]:  Finished Phase2 Catch Service.\nSep 05 21:07:35 ubuntu2204 systemd[1777]:  Reached target Multi-User System.\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  [c16client][debug] C16ClientStub::DoRequest: Setting resp_len: 254\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  [c16client][debug] c16client::c16Request: Done.\nSep 05 21:07:35 ubuntu2204 systemd[1777]:  Starting Record Runlevel Change in UTMP...\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  #033[36mINFO#033[0m[2023-09-05 21:07:35.340] admin.ep11.go:ep11server.(*CryptoServer).adminCommand:53: m_admin returned an error  #033[36merror code#033[0m=CKR_IBM_TARGET_INVALID #033[36mmodule#033[0m=util\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:   message repeated 6 times: [#033[36mINFO#033[0m[2023-09-05 21:07:35.340] admin.ep11.go:ep11server.(*CryptoServer).adminCommand:53: m_admin returned an error  #033[36merror code#033[0m=CKR_IBM_TARGET_INVALID #033[36mmodule#033[0m=util]\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  #033[36mINFO#033[0m[2023-09-05 21:07:35.341] admin.ep11.go:ep11server.(*CryptoServer).adminCommand:53: m_admin returned an error  #033[36merror code#033[0m=CKR_IBM_TARGET_INVALID #033[36mmodule#033[0m=util\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:   message repeated 5 times: [#033[36mINFO#033[0m[2023-09-05 21:07:35.341] admin.ep11.go:ep11server.(*CryptoServer).adminCommand:53: m_admin returned an error  #033[36merror code#033[0m=CKR_IBM_TARGET_INVALID #033[36mmodule#033[0m=util]\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  #033[37mDEBU#033[0m[2023-09-05 21:07:35.341] Creating service backing server for *config.EP11CryptoOpts  #033[37mmodule#033[0m=entry\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  #033[36mINFO#033[0m[2023-09-05 21:07:35.341] Loading ep11crypto service                    #033[36mmodule#033[0m=entry\nSep 05 21:07:35 ubuntu2204 compose-student02-ep11server-1[1777]:  #033[36mINFO#033[0m[2023-09-05 21:07:35.341] GRPC Server listening on [::]:9876 with TLS enabled  #033[36mmodule#033[0m=entry\nSep 05 21:07:35 ubuntu2204 systemd[1777]:  systemd-update-utmp-runlevel.service: Deactivated successfully.\nSep 05 21:07:35 ubuntu2204 systemd[1777]:  Finished Record Runlevel Change in UTMP.\nSep 05 21:07:35 ubuntu2204 systemd[1777]:  Startup finished in 28.361s (kernel) + 6.315s (userspace) = 34.677s.\nSep 05 21:07:36 ubuntu2204 verify-disk-encryption[1777]:  HPL13000I: Verify LUKS Encryption\nSep 05 21:07:36 ubuntu2204 systemd[1777]:  verify-disk-encryption-invoker.service: Deactivated successfully.\nSep 05 21:07:37 ubuntu2204 verify-disk-encryption[1777]:  Return value for disk-encrypt: 0\nSep 05 21:07:37 ubuntu2204 verify-disk-encryption[1777]:  Executed cmd: ('lsblk', '-b', '-n', '-o', 'NAME,SIZE')\nSep 05 21:07:37 ubuntu2204 verify-disk-encryption[1777]:  Return value: 0\nSep 05 21:07:37 ubuntu2204 verify-disk-encryption[1777]:  Stdout: vda                                           107374182400\nSep 05 21:07:37 ubuntu2204 verify-disk-encryption[1777]:  \u251c\u2500vda1                                          4292870144\nSep 05 21:07:37 ubuntu2204 verify-disk-encryption[1777]:  \u2514\u2500vda2                                        103079215104\nSep 05 21:07:37 ubuntu2204 verify-disk-encryption[1777]:    \u2514\u2500luks-c88abd09-279d-4108-b5df-6faba4dd318e 103062437888\nSep 05 21:07:37 ubuntu2204 verify-disk-encryption[1777]:  vdb                                                 417792\nSep 05 21:07:37 ubuntu2204 verify-disk-encryption[1777]:  List of volumes greater than or equal to 10GB are: ['/dev/vda']\nSep 05 21:07:37 ubuntu2204 verify-disk-encryption[1777]:  Updated Volumes list: ['/dev/vda2']\nSep 05 21:07:37 ubuntu2204 verify-disk-encryption[1777]:  Executed cmd: ('lsblk', '/dev/vda2', '-b', '-n', '-o', 'NAME,MOUNTPOINT')\nSep 05 21:07:37 ubuntu2204 verify-disk-encryption[1777]:  Return value: 0\nSep 05 21:07:37 ubuntu2204 verify-disk-encryption[1777]:  Stdout: vda2\nSep 05 21:07:37 ubuntu2204 verify-disk-encryption[1777]:  \u2514\u2500luks-c88abd09-279d-4108-b5df-6faba4dd318e /\nSep 05 21:07:37 ubuntu2204 verify-disk-encryption[1777]:  Boot volume is /dev/vda2\nSep 05 21:07:37 ubuntu2204 verify-disk-encryption[1777]:  Volume /dev/vda2 has mount point /\nSep 05 21:07:37 ubuntu2204 verify-disk-encryption[1777]:  List of mounted volumes are: ['/dev/vda2']\nSep 05 21:07:37 ubuntu2204 verify-disk-encryption[1777]:  Verifying the boot disk /dev/vda2 is encrypted or not\nSep 05 21:07:37 ubuntu2204 verify-disk-encryption[1777]:  Executed cmd: ('lsblk', '/dev/vda2', '-b', '-n', '-o', 'NAME,TYPE')\nSep 05 21:07:37 ubuntu2204 verify-disk-encryption[1777]:  Return value: 0\nSep 05 21:07:37 ubuntu2204 verify-disk-encryption[1777]:  Stdout: vda2                                        part\nSep 05 21:07:37 ubuntu2204 verify-disk-encryption[1777]:  \u2514\u2500luks-c88abd09-279d-4108-b5df-6faba4dd318e crypt\nSep 05 21:07:37 ubuntu2204 verify-disk-encryption[1777]:  Executed cmd: ('cryptsetup', 'isLuks', '/dev/vda2')\nSep 05 21:07:37 ubuntu2204 verify-disk-encryption[1777]:  Return value: 0\nSep 05 21:07:37 ubuntu2204 verify-disk-encryption[1777]:  Executed cmd: ('cryptsetup', 'luksDump', '/dev/vda2')\nSep 05 21:07:37 ubuntu2204 verify-disk-encryption[1777]:  Return value: 0\nSep 05 21:07:37 ubuntu2204 verify-disk-encryption[1777]:  HPL13003I: Checked for mount point /, LUKS encryption with 1 key slot found\nSep 05 21:07:37 ubuntu2204 verify-disk-encryption[1777]:  HPL13001I: Boot volume and all the mounted data volumes are encrypted\nSep 05 21:07:37 ubuntu2204 systemd-networkd[1777]:  veth09c9325: Gained IPv6LL\nSep 05 21:07:37 ubuntu2204 systemd-networkd[1777]:  br-35f22f910f6f: Gained IPv6LL\n</code></pre> <p>Congratulations! You have reached a significant milestone in the lab.  You have successfully configured and launched your HPVS 2.1.6 GREP11 Server. Now all that is left is to test its functionality with some sample GREP11 client code.  You will set that up on your Ubuntu KVM guest.  Click Next at the bottom right of the page to continue.</p>"},{"location":"lab/grep11/launchKVMguest/","title":"Start Ubuntu KVM Guest","text":""},{"location":"lab/grep11/launchKVMguest/#overview-of-this-page","title":"Overview of this page","text":"<p>This page will help you verify that your jumpbox is configured properly and then guide you to logging in to the RHEL Host from which you will start your student-assigned KVM standard Ubuntu guest.</p>"},{"location":"lab/grep11/launchKVMguest/#verify-the-student-specific-environment-variables-on-your-jumpbox","title":"Verify the student-specific environment variables on your jumpbox","text":"<p>You will first ensure that two crucial environment variables are set on your jumpbox.  Under most circumstances, the instructors will have already set these variables for you.  These variables will enable you to enter all of the commands in this lab without modification- where student-specific information is required in a command, the command will contain environment variables that will be resolved with the student-specific information. </p> <p>Environment variables are set in three places:</p> <ol> <li> <p>On your jumpbox.  In most cases, the instructors will have configured your jumpbox with your student-specific environment variables</p> </li> <li> <p>You will have a userid on the RHEL host, and this userid has been configured with student-specific environment variables </p> </li> <li> <p>You will have your own KVM standard guest running Ubuntu, and your guest is also configured with student-specific environment variables</p> </li> </ol>"},{"location":"lab/grep11/launchKVMguest/#set-or-verify-the-environment-variable-on-your-jumpbox-for-your-student-id","title":"Set or verify the environment variable on your jumpbox for your student ID","text":"<p>The instructors should have guided you through the process of obtaining a RHEL Jumpbox where you will perform the lab.</p> <p>Note</p> <p>The jumpbox is running the RHEL operating system, but the OS on the jumpbox is largely irrelevant, and in order to avoid confusion with the RHEL host (the Linux LPAR on the IBM z15 server in the Washington Systems Center data center in Herndon, Virgina, USA) that you will use during the lab, we will drop the 'RHEL' and refer to the RHEL jumpbox as just jumpbox from now on.</p> <p>On your jumpbox, open a terminal window.  You can do this by clicking on Activities in the upper left corner of your jumpbox and then clicking the icon that looks like a terminal window.  This will bring up a window using the RHEL Host terminal profile, so your terminal window should have a dark background with a green prompt for the font, similar to the image shown in the previous section of the lab.  You will use this window to perform work on the RHEL host, but before logging in you will ensure that an environment variable specifying your unique student ID has been set properly.</p> <p>Each student has a unique userid assigned to them. It is likely set for you already. In an instructor-led class, your instructors will let you know if this has been set for you already.</p> <p>Check this by entering this echo command:</p> <pre><code>echo ${StudentID}\n</code></pre> Example output for student02 [click to expand me] <pre><code>silliman@nat-147 ~ % echo ${StudentID}\nstudent02\n</code></pre> <p>If a value starting with student and ending with a two-digit number is returned to you, then your jumpbox has been configured properly and you may scroll down a bit to the section Log in to the RHEL 8.5 host. </p> <p>If no output is returned, set this variable to the userid assigned to you by the instructor.  E.g., if the instructor assigned you the userid <code>student00</code>, enter this command:     <pre><code>export StudentID=student00\n</code></pre> If you had to use the previous <code>export</code> command, repeat the prior <code>echo</code> command to ensure this was set correctly. Now, you should see your userid displayed:     <pre><code>echo ${StudentID}\n</code></pre></p> Example output [click to expand me] <pre><code>silliman@nat-147 ~ % echo ${StudentID}         \nstudent02\n</code></pre> <p>Why did you make me do this?</p> <p>This way we could provide instructions throughout this lab that are generic enough that every student can just copy and paste most commands \"as-is\" from the lab guide. (At least that was our goal).</p>"},{"location":"lab/grep11/launchKVMguest/#optional-but-highly-recommended-add-your-studentid-environment-variable-to-your-shell-startup-script","title":"Optional but highly recommended- add your StudentID environment variable to your shell startup script","text":"<p>Note: If your StudentID variable was already present then your shell startup script was already updated appropriately and you can scroll down to the section with the title Log in to the RHEL 8.5 host</p> <p>If we had our way in supplying a system from which you are running the lab, you are probably using bash.</p> <p>If you are using your own workstation or laptop, if it is running Linux you are probably either using bash or you are savvy enough to figure out which shell you are running. </p> <p>If you are running it on Apple hardware then you are probably running zsh or bash or are savvy enough to figure out which shell you are running.</p> <p>If you are running on a Windows machine then we hope that you are using a modern enough version of Windows so that you can use the Windows Subsystem for Linux and pretend that you are using a Linux machine.</p> <p>If you are running on an older Windows machine then you should ask your manager for a new laptop. If that doesn't work out for you then ask the instructors for help (but not for a new laptop).</p> <p>If you are not sure what shell you're using, you can use this command to find out what your shell is:</p> <pre><code>echo ${SHELL}\n</code></pre> Example output when using zsh [click to expand me] <pre><code>silliman@nat-147 ~ % echo ${SHELL}\n/bin/zsh\n</code></pre> <p>Garrett uses <code>bash</code> 5.x on his Mac.  Barry uses <code>zsh</code> - <code>zsh</code> being the default shell on newer versions of MacOS. Thus, we will show two commands to add the environment variable to your shell startup script, one for <code>bash</code> and one for <code>zsh</code>.  If you are using a different shell, we trust you'll be able to figure out the equivalent command.  </p> <p>The Copy Button is Your Friend!</p> <p>Please enter the appropriate command exactly as shown using the copy button whenever possible.  Approximately 0.47% of students think they have to make the variable substitution before entering the command.  That doesn't end well.  This advice applies generally to every command in this lab unless we explicitly state otherwise.</p> <p>For users of <code>bash</code>:    <pre><code>echo \"export StudentID='${StudentID}'\" &gt;&gt; \"${HOME}/.bashrc\" </code></pre></p> <p>For users of <code>zsh</code>:    <pre><code>echo \"export StudentID='${StudentID}'\" &gt;&gt; \"${HOME}/.zshrc\"\n</code></pre></p> <p>Why did I just do that?</p> <p>If you use more than one terminal window to do this lab, then this would allow new terminal windows to be set with this StudentID variable so that you do not have to re-enter it.  This will be handy if you either want to use multiple terminal windows for the lab or if you need to open a new window due to an old one closing for whatever reason.  We are here to make your flight as comfortable as possible.</p>"},{"location":"lab/grep11/launchKVMguest/#log-in-to-the-rhel-85-host","title":"Log in to the RHEL 8.5 host","text":"<p>You will now sign into our z15 LPAR running Red Hat Enterprise Linux 8.5.  This is a system that has been enabled for Secure Execution and so can run workloads provisioned with IBM Hyper Protect Virtual Servers 2.1.6.  </p> <p>Use your terminal tab or window set aside for doing work on the RHEL host- the one that (by default) looks like this:</p> <p></p> <p>Run this command:</p> <pre><code>ssh -l ${StudentID} 192.168.22.64\n</code></pre> <p>One of two things should happen:  </p> <p>a. If you are on an instructor-provided system and the instructors have had the time to load it with an appropriate RSA private key that matches an RSA public key that has been loaded into your assigned userid's account on the RHEL host:</p> <ul> <li>you will be able to sign in without a password!</li> </ul> <p>OR</p> <p>b. If you are not on an instructor-provided system or we did not have a chance to load the parts of the RSA key pair in the appropriate locations</p> <ul> <li>you will be prompted to enter a password.  Your instructor will provide you a password by some clandestine means, surely we're not going to put it on a page on the Internet !</li> </ul> Example messages upon login [Click me] <pre><code>*\n*  IBM Washington Systems Center (WSC)   .....\n*    IBM Z and LinuxONE                 C C  /\n*                                      /&lt;   /\n*                       ___ __________/_#__=o\n*                      /(- /(\\_\\________   \\\n*                      \\ ) \\ )_      \\o     \\\n*                      /|\\ /|\\       |'     |\n*                                    |     _|\n*  Red Hat Enterprise Linux 8.5      /o   __\\\n*                                   / '     |\n*                                  / /      |\n*                                 /_/\\______|\n*                                (   _(    &lt;\n*  KVM Hypervisor for Blockchain  \\    \\    \\\n*       and Hyper Protect          \\    \\    \\\n*       and Digital Assets          \\____\\____\\\n*    on IBM Z and LinuxONE        ____\\_\\__\\_\\\n*                                /`   /`     o\\\n*           \"It's alive!\"        |___ |_______|..o-o-o-(#)\n*\nActivate the web console with: systemctl enable --now cockpit.socket\n\nRegister this system with Red Hat Insights: insights-client --register\nCreate an account or view all your systems at https://red.ht/insights-dashboard\nLast login: Mon Feb 13 16:50:14 2023 from 192.168.215.147\n[student02@bczkvm(192.168.22.64) ~ [19:11:51] (0)]$ \n</code></pre>"},{"location":"lab/grep11/launchKVMguest/#start-your-ubuntu-kvm-guest","title":"Start your Ubuntu KVM guest","text":"<p>A KVM Guest has been defined for each student by the instructors.  This guest has the Ubuntu 22.04.2 operating system installed on it.  A very straightforward installation path was taken with no additional software packages selected during the installation. You will add additional software packages as necessary during the lab. This guest does not take advantage of the additional protection offered by Secure Execution and HPVS.  It could have, but you will already be creating another KVM Guest that is protected by Secure Execution and HPVS.  This also helps to make the point that you can run \"standard\", i.e., non-Secure Execution-protected guests, and Secure Execution-protected guests on the same LPAR.</p> <p>Display your KVM guest's definition with this command:</p> <pre><code>sudo virsh dumpxml $(whoami)\n</code></pre> <p>We named your Ubuntu KVM guest the same as your userid on the RHEL host, which is why you can use the <code>whoami</code> command.</p> Example virsh dumpxml output [Click me] <pre><code>&lt;domain type='kvm'&gt;\n  &lt;name&gt;student02&lt;/name&gt;\n  &lt;uuid&gt;531199d9-3671-424e-a9c9-74ff5ca3980b&lt;/uuid&gt;\n  &lt;memory unit='KiB'&gt;2097152&lt;/memory&gt;\n  &lt;currentMemory unit='KiB'&gt;2097152&lt;/currentMemory&gt;\n  &lt;vcpu placement='static'&gt;2&lt;/vcpu&gt;\n  &lt;os&gt;\n    &lt;type arch='s390x' machine='s390-ccw-virtio-rhel8.6.0'&gt;hvm&lt;/type&gt;\n    &lt;boot dev='hd'/&gt;\n  &lt;/os&gt;\n  &lt;cpu mode='host-model' check='partial'/&gt;\n  &lt;clock offset='utc'/&gt;\n  &lt;on_poweroff&gt;destroy&lt;/on_poweroff&gt;\n  &lt;on_reboot&gt;restart&lt;/on_reboot&gt;\n  &lt;on_crash&gt;destroy&lt;/on_crash&gt;\n  &lt;devices&gt;\n    &lt;emulator&gt;/usr/libexec/qemu-kvm&lt;/emulator&gt;\n    &lt;disk type='file' device='disk'&gt;\n      &lt;driver name='qemu' type='qcow2'/&gt;\n      &lt;source file='/var/lib/libvirt/images/hpvslab/student02/student02-ubuntu22.04.qcow2'/&gt;\n      &lt;target dev='vda' bus='virtio'/&gt;\n      &lt;address type='ccw' cssid='0xfe' ssid='0x0' devno='0x0000'/&gt;\n    &lt;/disk&gt;\n    &lt;disk type='file' device='cdrom'&gt;\n      &lt;driver name='qemu' type='raw'/&gt;\n      &lt;target dev='sda' bus='scsi'/&gt;\n      &lt;readonly/&gt;\n      &lt;address type='drive' controller='0' bus='0' target='0' unit='0'/&gt;\n    &lt;/disk&gt;\n    &lt;controller type='scsi' index='0' model='virtio-scsi'&gt;\n      &lt;address type='ccw' cssid='0xfe' ssid='0x0' devno='0x0002'/&gt;\n    &lt;/controller&gt;\n    &lt;controller type='pci' index='0' model='pci-root'/&gt;\n    &lt;controller type='virtio-serial' index='0'&gt;\n      &lt;address type='ccw' cssid='0xfe' ssid='0x0' devno='0x0003'/&gt;\n    &lt;/controller&gt;\n    &lt;interface type='network'&gt;\n      &lt;mac address='52:54:00:67:e5:c1'/&gt;\n      &lt;source network='default'/&gt;\n      &lt;model type='virtio'/&gt;\n      &lt;address type='ccw' cssid='0xfe' ssid='0x0' devno='0x0001'/&gt;\n    &lt;/interface&gt;\n    &lt;console type='pty'&gt;\n      &lt;target type='sclp' port='0'/&gt;\n    &lt;/console&gt;\n    &lt;channel type='unix'&gt;\n      &lt;target type='virtio' name='org.qemu.guest_agent.0'/&gt;\n      &lt;address type='virtio-serial' controller='0' bus='0' port='1'/&gt;\n    &lt;/channel&gt;\n    &lt;audio id='1' type='none'/&gt;\n    &lt;memballoon model='virtio'&gt;\n      &lt;address type='ccw' cssid='0xfe' ssid='0x0' devno='0x0004'/&gt;\n    &lt;/memballoon&gt;\n    &lt;panic model='s390'/&gt;\n  &lt;/devices&gt;\n&lt;/domain&gt;\n</code></pre> <p>Look for the your userid in the output of the virsh dumpxml command.  You'll see it in two places- at the top where it names your guest, and then within the filepath and filename of the qcow2 image that provides your KVM guest.  </p> <p>Run this command to start your Ubuntu KVM guest:</p> <pre><code>sudo virsh start $(whoami)\n</code></pre> Expected output (for student02)  <pre><code>Domain 'student02' started\n</code></pre> Your domain (i.e., your KVM guest) has startedYour domain didn't start for whatever reason <p>You are off to a smashing start! </p> <p>You should now open a new window or tab using the terminal profile named KVM Standard Guest. From your current terminal window, click File on the menu bar, and then choose either New Tab or New Window based on your personal preference, but, in either case, choose the profile named KVM Standard Guest.  This will create a terminal tab or window with a light beige background and a gray font.  You'll be directed to use this new tab or window when doing work on your KVM Ubuntu guest and you'll be directed to use your original terminal tab or window when doing work on the RHEL host. </p> <p>You have departed from the happy path... </p> <p>Please ask your instructor for help.</p>"},{"location":"lab/paynow/","title":"Lab Overview","text":""},{"location":"lab/paynow/#lab-environment-topology","title":"Lab environment topology","text":"PayNow Demo Lab Architecture <p>Hyper Protect Virtual Servers 2.1.6 provides an IBM-provided and -supported Secure Execution-enabled KVM image that runs on a Linux LPAR on an IBM Z or LinuxONE server. </p> <p>Hyper Protect Virtual Servers (HPVS) requires you to specify your workload via a \"contract\" that you define. </p> <p>Within the contract you specify an OCI-compliant image that provides your workload.</p> <p>For our lab this LPAR is running RHEL 8.5.  You can use any distribution on IBM Z or LinuxONE that supports Secure Execution- i.e., recent versions of Ubuntu and SUSE as well as RHEL.</p> <p>In the lab, you will run the a demonstration application called the PayNow Demo in two places-  you will run it once in a standard KVM guest, and you will run it once in an HPVS KVM guest protected by Secure Execution.</p> <p>You will access both instances of the PayNow demo from a web browser and enter data representing sensitive information such as name, credit card number, credit card security code, etc.  This should be fictitious data that you make up for learning purposes in the lab.</p> <p>From each instance of PayNow you will take a memory dump of the KVM guest and by following the lab instructions you will see that an insider attack from a malicious system administrator could extract sensitve data from the standard KVM guest, and then you will see that this insider attack fails when attempted against an HPVS KVM guest, mitigating against the insider attack, thus demonstrating the value of Confidential Computing as implemented by Hyper Protect Virtual Servers 2.1.6.</p> <p>Your HPVS KVM guest that will run PayNow will be configured to write log messages to an rsyslog service.  For the lab, you will configure this rsyslog service on the same standard KVM guest that you are using for running the \"unprotected\" version of PayNow</p> <p>During the lab you will log in to two servers: </p> <ol> <li> <p>The RHEL 8.5 host.  From here you will launch your Ubuntu KVM guest. You will also use your host login to define the \"contract\" that HPVS expects so that you can launch your HPVS KVM Guest for the PayNow demo.</p> </li> <li> <p>You will log in to your Ubuntu KVM guest for configuring the rsyslog service and for running the PayNow demo</p> </li> </ol> <p>You will not log in directly to your HPVS KVM Guest for the PayNow demo, but you will be accessing the PayNow demo from a web browser.</p>"},{"location":"lab/paynow/#lab-logistics","title":"Lab logistics","text":"<p>Except for the RHEL Jumpbox, the systems used in the lab are in the IBM Washington Systems Center (WSC) in the WSC's private network. Access to the WSC private network is through a virtual private network (VPN) client running on the RHEL Jumpbox.  The instructors access each student's RHEL Jumpbox in order to log in via the VPN client.  Students access their jumpbox from a web browser- other than a modern web browser, no additional software is required on the student's laptop or workstation.</p> <p>During the lab, students will be directed to open two terminal windows on their jumpbox- one will be designated for working on the RHEL host and the other will be designated for working on their KVM standard Ubuntu guest. Two separate terminal profiles have been created on the jumpbox- one for the RHEL host and one for the KVM standard Ubuntu guest- which have different background and text colors which will help the student more easily differentiate between the two windows.  The student may wish to use a single terminal window with two tabs- one with each terminal profile- instead of two different windows.  It is fine to do so.</p>"},{"location":"lab/paynow/#terminal-profiles-we-have-defined-in-your-jumpbox","title":"Terminal profiles we have defined in your jumpbox","text":"<p>The terminal profile we have set up for you to run commands in the RHEL host looks like this:</p> <p></p> <p>The terminal profile we have set up for you to run commands in your Ubuntu KVM Guest looks like this:</p> <p></p> <p>You are free to change the look and feel of the terminal profiles to what suits you, but the lab is written with the assumption that you are using the profiles we have set up for you.  This matters only in that we may show images in the lab in an effort to help ensure you are working on the correct system when you are entering commands.</p>"},{"location":"lab/paynow/configureRsyslog/","title":"Configure rsyslog service","text":"<p>You will be performing this section from your Ubuntu KVM guest, so switch back to your terminal session for your Ubuntu KVM guest. </p> <p>Your window or tab should like like this (unless you customized the profile we provided you):</p> <p></p>"},{"location":"lab/paynow/configureRsyslog/#overview-of-this-page","title":"Overview of this page","text":"<p>The HPVS 2.1.6-protected KVM Guest for the PayNow Demo that you will create later in the lab will log its output to an rsyslog service on the Ubuntu KVM guest that you just started at the beginning of the lab. Rsyslog on your Ubuntu KVM guest is currently not set up for this, so you will configure rsyslog in this section of the lab.</p> <p>Logging to IBM Log Analysis on IBM Cloud</p> <p>You can also log the output of an HPVS 2.1.6 guest to an IBM Log Analysis instance on IBM Cloud.  That is not covered in this lab but if you are interested in this, it is covered in the product documentation.</p>"},{"location":"lab/paynow/configureRsyslog/#install-rsyslog-gnutls-package","title":"Install rsyslog-gnutls package","text":"<p>The initial installation of Ubuntu installed an rsyslog service.  Display it with this command:</p> <pre><code>sudo systemctl status rsyslog\n</code></pre> Example output <pre><code>\u25cf rsyslog.service - System Logging Service\n     Loaded: loaded (/lib/systemd/system/rsyslog.service; enabled; vendor preset: enabled)\n     Active: active (running) since Tue 2023-02-14 00:24:49 UTC; 12min ago\nTriggeredBy: \u25cf syslog.socket\n       Docs: man:rsyslogd(8)\n             man:rsyslog.conf(5)\n             https://www.rsyslog.com/doc/\n   Main PID: 654 (rsyslogd)\n      Tasks: 4 (limit: 2350)\n     Memory: 2.2M\n        CPU: 8ms\n     CGroup: /system.slice/rsyslog.service\n             \u2514\u2500654 /usr/sbin/rsyslogd -n -iNONE\n\nFeb 14 00:24:49 ubuntu2204 systemd[1]: Starting System Logging Service...\nFeb 14 00:24:49 ubuntu2204 systemd[1]: Started System Logging Service.\nFeb 14 00:24:49 ubuntu2204 rsyslogd[654]: imuxsock: Acquired UNIX socket '/run/systemd/journal/syslog' (f&gt;\nFeb 14 00:24:49 ubuntu2204 rsyslogd[654]: rsyslogd's groupid changed to 115\nFeb 14 00:24:49 ubuntu2204 rsyslogd[654]: rsyslogd's userid changed to 107\nFeb 14 00:24:49 ubuntu2204 rsyslogd[654]: [origin software=\"rsyslogd\" swVersion=\"8.2112.0\" x-pid=\"654\" x-&gt;\nFeb 14 00:24:49 ubuntu2204 systemd[1]: rsyslog.service: Sent signal SIGHUP to main process 654 (rsyslogd)&gt;\nFeb 14 00:34:49 ubuntu2204 rsyslogd[654]: [origin software=\"rsyslogd\" swVersion=\"8.2112.0\" x-pid=\"654\" x-&gt;\nlines 1-22/22 (END)\n</code></pre> <p>If you're having trouble getting back to a command prompt, press q (for quit). </p> <p>The default installation of rsyslog needs to be modified to allow it to receive messages sent across the network using the TCP protocol and with mutual TLS authentication.</p> <p>You'll modify the configuration to allow this.  </p> <ol> <li> <p>Become the root user:</p> <pre><code>sudo su -\n</code></pre> Example output when becoming root <pre><code>student@ubuntu2204:~$ sudo su -\nroot@ubuntu2204:~# \n</code></pre> </li> <li> <p>Create the proper configuration file in the /etc/rsyslog.d/ directory:</p> <pre><code>cat &lt;&lt; EOF &gt; /etc/rsyslog.d/server.conf\n# output to journal\nmodule(load=\"omjournal\")\ntemplate(name=\"journal\" type=\"list\") {\n# can add other metadata here\nproperty(outname=\"PRIORITY\" name=\"pri\")\nproperty(outname=\"SYSLOG_FACILITY\" name=\"syslogfacility\")\nproperty(outname=\"SYSLOG_IDENTIFIER\" name=\"app-name\")\nproperty(outname=\"HOSTNAME\" name=\"hostname\")\nproperty(outname=\"MESSAGE\"  name=\"msg\")\n}\n\nruleset(name=\"journal-output\") {\naction(type=\"omjournal\" template=\"journal\")\n}\n\n# make gtls driver the default and set certificate files\n\\$DefaultNetstreamDriver \"gtls\"\n\\$DefaultNetstreamDriverCAFile /var/lib/rsyslog/x509/ca.crt\n\\$DefaultNetstreamDriverCertFile /var/lib/rsyslog/x509/server.crt\n\\$DefaultNetstreamDriverKeyFile /var/lib/rsyslog/x509/server-key.pem\n\n# load TCP listener\nmodule(\nload=\"imtcp\"\nStreamDriver.Name=\"gtls\"\nStreamDriver.Mode=\"1\"\nStreamDriver.Authmode=\"x509/certvalid\"\n)\n\n# start up listener at port 6514\ninput(\ntype=\"imtcp\"\nport=\"6514\"\nruleset=\"journal-output\"\n)\n\nEOF\n</code></pre> <p>We might have had you put the cart before the horse a little bit because there is some work to do to ensure that what you've added to this configuration file actually works! But we did this so that we can point out the sections that are requiring this extra work.</p> <p>Take a look close to the bottom of the file</p> <p>There are two sections of interest that are highlighted in the above code block. If these lines could speak to you, they would say, \"We are going to receive TCP messages, and we will use TLS to authenticate with the sender of these messages and to enable encryption of the messages, and here are the certificate and keys needed to enable this to work\".</p> <p>For this configuration file to work, you'll need to install a software package to allow rsyslog to receive TLS-authenticated TCP messages and you'll need to create the certificate and keys and put them where the configuration file says you put them.</p> </li> <li> <p>Prove to yourself that the rsyslog package has already been installed (by the \"bare-bones\" default Ubuntu setup):</p> <pre><code>apt-cache policy rsyslog\n</code></pre> Output showing rsyslog is already installed <pre><code>rsyslog:\n    Installed: 8.2112.0-2ubuntu2.2\n    Candidate: 8.2112.0-2ubuntu2.2\n    Version table:\n*** 8.2112.0-2ubuntu2.2 500\n500 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x Packages\n        500 http://ports.ubuntu.com/ubuntu-ports jammy-security/main s390x Packages\n        100 /var/lib/dpkg/status\n    8.2112.0-2ubuntu2 500\n500 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x Packages\n</code></pre> </li> <li> <p>Prove to yourself that the rsyslog-gnutls package has not been installed yet:</p> <pre><code>apt-cache policy rsyslog-gnutls\n</code></pre> Output showing rsyslog-gnutls is not installed <pre><code>rsyslog-gnutls:\n    Installed: (none)\n    Candidate: 8.2112.0-2ubuntu2.2\n    Version table:\n    8.2112.0-2ubuntu2.2 500\n        500 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x Packages\n        500 http://ports.ubuntu.com/ubuntu-ports jammy-security/main s390x Packages\n    8.2112.0-2ubuntu2 500\n        500 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x Packages\n</code></pre> </li> <li> <p>Remedy the situation (not having rsyslog-gnutls package installed):</p> <pre><code>apt-get install rsyslog-gnutls\n</code></pre> Output from installing rsyslog-gnutls <pre><code>Reading package lists... Done\nBuilding dependency tree... Done\nReading state information... Done\nSuggested packages:\n    gnutls-bin\nThe following NEW packages will be installed:\n    rsyslog-gnutls\n0 upgraded, 1 newly installed, 0 to remove and 0 not upgraded.\nNeed to get 17.8 kB of archives.\nAfter this operation, 90.1 kB of additional disk space will be used.\nGet:1 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x rsyslog-gnutls s390x 8.2112.0-2ubuntu2.2 [17.8 kB]\nFetched 17.8 kB in 0s (71.9 kB/s)         \nSelecting previously unselected package rsyslog-gnutls.\n(Reading database ... 56568 files and directories currently installed.)\nPreparing to unpack .../rsyslog-gnutls_8.2112.0-2ubuntu2.2_s390x.deb ...\nUnpacking rsyslog-gnutls (8.2112.0-2ubuntu2.2) ...\nSetting up rsyslog-gnutls (8.2112.0-2ubuntu2.2) ...\nScanning processes...                                                                                     \nScanning linux images...                                                                                  \n\nRunning kernel seems to be up-to-date (ABI upgrades are not detected).\n\nNo services need to be restarted.\n\nNo containers need to be restarted.\n\nNo user sessions are running outdated binaries.\n\nNo VM guests are running outdated hypervisor (qemu) binaries on this host.\n</code></pre> </li> <li> <p>Optional: Repeat <code>apt-cache policy rsyslog-gnutls</code> to see that the package is now installed:</p> <pre><code>apt-cache policy rsyslog-gnutls\n</code></pre> Output showing that rsyslog-gnutls is installed <pre><code>rsyslog-gnutls:\n    Installed: 8.2112.0-2ubuntu2.2\n    Candidate: 8.2112.0-2ubuntu2.2\n    Version table:\n*** 8.2112.0-2ubuntu2.2 500\n        500 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x Packages\n        500 http://ports.ubuntu.com/ubuntu-ports jammy-security/main s390x Packages\n        100 /var/lib/dpkg/status\n    8.2112.0-2ubuntu2 500\n        500 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x Packages\n</code></pre> </li> </ol>"},{"location":"lab/paynow/configureRsyslog/#create-a-certification-authority-ca-for-your-rsyslog-service","title":"Create a Certification Authority (CA) for your rsyslog service","text":""},{"location":"lab/paynow/configureRsyslog/#background-information","title":"Background Information","text":"<p>The TLS authentication for communication with the rsyslog service requires an X509 certificate and private key.  An X509 certificate contains a public key that goes with the private key.  An X509 certificate also contains metadata including the identification of the holder of the certificate, the purposes the certificate is intended for, and more. Think of a public key as a yummy cake baked with yellow dough, it's moist and tastes pretty good- but the X509 certificate wrapped around it is like the chocolate icing and the rainbow sprinkles- it's delicious!  (Break time!!) If you haven't given up on the analogy, think of the private key as the secret recipe to bake the cake that nobody but you knows about.  For a slightly more technical (but still just scratching the surface), but perhaps not as tasty, description of public key cryptography check out this description from one of our earlier labs.</p> <p>An X509 certificate needs to be created and signed by a certification authority (CA). </p> <p>The authority prefers certification</p> <p>Most people call a CA a \"certificate authority\" but actually the Internet Request for Comment (RFC) that defines the X509 standard uses the term \"certification authority\". Imagine that! </p> <p>For the lab you will create your own CA- what is often called a \"self-signed\" CA. A utility called <code>openssl</code> can be used to do this.  A CA signs certificates that it creates. In order to digitally sign something, you use a private key.  In simple terms, a publicly known algorithm- which can be poked at and prodded at by researchers and academics in an effort to prove its security or to hopefully win a large bounty by proving its insecurity- is run against a private key that nobody else knows, and produces a unique output, or signature.  This signature can be verified algorithmically by anybody who holds the private key's corresponding public key.</p> Who holds the public key? <p>That's right, the public ! It is safe to share your public key with others- it is your private key that you must protect from loss, theft or exposure.</p> <p>If you receive a piece of digital information that is signed, and the public key that corresponds to the private key used to create the signature, you can prove that whoever signed this had to have held the private key in order to create the signature.  Okay, cool.  But what if a malicious actor had the private key and gave you the public key? Would you feel so great knowing you verified the signer if they were malicious?  No!  That is where a CA comes in. The idea is that the following process occurs:</p> <ol> <li>An individual or organization submits a request for a certificate (CSR) with their public key.</li> <li>The CA takes the effort to verify that the owner of the public key is a good actor and is who they say they are and can be trusted.</li> <li>The CA creates the certificate that holds the public key, essentially stating \"I am a CA and you can trust me when I say that the holder of this certificate that I just signed is a good person and they are who they say they are, so you can trust this certificate and anything it signs\".</li> </ol> How is that working out for us? <p>The X509 Certification Authority protocol is outstanding in theory. In practice its vulnerability lies in the need for the holders of private keys to protect them with diligence.  Losing your private key is akin to losing your wallet or your house key or your drivers license or ... you get the picture.  Attacks such as software supply chain attacks are often accomplished by malicious actors who have stolen others' private keys.  This is why initiatives like Confidential Computing and technologies like Hardware Security Modules are important.</p> <p>In real world practice, for external, customer-facing applications an enterprise will ask a well-known and trusted third-party CA to issue its certificates. In many cases an enterprise may run its own internal CA for certificates for internal applications.   In this lab you're going to create your own CAs.  Hopefully, you trust yourself  enough to feel comfortable with this...</p>"},{"location":"lab/paynow/configureRsyslog/#hands-on-keyboard-time","title":"Hands on keyboard time","text":"<ol> <li> <p>Get out of root for the moment, as you'll be doing this certificate work with your regular authority:</p> <pre><code>exit\n</code></pre> Output when getting out of root <pre><code>root@ubuntu2204:~# exit\nlogout\n</code></pre> <p>Your prompt should now end with a dollar sign ($) indicating you are operating with your regular authority as userid student, as opposed to the hash sign (#) prompt that you had when you were operating with root authority.  </p> </li> <li> <p>Run this command sequence:</p> <pre><code>cd ${HOME} &amp;&amp; mkdir -p rsyslogWork &amp;&amp; cd rsyslogWork\n</code></pre> <p>It accomplishes the following:</p> <ol> <li>Ensures you are in your home directory (which you already are in unless you wandered off on your own)</li> <li>Creates a fresh directory that you'll work in for this activity</li> <li>Switches to this new directory</li> </ol> </li> <li> <p>Create a private key. It will be the private key your self-signed CA will use so call it <code>ca-key.pem</code>:</p> <pre><code>openssl genrsa -out ca-key.pem 4096\n</code></pre> </li> <li> <p>Run the following command to create a configuration file for your CA</p> <pre><code>cat &lt;&lt; EOF &gt; ca.cnf\n[ req ]\ndefault_bits = 2048\ndefault_md = sha256\nprompt = no\nencrypt_key = no\ndistinguished_name = dn\n\n[ dn ]\nC = US\nO = IBM WSC IBM Z and LinuxONE\nCN = CA for rsyslog for SE-enabled KVM guests\n\nEOF\n</code></pre> <p>Why are we using .cnf configuration files?</p> <p>Some <code>openssl</code> commands have a tendency to ask a bunch of questions which can be tedious and error-prone when typing the answers, but you can avoid that by creating a configuration file that provides the answers and thus avoids the questions.  You'll see this pattern throughout the lab.</p> </li> <li> <p>A CA itself has a certificate that it can send or make available to others (others being people, or computer processes, or whomever). You don't have one yet- all you have is a private key. A certificate signing request (CSR) can be created from a private key- it derives the public key from the private key and creates an object called a Certificate Signing Request (CSR) that contains the public key and other identifying information and can be sent to a CA. Create your CSR:</p> <pre><code>openssl req -config ca.cnf -key ca-key.pem -new -out ca-req.csr\n</code></pre> <p>Certificate Signing Request (CSR)</p> <p>The RSA algorithm is a magical mystery tour to most mortals, but the algorithm is such that the public key can be extracted from a private key. You will use the private key as input to a command that will create what is known as a CSR. A CSR is a file that contains the public key (the yellow dough) and other information (the icing and the sprinkles) that you then send to the CA and say \"please, please, I'm a good person and you can trust me and please create a real certificate for me\".  A CSR is like a caterpillar  and the resulting certificate is like a beautiful butterfly .</p> <p>Now you have a certificate signing request. </p> <p>So you normally send a CSR to a CA to sign.  There's a \"chicken or the egg\" problem here.  If a CA needs a Certificate,  and a Certificate has to be created by another CA, then how did that CA get created?  By another CA?  Yes, possibly.  But, does the chain go on forever?  No-  at some point in the chain the CA's certificate was signed by its own private key, and not a higher CA.  This is the root of the chain, and it is self-signed. In real life, a chain could be many layers deep, but it eventually has to stop.  Think of it like a management chain in an organization's org chart-  there are first-line managers, second-line managers, and so forth up to the CEO.  The Root certificate is like the CEO.  </p> </li> <li> <p>Since you're the boss of your lab, and the worker, you don't need a big long chain of CA's.  Just one will do fine.  So you'll build a single root, or self-signed, CA, and you'll like it!  :</p> <pre><code>openssl x509 -signkey ca-key.pem -in ca-req.csr -req -days 365 -out ca.crt\n</code></pre> Output from creating self-signed CA certificate <pre><code>Certificate request self-signature ok\nsubject=C = US, O = IBM WSC IBM Z and LinuxONE, CN = CA for rsyslog for SE-enabled KVM guests\n</code></pre> </li> </ol>"},{"location":"lab/paynow/configureRsyslog/#create-certificate-and-key-for-your-rsyslog-service","title":"Create certificate and key for your rsyslog service","text":""},{"location":"lab/paynow/configureRsyslog/#process-overview","title":"Process Overview","text":"<p>In real life, a CA will probably issue lots of certificates- it's how they make money.  Your CA is only going to create a couple:</p> <ul> <li>a certificate for the rsyslog service which you will create next.</li> <li>a certificate for the client (your future HPVS KVM guest for the PayNow demo) of the rsyslog service, which you will create later in the lab.  </li> </ul> <p>The process is the same as what you just went through for creating your CA for steps 1-3 below but differs slightly for step 4:</p> <ol> <li>Create a private key</li> <li>Create a configuration file to answer questions ahead of time</li> <li>Use the key and the config file to create a CSR</li> <li>This time you'll have your \"self-signed\" CA create and sign the certificate.  </li> </ol>"},{"location":"lab/paynow/configureRsyslog/#creation-time","title":"Creation time","text":"<ol> <li> <p>Create the private key:</p> <pre><code>openssl genrsa -out server-key.pem 4096\n</code></pre> </li> <li> <p>Create the configuration file to preemptively answer the inevitable questions.  We've used a command pipe to extract your guest's IP address into a variable and then we use that variable in two places in the configuration file.  If you borrow this technique for your system please ensure that this command pipe works on your system:</p> <pre><code>export ip=\"$(ip route get 1.1.1.1 | grep -oP 'src \\K[^ ]+')\" &amp;&amp; \\\ncat &lt;&lt; EOF &gt; server.cnf\n[ req ]\ndefault_bits = 2048\ndefault_md = sha256\nprompt = no\nencrypt_key = no\ndistinguished_name = dn\n\n[ server ]\nsubjectAltName = IP:${ip}\nextendedKeyUsage = serverAuth\n\n[ dn ]\nC = US\nO = Rsyslog Service\nCN = ${ip}\nEOF\n</code></pre> <p>Optional: You know you can't resist looking at the output file to see if that IP magic worked, so just do it:</p> <pre><code>cat server.cnf\n</code></pre> </li> <li> <p>Create the rsyslog service's CSR:</p> <pre><code>openssl req -config server.cnf -key server-key.pem -new -out server-req.csr\n</code></pre> </li> <li> <p>\"Send\" the request to your \"self-signed\" CA in order to create the certificate:</p> <pre><code>openssl x509 -req -in server-req.csr -days 365 -CA ca.crt -CAkey ca-key.pem -CAcreateserial -extfile server.cnf -extensions server -out server.crt\n</code></pre> Example output from certificate creation <pre><code>Certificate request self-signature ok\nsubject=C = US, O = Rsyslog Test Server, CN = 172.16.0.42\n</code></pre> <ol> <li> <p>Run this command to display the rsyslog service's certificate in a form that a human can comprehend:</p> <pre><code>openssl x509 -noout -text -in server.crt </code></pre> Example human-readable display of certificate <pre><code>Certificate:\n    Data:\n        Version: 3 (0x2)\n        Serial Number:\n            72:1b:54:77:9d:c9:28:b0:7c:f0:b8:d6:dc:24:e1:b1:60:fa:59:f7\n        Signature Algorithm: sha256WithRSAEncryption\n        Issuer: C = US, O = IBM WSC IBM Z and LinuxONE, CN = CA for rsyslog for SE-enabled KVM guests\n        Validity\n            Not Before: Feb 14 01:18:18 2023 GMT\n            Not After : Feb 14 01:18:18 2024 GMT\n        Subject: C = US, O = Rsyslog Test Server, CN = 172.16.0.42\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n                Public-Key: (4096 bit)\n                Modulus:\n                    00:aa:ed:d0:83:3c:65:8c:6c:4d:f5:bc:bc:56:e9:\n                    3c:57:ab:b8:3c:29:14:2a:73:d6:ca:a0:7e:0c:00:\n                    fc:4f:cc:28:88:1c:01:e9:26:9e:5e:0b:60:5e:ee:\n                    69:f3:c7:c8:f9:26:19:71:a7:1a:c1:54:3a:3d:6b:\n                    01:4a:e2:20:ab:89:a5:31:a7:f4:a2:39:71:30:21:\n                    29:17:4f:04:15:73:1d:b7:b6:c2:81:c2:f1:d9:a8:\n                    29:d8:ca:c9:d6:97:f3:37:8e:17:9d:a7:b1:30:c8:\n                    5c:1c:be:e2:75:5e:9f:88:08:76:54:5a:ee:40:d4:\n                    90:26:2b:74:35:71:a2:d1:4d:86:db:46:bf:18:38:\n                    0a:fb:e4:1a:ab:ef:f6:49:1e:7b:bc:76:71:3a:b7:\n                    5e:e8:c0:c7:3d:db:74:2d:87:20:5b:e6:5e:27:67:\n                    1a:e9:e1:ea:20:b8:d2:fc:5e:2d:79:c0:e5:46:22:\n                    cf:6e:26:54:c6:00:d1:d0:05:46:0b:9d:97:8c:cb:\n                    68:e7:a4:b2:9a:47:21:67:e5:56:32:cb:ba:c3:0e:\n                    c8:f3:f4:17:02:ca:ee:ac:37:0e:f3:40:cf:a4:56:\n                    98:9d:b3:e3:e2:c2:43:d7:3b:a5:c1:09:92:2b:e9:\n                    fb:5b:a6:73:d0:83:97:c9:70:7f:f8:84:59:b3:b6:\n                    4f:e8:40:98:92:74:5c:8c:9f:db:27:7f:94:4b:00:\n                    a6:cf:06:9b:0f:a9:f4:35:17:01:e6:d6:6d:c2:78:\n                    f8:41:59:f6:f6:f2:11:d1:52:28:b5:06:78:ba:db:\n                    12:f2:3f:c6:ef:14:64:cd:85:49:ce:8e:fc:91:b8:\n                    2a:c3:25:6a:cc:3c:46:9d:e8:10:aa:30:fd:3b:55:\n                    3a:26:97:00:8b:62:c4:d6:89:f0:36:68:13:63:19:\n                    ba:18:f4:0c:4f:bc:5d:34:c8:24:d9:8e:2f:4b:e5:\n                    d9:dd:9f:39:8d:00:54:fe:d9:00:d7:f1:71:6b:8b:\n                    9c:ed:66:de:6a:26:3f:48:cb:3a:4a:fc:9c:50:12:\n                    f5:da:dc:e7:e5:08:6c:0a:6d:60:73:cf:e6:b2:3e:\n                    06:59:98:00:2c:97:25:38:01:50:2e:c2:c6:35:fa:\n                    e4:d5:20:01:fb:9d:ca:4c:78:3f:7a:ad:c7:5d:db:\n                    5e:04:c7:0f:e2:9f:a1:e9:27:f8:f2:a9:9f:00:07:\n                    58:68:c9:3f:d6:41:5b:46:90:f5:26:6a:04:2c:cf:\n                    44:c9:f8:1e:5d:38:95:95:71:e2:30:57:d5:83:41:\n                    73:a4:00:88:6b:99:84:71:d3:60:ce:32:9c:bb:3b:\n                    39:46:a7:77:fd:7e:ed:1c:81:02:e3:da:83:85:2c:\n                    c9:60:c7\n                Exponent: 65537 (0x10001)\n        X509v3 extensions:\n            X509v3 Subject Alternative Name: \n                IP Address:172.16.0.42\n            X509v3 Extended Key Usage: \n                TLS Web Server Authentication\n            X509v3 Subject Key Identifier: \n                CC:01:AD:BA:8C:5F:31:B9:58:A9:2D:4E:05:C7:B1:B7:82:10:90:05\n            X509v3 Authority Key Identifier: \n                DirName:/C=US/O=IBM WSC IBM Z and LinuxONE/CN=CA for rsyslog for SE-enabled KVM guests\n                serial:0B:4A:84:C6:84:00:F8:7F:B7:0A:F0:82:FD:4E:C1:F2:99:C2:63:BC\n    Signature Algorithm: sha256WithRSAEncryption\n    Signature Value:\n        4c:a3:7a:76:21:0d:8f:db:e9:3a:a6:3f:6b:3a:9a:5d:bb:ac:\n        7e:75:5c:ed:69:3c:b9:2b:6e:84:1c:fc:1f:56:47:ff:b3:38:\n        92:fe:0f:5b:2c:87:32:0e:8f:60:c3:33:ff:d5:89:26:61:9a:\n        7f:ce:ae:f3:6b:cc:77:1b:4d:d0:59:5f:d9:09:e1:fa:21:5c:\n        6a:6f:b3:71:45:10:98:4f:6e:fe:08:7f:31:42:e6:dd:83:9a:\n        11:de:2d:eb:b5:b9:40:4d:80:86:7f:f8:88:cc:87:60:38:d4:\n        e2:9a:89:9d:ec:43:61:ad:34:96:38:93:ca:4a:63:8d:cc:b7:\n        33:98:33:e2:63:c1:7b:04:98:80:b3:e1:54:df:f6:24:57:82:\n        98:c4:e8:64:8a:3b:d2:af:65:56:d7:97:c0:c3:dc:45:06:c9:\n        4f:ce:5b:d3:49:7f:2b:28:83:27:57:b9:bf:1a:46:81:68:4c:\n        6b:85:d7:db:f0:d4:25:7b:3d:92:63:d0:91:b5:ec:df:cb:e4:\n        6b:6c:b0:c4:47:3c:c6:91:64:33:f6:11:6b:5b:f7:70:bd:e1:\n        71:ef:a6:28:57:b2:a0:e0:2e:ef:ab:34:7a:c4:b8:24:18:88:\n        5f:92:0b:92:ca:14:a2:b6:62:ab:2c:e6:c2:bb:27:91:54:de:\n        84:56:1e:ed:f3:7d:b7:e8:34:b4:78:76:2c:1f:af:d9:61:b7:\n        6e:59:fa:e8:33:38:b4:5e:30:69:71:06:4d:df:fe:cb:46:03:\n        ba:69:7c:85:3c:f0:73:f7:d8:4e:b0:39:aa:79:72:1f:52:2e:\n        05:cb:81:9f:e3:62:6b:66:55:7c:92:13:21:62:dc:fd:9d:8f:\n        f8:77:dd:d2:b6:61:c4:8f:fa:fa:a0:74:95:fa:9d:f2:5d:d2:\n        7d:d4:41:95:d8:41:50:99:7d:80:3d:36:28:75:28:62:67:05:\n        11:a3:95:c7:85:8f:20:37:d6:b8:b5:8a:f6:8a:e3:d0:85:6e:\n        cd:2a:41:f9:e7:48:bb:b0:b7:54:dc:6b:df:c9:a2:5e:f7:61:\n        c2:3a:4c:82:7e:6b:e9:82:cf:c6:3a:7f:a2:ae:39:00:d9:ac:\n        bf:8a:84:72:e6:ae:c1:75:e0:92:60:5e:cd:4b:64:1f:5a:44:\n        3a:09:15:2c:95:b8:c3:ca:44:ec:79:1e:d5:96:bc:20:9a:7a:\n        cf:6b:e4:cf:e0:91:f2:c2:e6:fd:f1:8a:66:c4:ae:eb:90:90:\n        f4:ec:64:66:9a:9a:11:8d:11:ab:ef:05:d2:42:fb:e5:2c:78:\n        8a:db:16:b7:96:ae:06:b8:42:b4:c7:23:26:b2:9a:c2:85:d8:\n        6b:6d:d8:4e:84:0e:ab:a1\n</code></pre> </li> </ol> </li> </ol>"},{"location":"lab/paynow/configureRsyslog/#copy-certificates-and-private-key-to-the-location-specified-in-the-etcrsyslogdserverconf-file","title":"Copy certificates and private key to the location specified in the /etc/rsyslog.d/server.conf file","text":"<p>The configuration file you created in rsyslog a little while ago (near the top of this page) specified <code>/var/lib/rsyslog/x509</code> as the directory to hold some files. You just created these files in your rsyslogWork directory, so now create the /var/lib/rsyslog/x509 directory and copy the files in there:</p> <pre><code>sudo mkdir -p /var/lib/rsyslog/x509 &amp;&amp; \\\nfor file in ca.crt server.crt server-key.pem ; do \\\nsudo cp -ipv ${file} /var/lib/rsyslog/x509/. ; \\\ndone \\\n&amp;&amp; sudo chown -R syslog:syslog /var/lib/rsyslog\n</code></pre> Output from copying files <pre><code>'ca.crt' -&gt; '/var/lib/rsyslog/x509/./ca.crt'\n'server.crt' -&gt; '/var/lib/rsyslog/x509/./server.crt'\n'server-key.pem' -&gt; '/var/lib/rsyslog/x509/./server-key.pem'\n</code></pre>"},{"location":"lab/paynow/configureRsyslog/#restart-your-rsyslog-service","title":"Restart your rsyslog service","text":"<p>You'll truly know that you configured everything correctly later in the lab when you try to write messages to it from your yet-to-be-created HPVS KVM guest for the PayNow demo. But for now, you will verify it somewhat by taking a before and after snapshot of which TCP ports on your system are listening.  </p> <p>Run this command, and then in a moment you'll repeat the command.  What you should notice here is the absence of port 6514 in the output:</p> <pre><code>sudo lsof -nP -iTCP -sTCP:LISTEN\n</code></pre> Output showing listening TCP ports <pre><code>COMMAND   PID            USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\nsystemd-r 602 systemd-resolve   14u  IPv4  15472      0t0  TCP 127.0.0.53:53 (LISTEN)\nsshd      709            root    3u  IPv4  16871      0t0  TCP *:22 (LISTEN)\nsshd      709            root    4u  IPv6  16882      0t0  TCP *:22 (LISTEN)\n</code></pre> <p>You are now ready to restart the rsyslog service on your machine:</p> <pre><code>sudo systemctl restart rsyslog\n</code></pre> <p>No news is good news on the above command- it's pretty quiet when it works.</p> <p>Display the rsyslog service's status and notice it hasn't been active very long, since it was just restarted:</p> <pre><code>sudo systemctl status rsyslog\n</code></pre> <p>Reminder:  q gets you back to a command prompt.</p> Output showing rsyslog status after restart <pre><code>\u25cf rsyslog.service - System Logging Service\n     Loaded: loaded (/lib/systemd/system/rsyslog.service; enabled; vendor preset: enabled)\n     Active: active (running) since Tue 2023-02-14 01:30:47 UTC; 13s ago\nTriggeredBy: \u25cf syslog.socket\n       Docs: man:rsyslogd(8)\n             man:rsyslog.conf(5)\n             https://www.rsyslog.com/doc/\n   Main PID: 1439 (rsyslogd)\n      Tasks: 9 (limit: 2350)\n     Memory: 1.8M\n        CPU: 1.008s\n     CGroup: /system.slice/rsyslog.service\n             \u2514\u25001439 /usr/sbin/rsyslogd -n -iNONE\n\nFeb 14 01:30:46 ubuntu2204 systemd[1]: Starting System Logging Service...\nFeb 14 01:30:47 ubuntu2204 rsyslogd[1439]: imuxsock: Acquired UNIX socket '/run/systemd/journal/syslog' (&gt;\nFeb 14 01:30:47 ubuntu2204 rsyslogd[1439]: rsyslogd's groupid changed to 115\nFeb 14 01:30:47 ubuntu2204 rsyslogd[1439]: rsyslogd's userid changed to 107\nFeb 14 01:30:47 ubuntu2204 rsyslogd[1439]: [origin software=\"rsyslogd\" swVersion=\"8.2112.0\" x-pid=\"1439\" &gt;\nFeb 14 01:30:47 ubuntu2204 systemd[1]: Started System Logging Service.\n</code></pre> <p>Now when you rerun the command to see the listening TCP ports, seeing 6514 in the output is an indication of success.  If you don't see 6514 in the output, it's time to make those instructors earn their keep:</p> <pre><code>sudo lsof -nP -iTCP -sTCP:LISTEN\n</code></pre> Expected output showing port 6514 is listening <pre><code>COMMAND    PID            USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\nsystemd-r  602 systemd-resolve   14u  IPv4  15472      0t0  TCP 127.0.0.53:53 (LISTEN)\nsshd       709            root    3u  IPv4  16871      0t0  TCP *:22 (LISTEN)\nsshd       709            root    4u  IPv6  16882      0t0  TCP *:22 (LISTEN)\nrsyslogd  1439          syslog    6u  IPv4  22401      0t0  TCP *:6514 (LISTEN)\nrsyslogd  1439          syslog    7u  IPv6  22402      0t0  TCP *:6514 (LISTEN)\n</code></pre> <p>Switch to your terminal tab or window for your session with the RHEL host, as you will start the next section of the lab working on the RHEL host.</p> <p>Please proceed to the next section of the lab by clicking the Next link on the bottom right of this page.</p>"},{"location":"lab/paynow/configureRsyslogForHPVS/","title":"Create rsyslog client certificate for your HPVS KVM guest for the PayNow demo","text":""},{"location":"lab/paynow/configureRsyslogForHPVS/#overview-of-this-section","title":"Overview of this section","text":"<p>In the last section you created the following:</p> <ol> <li>self-signed CA for the rsyslog service</li> <li>server certificate for the rsyslog service</li> </ol> <p>Your HPVS KVM guest will be a client to the rsyslog service, so in this section you will use your self-signed CA (1 above) to create a client certificate for your soon-to-be-created HPVS 2.1.6 KVM guest for the PayNow Demo.</p> <p>Please read the instructions carefully</p> <p>You'll be switching between both of your userids in this section:</p> <ol> <li>your studentnn userid on the RHEL host where nn is unique to you and between 01 and 20</li> <li>your student userid on your Ubuntu KVM guest </li> </ol> <p>We'll do our part by telling you when to switch.  Please do your part by reading the instructions carefully!</p>"},{"location":"lab/paynow/configureRsyslogForHPVS/#if-necessary-log-in-to-the-rhel-host","title":"If necessary, log in to the RHEL host","text":"<p>Switch to the correct terminal tab or window for your session on the RHEL host, the one that looks like this:</p> <p></p> <p>You should already be logged in, but, if you need to log in for any reason, the command is <code>ssh -l ${StudentID} 192.168.22.64</code></p>"},{"location":"lab/paynow/configureRsyslogForHPVS/#create-certificate-for-client-access-to-rsyslog","title":"Create certificate for client access to rsyslog","text":"<p>Steps 1 through 5 will be performed on the RHEL host.</p> <ol> <li> <p>Create a working directory and switch to it:</p> <pre><code>mkdir ~/rsyslogClientWork &amp;&amp; cd rsyslogClientWork\n</code></pre> </li> <li> <p>Create a new private key:</p> <pre><code>openssl genrsa -out client-key.pem 4096\n</code></pre> Example output when creating RSA private key <pre><code>Generating RSA private key, 4096 bit long modulus (2 primes)\n..++++\n................................................................................++++\ne is 65537 (0x010001)\n</code></pre> <p>You should see output similar to what is shown above on the RHEL 8.5 host.  This same command was very quiet on your Ubuntu KVM guest.</p> </li> <li> <p>Create a configuration file:</p> <pre><code>cat &lt;&lt; EOF &gt; client.cnf\n[ req ]\ndefault_bits = 2048\ndefault_md = sha256\nprompt = no\nencrypt_key = no\ndistinguished_name = dn\n\n[ dn ]\nC = US\nO = IBM WSC IBM Z and LinuxONE\nCN = SE-enabled HPVS KVM guest for PayNow demo\n\nEOF\n</code></pre> </li> <li> <p>Create a certificate signing request (CSR):</p> <pre><code>openssl req -config client.cnf -key client-key.pem -new -out client-req.csr\n</code></pre> </li> <li> <p>Now you are going to use a pattern that is similar to a real-world pattern:</p> <p>You are going to send your CSR, which you just created on the RHEL host, to the Rsyslog CA which you created on your Ubuntu KVM guest:</p> <pre><code>scp client-req.csr student@${StudentGuestIP}:./rsyslogWork/.\n</code></pre> <p>As shown in the sample output below, you may need to type yes since this is the first connection between the two systems, and you may have to enter a password that will be supplied by the instructors:</p> Example prompt and output when sending file <pre><code>The authenticity of host '172.16.0.42 (172.16.0.42)' can't be established.\nECDSA key fingerprint is SHA256:QBZpZnpbKTyu8uG3XmcB3z2STnArtTjeVPwBtQONSnc.\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nWarning: Permanently added '172.16.0.42' (ECDSA) to the list of known hosts.\nstudent@172.16.0.42's password: \nclient-req.csr                                                          100% 1691     9.2MB/s   00:00 \n</code></pre> </li> <li> <p>Switch to your terminal tab or window for your KVM Ubuntu guest.  Yes, this one:</p> <p></p> </li> <li> <p>If you are doing the lab in one sitting, in order, then you are probably already logged in.  If you need to login for any reason the command is <code>ssh -p ${Student_SSH_Port} -l student 192.168.22.64</code>.  Steps 8 through 12 will be performed on your Ubuntu KVM guest.</p> </li> <li> <p>You are now the CA registrar. Switch to your working directory and find the certificate signing request(CSR) that your customer (i.e., you) sent to you.  </p> <pre><code>cd ${HOME}/rsyslogWork &amp;&amp; ls -l client*.csr\n</code></pre> Make sure your csr is listed <pre><code>-rw-r--r-- 1 student student 1691 Feb 14 01:47 client-req.csr\n</code></pre> </li> <li> <p>You will do your due diligence and check the contents of the CSR:</p> <pre><code>openssl req -noout -text -in client-req.csr\n</code></pre> Example human-readable display of CSR <pre><code>Certificate Request:\n    Data:\n        Version: 1 (0x0)\n        Subject: C = US, O = IBM WSC IBM Z and LinuxONE, CN = SE-enabled HPVS KVM guest for PayNow demo\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n                Public-Key: (4096 bit)\n                Modulus:\n                    00:b0:38:b1:27:ee:a2:9f:35:10:dd:74:b2:46:e6:\n                    b8:2a:e4:c9:7f:7d:b3:1d:45:96:7d:bc:9d:5a:90:\n                    06:64:da:b8:23:73:f3:99:46:54:a3:2a:a8:8e:db:\n                    10:96:7e:de:04:65:81:ee:68:f1:5e:4d:a1:3d:db:\n                    2e:44:3a:ff:e2:fe:60:86:ad:90:b9:91:f1:4b:94:\n                    c9:43:4a:85:56:32:2a:ab:c9:2a:71:de:b7:fc:40:\n                    e2:1b:aa:17:08:3a:65:4a:b8:70:d8:5c:b4:b6:ca:\n                    4f:8d:a1:d0:03:04:20:4e:7e:23:26:20:85:45:e4:\n                    21:ec:bb:f8:38:64:36:6d:7c:a1:8a:d8:af:14:1b:\n                    72:bf:e8:cd:2f:2d:2c:0b:5a:39:4e:53:41:f8:a0:\n                    33:91:be:90:64:18:1c:cf:c2:d9:a0:bf:78:db:88:\n                    19:6b:be:0c:10:76:fc:96:fb:01:14:f5:90:8a:4d:\n                    a8:0c:0b:10:29:1d:fb:45:e1:f2:59:b5:33:e5:20:\n                    f8:76:22:c8:4d:d1:55:dc:de:10:79:66:b8:ff:fa:\n                    ee:e4:03:a5:77:9d:50:a1:f2:60:35:84:e1:44:ef:\n                    f4:be:be:a9:1b:17:5e:26:4a:ea:24:7d:ff:80:d2:\n                    d6:95:4f:1b:b6:5e:22:c6:f2:81:17:bb:fe:ce:f6:\n                    44:29:79:4e:ad:76:04:db:a7:8d:a4:db:8c:e3:cd:\n                    bf:48:37:99:4c:1c:e0:26:0f:9f:8b:a4:1f:48:71:\n                    44:d0:5f:ae:c6:93:83:ab:b8:7b:7b:b8:f3:1d:f1:\n                    7d:34:3b:d5:32:f0:74:d9:ee:0b:cd:e7:a9:54:49:\n                    2b:23:dc:1a:57:ae:a3:03:d8:9c:47:14:75:0c:47:\n                    c6:be:e3:84:61:e7:15:b8:fe:0b:5f:53:a0:f6:a8:\n                    92:e4:2c:c9:51:43:de:3f:be:0f:a6:c7:44:1f:81:\n                    c9:c0:9d:d3:3a:42:2f:b0:52:59:47:c6:da:96:93:\n                    ba:e7:11:f4:dd:ba:75:46:86:b5:ef:ee:49:34:92:\n                    36:03:32:00:99:71:ed:83:1a:cd:3f:e3:79:7b:ee:\n                    04:49:59:aa:01:ce:4d:67:0e:0f:88:e6:62:82:1e:\n                    0b:07:01:cf:74:38:20:7b:0d:69:f5:2e:09:e5:84:\n                    20:f3:82:15:7f:a4:0d:ae:35:da:de:f2:a9:30:6e:\n                    3e:e3:72:26:b3:18:10:6c:d7:df:4c:fc:bf:e3:33:\n                    8c:c6:e3:83:04:db:c9:a9:a8:41:d2:97:be:a0:ec:\n                    bd:f1:89:18:eb:c5:e7:0b:fc:47:30:c8:e1:cd:e6:\n                    54:cd:f1:e7:c3:23:51:48:4f:fd:89:49:43:6d:96:\n                    e0:cc:69\n                Exponent: 65537 (0x10001)\n        Attributes:\n            (none)\n            Requested Extensions:\n    Signature Algorithm: sha256WithRSAEncryption\n    Signature Value:\n        8d:0b:7b:fd:eb:6b:04:85:4f:b6:a8:81:8f:03:77:aa:26:7d:\n        58:44:3a:af:1b:de:fe:73:52:38:7c:8b:e9:2d:47:34:93:31:\n        9d:04:0b:08:3a:3c:92:72:cf:60:c6:3b:83:6c:9a:8d:7b:08:\n        4b:13:44:8b:3c:14:58:f7:b6:26:8c:c8:d5:29:f7:f8:fb:98:\n        a6:9f:78:6a:9a:f4:10:88:16:55:b8:83:ee:7d:1b:95:4c:02:\n        77:10:9c:ca:61:01:c7:33:7f:65:81:6e:5e:18:25:a7:68:26:\n        e0:5e:b5:6d:89:00:31:ed:21:bf:32:c8:13:4b:00:c6:a3:b5:\n        5f:4d:13:4c:86:51:31:59:02:92:fd:88:30:3a:1f:ac:da:8b:\n        82:25:b2:3d:7e:1d:1f:e3:55:aa:7a:26:1f:85:b6:86:87:34:\n        9a:36:5e:55:0b:a9:6b:dd:77:56:4f:54:3e:27:ec:ac:a7:aa:\n        ea:bb:86:40:a2:e8:af:88:77:5b:41:ec:42:0f:06:1e:7a:36:\n        85:5f:36:14:d4:02:30:3c:27:8d:85:61:0c:93:83:a0:0d:cd:\n        e7:c3:ac:02:d9:49:2e:58:a5:a1:24:33:56:a6:6c:e1:dc:dc:\n        5b:11:32:65:84:08:70:7e:b2:52:2f:34:5e:83:46:45:8e:91:\n        dc:4a:2d:31:2d:3e:3a:4a:03:a2:c4:02:d9:7f:6a:89:42:10:\n        da:a4:7a:24:c2:2a:b5:fb:25:c8:1b:45:5f:f1:85:91:ca:0a:\n        44:74:8f:60:44:86:e5:49:ab:d9:d1:d8:fa:0c:6d:1f:a8:7c:\n        7c:6f:3f:66:0b:d9:46:5a:5c:4d:6e:79:7a:c2:eb:d2:02:a9:\n        80:1e:66:53:b9:fd:5d:cf:6e:86:e7:58:7f:a4:74:31:cd:9f:\n        b6:c2:b0:24:69:70:2f:9e:6e:4f:2d:74:53:8b:15:74:6c:08:\n        bd:f0:b9:d2:e4:e0:a4:14:cf:b1:77:4d:6d:88:8a:ee:c7:6c:\n        4b:15:c9:91:85:7d:a2:fa:cd:10:27:b3:27:fc:3b:f2:d1:86:\n        57:33:0d:27:02:f2:c6:ab:46:8e:00:de:88:1f:59:d0:fd:6f:\n        30:39:94:ba:af:17:89:37:df:0d:9e:1a:a7:d6:49:de:f5:40:\n        61:e3:fa:52:70:3d:57:76:9f:fa:15:30:be:64:85:27:61:b0:\n        02:9f:f6:20:c3:2d:1a:84:44:48:f6:08:db:f8:80:b9:ea:38:\n        16:52:fe:2a:c0:f1:d9:8f:80:37:9f:fd:e2:ec:1e:99:c3:01:\n        2d:b6:11:dd:5a:29:c8:02:2c:aa:d7:3f:78:c5:f2:fe:29:d7:\n        98:f4:d1:1d:7e:9e:5d:8d\n</code></pre> </li> <li> <p>Time to mint the certificate</p> <p>Due diligence check</p> <p>For the purposes of this lab assume you've done a background check on the customer, checked their reviews on Yelp and NextDoor, looked at their Facebook page and LinkedIn profiles.  You're a little concerned with some of those college fraternity party pictures on Facebook, but, what the heck, their check has cleared the bank, so you decide to go ahead and mint the certificate.</p> <pre><code>openssl x509 -req -in client-req.csr \\\n-days 365 -CA ca.crt -CAkey ca-key.pem \\\n-CAcreateserial -out client.crt\n</code></pre> Output from creating the certificate <pre><code>Certificate request self-signature ok\nsubject=C = US, O = IBM WSC IBM Z and LinuxONE, CN = SE-enabled HPVS KVM guest for PayNow demo\n</code></pre> </li> <li> <p>Your quality control department asks you to display the certificate before sending it to the customer:</p> <pre><code>openssl x509 -noout -text -in client.crt </code></pre> It should look similar to this [click to expand] <pre><code>Certificate:\n    Data:\n        Version: 1 (0x0)\n        Serial Number:\n            29:4a:dd:c7:66:81:ab:5a:1d:bb:20:76:a0:25:34:90:21:93:40:6b\n        Signature Algorithm: sha256WithRSAEncryption\n        Issuer: C = US, O = IBM WSC IBM Z and LinuxONE, CN = CA for rsyslog for SE-enabled KVM guests\n        Validity\n            Not Before: Feb 14 01:58:14 2023 GMT\n            Not After : Feb 14 01:58:14 2024 GMT\n        Subject: C = US, O = IBM WSC IBM Z and LinuxONE, CN = SE-enabled HPVS KVM guest for PayNow demo\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n                Public-Key: (4096 bit)\n                Modulus:\n                    00:b0:38:b1:27:ee:a2:9f:35:10:dd:74:b2:46:e6:\n                    b8:2a:e4:c9:7f:7d:b3:1d:45:96:7d:bc:9d:5a:90:\n                    06:64:da:b8:23:73:f3:99:46:54:a3:2a:a8:8e:db:\n                    10:96:7e:de:04:65:81:ee:68:f1:5e:4d:a1:3d:db:\n                    2e:44:3a:ff:e2:fe:60:86:ad:90:b9:91:f1:4b:94:\n                    c9:43:4a:85:56:32:2a:ab:c9:2a:71:de:b7:fc:40:\n                    e2:1b:aa:17:08:3a:65:4a:b8:70:d8:5c:b4:b6:ca:\n                    4f:8d:a1:d0:03:04:20:4e:7e:23:26:20:85:45:e4:\n                    21:ec:bb:f8:38:64:36:6d:7c:a1:8a:d8:af:14:1b:\n                    72:bf:e8:cd:2f:2d:2c:0b:5a:39:4e:53:41:f8:a0:\n                    33:91:be:90:64:18:1c:cf:c2:d9:a0:bf:78:db:88:\n                    19:6b:be:0c:10:76:fc:96:fb:01:14:f5:90:8a:4d:\n                    a8:0c:0b:10:29:1d:fb:45:e1:f2:59:b5:33:e5:20:\n                    f8:76:22:c8:4d:d1:55:dc:de:10:79:66:b8:ff:fa:\n                    ee:e4:03:a5:77:9d:50:a1:f2:60:35:84:e1:44:ef:\n                    f4:be:be:a9:1b:17:5e:26:4a:ea:24:7d:ff:80:d2:\n                    d6:95:4f:1b:b6:5e:22:c6:f2:81:17:bb:fe:ce:f6:\n                    44:29:79:4e:ad:76:04:db:a7:8d:a4:db:8c:e3:cd:\n                    bf:48:37:99:4c:1c:e0:26:0f:9f:8b:a4:1f:48:71:\n                    44:d0:5f:ae:c6:93:83:ab:b8:7b:7b:b8:f3:1d:f1:\n                    7d:34:3b:d5:32:f0:74:d9:ee:0b:cd:e7:a9:54:49:\n                    2b:23:dc:1a:57:ae:a3:03:d8:9c:47:14:75:0c:47:\n                    c6:be:e3:84:61:e7:15:b8:fe:0b:5f:53:a0:f6:a8:\n                    92:e4:2c:c9:51:43:de:3f:be:0f:a6:c7:44:1f:81:\n                    c9:c0:9d:d3:3a:42:2f:b0:52:59:47:c6:da:96:93:\n                    ba:e7:11:f4:dd:ba:75:46:86:b5:ef:ee:49:34:92:\n                    36:03:32:00:99:71:ed:83:1a:cd:3f:e3:79:7b:ee:\n                    04:49:59:aa:01:ce:4d:67:0e:0f:88:e6:62:82:1e:\n                    0b:07:01:cf:74:38:20:7b:0d:69:f5:2e:09:e5:84:\n                    20:f3:82:15:7f:a4:0d:ae:35:da:de:f2:a9:30:6e:\n                    3e:e3:72:26:b3:18:10:6c:d7:df:4c:fc:bf:e3:33:\n                    8c:c6:e3:83:04:db:c9:a9:a8:41:d2:97:be:a0:ec:\n                    bd:f1:89:18:eb:c5:e7:0b:fc:47:30:c8:e1:cd:e6:\n                    54:cd:f1:e7:c3:23:51:48:4f:fd:89:49:43:6d:96:\n                    e0:cc:69\n                Exponent: 65537 (0x10001)\n    Signature Algorithm: sha256WithRSAEncryption\n    Signature Value:\n        9f:41:62:18:0f:db:0a:84:f6:59:bc:cd:22:e4:73:d6:18:b0:\n        d0:4e:2a:da:8f:5c:46:06:f1:80:f3:4b:5d:cf:fe:a2:a3:97:\n        cc:bd:96:8e:d2:d4:58:ab:ac:56:dd:6f:12:3b:52:a8:df:e5:\n        4b:26:8e:92:b3:ed:28:9a:c3:28:6d:8b:f9:13:b0:01:fa:ed:\n        8f:48:08:08:07:ac:8f:61:00:fc:53:41:9e:d2:53:c5:b8:d7:\n        f4:f2:c9:cc:87:58:2d:48:f3:34:be:fe:0d:dc:9e:b6:11:74:\n        18:da:92:db:db:b3:c6:4f:10:63:6c:4c:fb:5f:86:36:9a:a8:\n        58:a9:d3:d9:7c:e0:8d:2f:96:f3:64:85:bf:8d:39:28:d2:06:\n        8b:63:93:d6:42:e3:ad:6d:5b:2e:d3:5a:3d:3c:af:1e:a2:61:\n        a0:d7:c7:a0:4f:b7:16:f1:3b:94:44:23:d8:16:6f:d7:38:36:\n        84:10:31:ac:e7:17:43:2a:24:04:26:5b:46:50:03:05:7c:8d:\n        cc:77:f5:c1:c1:e3:a2:04:4a:6d:7c:b2:c7:1e:e3:68:b0:4e:\n        24:92:63:dd:bd:87:3c:af:8c:63:a5:ea:2f:41:90:67:79:e3:\n        31:89:41:54:be:aa:44:89:45:65:85:2e:5e:b9:8c:af:7c:7e:\n        0f:08:9a:9b:97:7c:6f:fc:9f:30:e8:0c:30:c4:be:7a:0c:7d:\n        d0:45:71:f2:a7:35:c3:f9:f1:b7:2c:9e:1d:a1:da:3b:70:59:\n        5b:05:93:a3:fc:59:41:c5:db:bf:0f:20:ec:15:ef:64:61:7e:\n        52:3b:6a:a1:69:0b:73:93:52:a4:a3:79:ca:b3:0c:b8:cd:2b:\n        59:b5:19:03:2e:21:b8:b5:d3:8d:05:2e:d6:0d:b0:9a:7d:e9:\n        f9:e7:2b:96:3a:a5:e3:05:b6:d8:0a:e2:ea:2f:b0:02:42:ba:\n        a5:9c:1d:d8:29:7f:3b:bd:7c:73:1a:4a:ae:ca:3a:1d:50:16:\n        3a:42:3c:0c:23:6a:15:ed:57:01:88:f3:dc:b7:e3:3e:55:48:\n        31:07:4f:38:9c:dc:10:71:e8:8c:82:d3:9e:a6:97:ca:70:20:\n        e9:70:31:b2:46:09:79:03:20:93:b0:16:af:07:67:eb:0c:4f:\n        b0:c0:a9:e8:eb:bc:ab:74:37:93:76:89:92:82:f3:48:a5:a1:\n        16:62:39:2d:d5:79:67:e2:ea:6e:a9:6e:40:e1:7f:da:01:df:\n        f0:4f:6f:a0:36:80:ae:ab:a2:4d:07:6e:ba:14:bf:85:82:50:\n        e1:3d:df:64:bc:91:3d:60:c4:90:8c:3b:6f:0f:11:31:a6:5f:\n        4f:36:5a:69:04:05:88:b5\n</code></pre> </li> <li> <p>Now you send the certificate to the customer:</p> <pre><code>scp client.crt ${StudentID}@192.168.22.64:./rsyslogClientWork/.\n</code></pre> <p>You may be prompted to type yes before connecting and you may be asked to enter an instructor-provided password, as shown in the example below:</p> Example prompt and output from sending file <pre><code>The authenticity of host '192.168.22.64 (192.168.22.64)' can't be established.\nED25519 key fingerprint is SHA256:IJQFhwQnu7GDWPZmz+ICLIIld9FBLJcD+anb2Bu9y7w.\nThis key is not known by any other names\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nWarning: Permanently added '192.168.22.64' (ED25519) to the list of known hosts.\nstudent02@192.168.22.64's password: \nclient.crt                                                              100% 1907     9.7MB/s   00:00 \n</code></pre> </li> <li> <p>Now switch back to your terminal tab or window for your session on the RHEL host.  A gentle reminder of what that tab or window looks like:</p> <p></p> </li> <li> <p>If you are doing the lab in one sitting, in order, then you are still logged in on the RHEL host.  If you need to login for any reason the command is <code>ssh -l ${StudentID} 192.168.22.64</code>.  Steps 15 and 16 will be performed on the RHEL 8.5 host.</p> </li> <li> <p>Switch to the directory where the CA \"sent\" your new certificate and list the files:</p> <pre><code>cd ${HOME}/rsyslogClientWork/ &amp;&amp; ls -ltr\n</code></pre> File listing shows your client certificate (client.crt) <pre><code>total 16\n-rw------- 1 student02 hpvs_students 3247 Feb 13 20:42 client-key.pem\n-rw-r--r-- 1 student02 hpvs_students  192 Feb 13 20:44 client.cnf\n-rw-r--r-- 1 student02 hpvs_students 1691 Feb 13 20:45 client-req.csr\n-rw-r--r-- 1 student02 hpvs_students 1907 Feb 13 21:06 client.crt\n</code></pre> </li> <li> <p>Display your certificate in human-readable form to make sure your CA did their job correctly:</p> <pre><code>openssl x509 -noout -text -issuer -subject -in client.crt\n</code></pre> Example display of certificate <pre><code>Certificate:\n    Data:\n        Version: 1 (0x0)\n        Serial Number:\n            29:4a:dd:c7:66:81:ab:5a:1d:bb:20:76:a0:25:34:90:21:93:40:6b\n        Signature Algorithm: sha256WithRSAEncryption\n        Issuer: C = US, O = IBM WSC IBM Z and LinuxONE, CN = CA for rsyslog for SE-enabled KVM guests\n        Validity\n            Not Before: Feb 14 01:58:14 2023 GMT\n            Not After : Feb 14 01:58:14 2024 GMT\n        Subject: C = US, O = IBM WSC IBM Z and LinuxONE, CN = SE-enabled HPVS KVM guest for PayNow demo\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n                RSA Public-Key: (4096 bit)\n                Modulus:\n                    00:b0:38:b1:27:ee:a2:9f:35:10:dd:74:b2:46:e6:\n                    b8:2a:e4:c9:7f:7d:b3:1d:45:96:7d:bc:9d:5a:90:\n                    06:64:da:b8:23:73:f3:99:46:54:a3:2a:a8:8e:db:\n                    10:96:7e:de:04:65:81:ee:68:f1:5e:4d:a1:3d:db:\n                    2e:44:3a:ff:e2:fe:60:86:ad:90:b9:91:f1:4b:94:\n                    c9:43:4a:85:56:32:2a:ab:c9:2a:71:de:b7:fc:40:\n                    e2:1b:aa:17:08:3a:65:4a:b8:70:d8:5c:b4:b6:ca:\n                    4f:8d:a1:d0:03:04:20:4e:7e:23:26:20:85:45:e4:\n                    21:ec:bb:f8:38:64:36:6d:7c:a1:8a:d8:af:14:1b:\n                    72:bf:e8:cd:2f:2d:2c:0b:5a:39:4e:53:41:f8:a0:\n                    33:91:be:90:64:18:1c:cf:c2:d9:a0:bf:78:db:88:\n                    19:6b:be:0c:10:76:fc:96:fb:01:14:f5:90:8a:4d:\n                    a8:0c:0b:10:29:1d:fb:45:e1:f2:59:b5:33:e5:20:\n                    f8:76:22:c8:4d:d1:55:dc:de:10:79:66:b8:ff:fa:\n                    ee:e4:03:a5:77:9d:50:a1:f2:60:35:84:e1:44:ef:\n                    f4:be:be:a9:1b:17:5e:26:4a:ea:24:7d:ff:80:d2:\n                    d6:95:4f:1b:b6:5e:22:c6:f2:81:17:bb:fe:ce:f6:\n                    44:29:79:4e:ad:76:04:db:a7:8d:a4:db:8c:e3:cd:\n                    bf:48:37:99:4c:1c:e0:26:0f:9f:8b:a4:1f:48:71:\n                    44:d0:5f:ae:c6:93:83:ab:b8:7b:7b:b8:f3:1d:f1:\n                    7d:34:3b:d5:32:f0:74:d9:ee:0b:cd:e7:a9:54:49:\n                    2b:23:dc:1a:57:ae:a3:03:d8:9c:47:14:75:0c:47:\n                    c6:be:e3:84:61:e7:15:b8:fe:0b:5f:53:a0:f6:a8:\n                    92:e4:2c:c9:51:43:de:3f:be:0f:a6:c7:44:1f:81:\n                    c9:c0:9d:d3:3a:42:2f:b0:52:59:47:c6:da:96:93:\n                    ba:e7:11:f4:dd:ba:75:46:86:b5:ef:ee:49:34:92:\n                    36:03:32:00:99:71:ed:83:1a:cd:3f:e3:79:7b:ee:\n                    04:49:59:aa:01:ce:4d:67:0e:0f:88:e6:62:82:1e:\n                    0b:07:01:cf:74:38:20:7b:0d:69:f5:2e:09:e5:84:\n                    20:f3:82:15:7f:a4:0d:ae:35:da:de:f2:a9:30:6e:\n                    3e:e3:72:26:b3:18:10:6c:d7:df:4c:fc:bf:e3:33:\n                    8c:c6:e3:83:04:db:c9:a9:a8:41:d2:97:be:a0:ec:\n                    bd:f1:89:18:eb:c5:e7:0b:fc:47:30:c8:e1:cd:e6:\n                    54:cd:f1:e7:c3:23:51:48:4f:fd:89:49:43:6d:96:\n                    e0:cc:69\n                Exponent: 65537 (0x10001)\n    Signature Algorithm: sha256WithRSAEncryption\n        9f:41:62:18:0f:db:0a:84:f6:59:bc:cd:22:e4:73:d6:18:b0:\n        d0:4e:2a:da:8f:5c:46:06:f1:80:f3:4b:5d:cf:fe:a2:a3:97:\n        cc:bd:96:8e:d2:d4:58:ab:ac:56:dd:6f:12:3b:52:a8:df:e5:\n        4b:26:8e:92:b3:ed:28:9a:c3:28:6d:8b:f9:13:b0:01:fa:ed:\n        8f:48:08:08:07:ac:8f:61:00:fc:53:41:9e:d2:53:c5:b8:d7:\n        f4:f2:c9:cc:87:58:2d:48:f3:34:be:fe:0d:dc:9e:b6:11:74:\n        18:da:92:db:db:b3:c6:4f:10:63:6c:4c:fb:5f:86:36:9a:a8:\n        58:a9:d3:d9:7c:e0:8d:2f:96:f3:64:85:bf:8d:39:28:d2:06:\n        8b:63:93:d6:42:e3:ad:6d:5b:2e:d3:5a:3d:3c:af:1e:a2:61:\n        a0:d7:c7:a0:4f:b7:16:f1:3b:94:44:23:d8:16:6f:d7:38:36:\n        84:10:31:ac:e7:17:43:2a:24:04:26:5b:46:50:03:05:7c:8d:\n        cc:77:f5:c1:c1:e3:a2:04:4a:6d:7c:b2:c7:1e:e3:68:b0:4e:\n        24:92:63:dd:bd:87:3c:af:8c:63:a5:ea:2f:41:90:67:79:e3:\n        31:89:41:54:be:aa:44:89:45:65:85:2e:5e:b9:8c:af:7c:7e:\n        0f:08:9a:9b:97:7c:6f:fc:9f:30:e8:0c:30:c4:be:7a:0c:7d:\n        d0:45:71:f2:a7:35:c3:f9:f1:b7:2c:9e:1d:a1:da:3b:70:59:\n        5b:05:93:a3:fc:59:41:c5:db:bf:0f:20:ec:15:ef:64:61:7e:\n        52:3b:6a:a1:69:0b:73:93:52:a4:a3:79:ca:b3:0c:b8:cd:2b:\n        59:b5:19:03:2e:21:b8:b5:d3:8d:05:2e:d6:0d:b0:9a:7d:e9:\n        f9:e7:2b:96:3a:a5:e3:05:b6:d8:0a:e2:ea:2f:b0:02:42:ba:\n        a5:9c:1d:d8:29:7f:3b:bd:7c:73:1a:4a:ae:ca:3a:1d:50:16:\n        3a:42:3c:0c:23:6a:15:ed:57:01:88:f3:dc:b7:e3:3e:55:48:\n        31:07:4f:38:9c:dc:10:71:e8:8c:82:d3:9e:a6:97:ca:70:20:\n        e9:70:31:b2:46:09:79:03:20:93:b0:16:af:07:67:eb:0c:4f:\n        b0:c0:a9:e8:eb:bc:ab:74:37:93:76:89:92:82:f3:48:a5:a1:\n        16:62:39:2d:d5:79:67:e2:ea:6e:a9:6e:40:e1:7f:da:01:df:\n        f0:4f:6f:a0:36:80:ae:ab:a2:4d:07:6e:ba:14:bf:85:82:50:\n        e1:3d:df:64:bc:91:3d:60:c4:90:8c:3b:6f:0f:11:31:a6:5f:\n        4f:36:5a:69:04:05:88:b5\nissuer=C = US, O = IBM WSC IBM Z and LinuxONE, CN = CA for rsyslog for SE-enabled KVM guests\nsubject=C = US, O = IBM WSC IBM Z and LinuxONE, CN = SE-enabled HPVS KVM guest for PayNow demo\n</code></pre> </li> </ol> <p>Click the Next link at the bottom of the page to continue to the next part of the lab, where you will create the contract that HPVS 2.1.6 expects, so that you can run the PayNow demo in your HPVS KVM guest.</p>"},{"location":"lab/paynow/createContract/","title":"Create contract for HPVS guest","text":""},{"location":"lab/paynow/createContract/#overview-of-this-section","title":"Overview of this section","text":"<p>IBM provides the Secure Execution feature on z15 and newer generations of its IBM Z and LinuxONE servers.  Currently, that's z15 and LinuxONE III for the \"z15\" generation and z16 and LinuxONE Emperor 4 for the \"z16\" generation.</p> <p>You could create your own Secure Execution-enabled KVM guests and run a workload in it without Hyper Protect Virtual Servers 2.1.6.  However, there's non-trivial work involved in setting this up.  HPVS 2.1.6 has done that hard work for you, and provided a KVM guest image that will run your application workload as an OCI-compliant (again, think \"Docker\" in the popular vernacular) container within the HPVS 2.1.6 KVM guest.  There is still some work involved in setting up the contract that HPVS 2.1.6 expects- but this is work closer to the application or business level. There is also added value in HPVS 2.1.6 in areas such as:</p> <ul> <li> logging</li> <li> attestation</li> <li> verification during boot</li> <li> encryption</li> <li> persistent disk protection</li> <li> separation of duties</li> </ul> <p>This lab covers the features that are checked in the list above.  (We won't rest on our laurels until we've built this lab out to cover everything under the sun, but, as the saying goes, Rome wasn't built in a day).</p> <p>One of the things we just mentioned in the previous paragraph was separation of duties. In a real world situation, multiple personas could create different portions of the contract:</p> <ul> <li>an application owner deployer might create the workload section of the contract</li> <li>a systems administrator might create the environment section of the contract</li> </ul> <p>Then, you could imagine the following scenario taking place:</p> <ol> <li>application owner can encrypt their piece of the contract such that it can only be decrypted within the HPVS 2.1.6 runtime</li> <li>application owner passes their encrypted piece of the contract to the systems administrator</li> <li>the systems administrator encrypts their own section</li> <li>the systems administrator combines the two sections and signs the resultant contract so that it can be verified by the HPVS 2.1.6 runtime.</li> </ol> <p>Your inquiring mind may say, well that's all well and good, but what about the disk storage of the machine?</p> <p>If your workload requires persistent disk storage (to survive a container restart) then each of the two personas supplies part of a seed that is used in the calculation of an encryption key for the persistent disk. Neither persona has knowledge of the other's part of the seed if it is passed between parties encrypted, so that no human has the ability to decrypt the persistent disk.  The HPVS developers have thought through security very carefully!  </p> <p>Now this lab does not include all of the above features- for example, in this lab we are not using persistent disk storage.  And for this lab, you have and will continue to wear many hats, including both the application owner workload deployer and the system administrator environment deployer, performing many roles that in the \"real world\" are likely to be delegated to multiple individuals.  We are not going to cover attestation in this lab either, but hope to do so in a future lab.</p>"},{"location":"lab/paynow/createContract/#creation-of-directory-structure-for-contract","title":"Creation of directory structure for contract","text":"<p>This section starts where the last section left off- on your session with the RHEL host:</p> <p></p> <p>Switch to your home directory:</p> <pre><code>cd ${HOME}\n</code></pre> <p>Create a directory structure for creating an HPVS 2.1.6 contract:</p> <pre><code>mkdir -p contract/paynow/{environment,workload/play}\n</code></pre> <p>Now see the directory structure you just created:</p> <pre><code>tree contract\n</code></pre> <p>A contract requires a workload section and an environment section, and they each get their own directory. Then the sections are packaged together, and signed, and the signature is added as the third section.  This final result- the contract-  will be stored in your <code>${HOME}/contract/paynow</code> directory.</p>"},{"location":"lab/paynow/createContract/#create-workload-section-of-the-contract","title":"Create workload section of the contract","text":"<p>Switch to your workload directory:</p> <pre><code>cd ${HOME}/contract/paynow/workload\n</code></pre> <p>HPVS expects the contract to specify an OCI container specified by a Docker Compose file or pod descriptor(s).  A Docker Compose file specifies an OCI image to run and other information necessary to configure the resulting container. A pod descriptor works much the same way but Hyper Protect supports using one or more OCI images with a pod descriptor as opposed to one image with a Docker Compose file. Since this makes pod descriptors more versatile, we will be using the new hotness, pod descriptors, in our lab as opposed to the the OG Docker Compose file format. Having said that, both are currently valid. Your workload is the PayNow Demo. You created an OCI image for that on your standard KVM guest earlier in the lab.  In order to allow you to perform the lab without having to have an account at Docker or Quay.io or another image registry service, the instructors have created an OCI image that is hosted in Quay.io and is used for this section of the lab.  This OCI image was created in the exact same way you created the image on your standard KVM guest.  </p>"},{"location":"lab/paynow/createContract/#create-play-subsection","title":"Create play subsection","text":"<p>Switch to the directory that will hold your pod descriptors:</p> <pre><code>cd play\n</code></pre> <p>Play time</p> <p>The pod descriptors use the <code>play</code> subsection which should conjure up thoughts of the <code>podman play kube</code> subcommand.</p> <p>Create the pod descriptor:</p> <pre><code>cat &lt;&lt; EOF &gt; pod.yml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: paynow\nspec:\n  containers:\n  - name: paynow\n    image: quay.io/bsilliman/paynow@sha256:6c0d9c82bd051f4c2641d4ed9d4a3c577075894ad3bf1494f2c742a5751b93d9\n    ports:\n    - containerPort: 8443\n      hostPort: 8443\n  restartPolicy: Always\nEOF\n</code></pre> <p>Notice the value of the image key.  This is the PayNow Demo image created by the instructor and hosted on Red Hat's Quay.io registry service. </p>"},{"location":"lab/paynow/createContract/#add-a-convenience-script-to-create-the-workload-section","title":"Add a convenience script to create the workload section","text":"<p>You are almost finished with the workload section.  One thing to do is to add a convenience script to the workload directory.  This script is not supplied with the product, but is very useful in the creation of the contract.  Create it now and feel free to peruse it but do not run it now. It will be called later by another script.  Comments have been added to help explain what the script does. </p> <p>Switch directories:</p> <pre><code>cd ${HOME}/contract/paynow/workload/\n</code></pre> <p>Create the convenience script:</p> <pre><code>cat &lt;&lt;-EOF &gt; flow.workload\n# Create the workload section of the contract and add the contents in the workload.yaml file.\n\n# # The pod descriptor and all supporting configuration files are assumed to be in the ./play directory\n# There should not be any unnecessary files as they will get tarred up and added to the PLAY_B64 variable\n#\nPLAY_B64=\\$(tar -czv -C play . | base64 -w0)\n\n#\n# This specifies an intermediate file that could be deleted at the end of the script but # is left intact for lab learning purposes-  it is plaintext so keeping it implies that\n# you would have to protect it appropriately.  In production you'll probably want to delete it\n#\nWORKLOAD_PLAIN=./workload.yaml.plaintext\n\n#\n# This specifies a file will be encrypted and signed and is the primary output of this script.  # It is combined with the encrypted and signed environment section that is created by # another script (flow.signature which is one directory level higher)\n# Note: this file will also wind up one directory level higher\n#\nWORKLOAD=workload.yaml\n\necho \"  type: workload\nplay:\narchive: \\${PLAY_B64}\" &gt; \\${WORKLOAD_PLAIN}\n\n#\n# This is the encryption certificate for Hyper Protect Container Runtime and it is\n# provided with the Hyper Protect Virtual Servers v2.1.6 product\n#\nCONTRACT_KEY=/data/lab/hpvs216Certs/ibm-hyper-protect-container-runtime-23.6.2-encrypt.crt\n\n#\n# This variable holds a random password:\n#\nPASSWORD_WORKLOAD=\"\\$(openssl rand 32 | base64 -w0)\"\n\n#\n# This variable holds the output of the command pipe that\n# takes your plaintext workload yaml ($WORKLOAD_PLAIN) and encrypts it using the password that \n# was generated above ($PASSWORD_WORKLOAD) and then base64 encodes this encrypted workload\n#\n# As long as nobody else knows your random password ($PASSWORD_WORKLOAD) your data is safe.  \n# But, the Hyper Protect Container Runtime has to encrypt it, so it needs your password. \n# How will it get that password securely?  Read the next set of comment lines to find out.\n#\nENCRYPTED_WORKLOAD=\"\\$(echo -n \"\\$PASSWORD_WORKLOAD\" | base64 -d | openssl enc -aes-256-cbc -pbkdf2 -pass stdin -in \"\\$WORKLOAD_PLAIN\" | base64 -w0)\"\n\n#\n# This variable provides secure passage of your random password.  How?  \n# It encrypts it with the encryption key of the Hyper Protect Container Runtime (HPCR).\n# (A key that is encrypted by another key is often called a wrapped key).\n# Only the HPCR image has the private key which can decrypt this. It is protected from \n# access from any administrators.  So, malicious actors cannot do anything with this\n# wrapped key, even if they were able to get a hold of it.\n# \n#\nENCRYPTED_WORKLOAD_PASSWORD=\"\\$(echo -n \"\\$PASSWORD_WORKLOAD\" | base64 -d | openssl rsautl -encrypt -inkey \\$CONTRACT_KEY -certin | base64 -w0 )\"\n\n#\n# Use the following command to get the encrypted section of the contract:\n# This variable holds the output of a concatenation of a header, \"hyper-protect-basic\",\n# Your wrapped key, and your encrypted workload. \n#\nWORKLOAD_ENCRYPTED=\"hyper-protect-basic.\\${ENCRYPTED_WORKLOAD_PASSWORD}.\\${ENCRYPTED_WORKLOAD}\"\n\n#\n# The above variable is echoed to the a file the directory one level above\n#\necho \"\\$WORKLOAD_ENCRYPTED\" &gt; ../\\$WORKLOAD\n\n# \n# NOTE: In a production scenario the plaintext workload section would be \n# deleted or stored securely but it has been left here for student perusal.  \n# The filename is workload.yaml.plaintext\n#\nEOF\n</code></pre>"},{"location":"lab/paynow/createContract/#create-environment-section-of-the-contract","title":"Create environment section of the contract","text":"<ol> <li> <p>Change to the directory where you will prepare for environment section of the contract:</p> <pre><code>cd ../environment\n</code></pre> </li> <li> <p>In the environment section of the contract you are going to specify the information in  order to have your HPVS KVM Guest log to the rsyslog service that you configured earlier in the lab.</p> <ol> <li> <p>Create a directory to gather some files you will need for this rsyslog configuration and change to it:</p> <pre><code>mkdir -p rsyslog &amp;&amp; cd rsyslog\n</code></pre> </li> <li> <p>You will need the CA certificate of the rsyslog service that you created on your Ubuntu KVM guest which you can get via scp:</p> <pre><code>scp student@${StudentGuestIP}:rsyslogWork/ca.crt .\n</code></pre> </li> <li> <p>Copy your rsyslog client certificate from your working directory:</p> <pre><code>cp -ipv ${HOME}/rsyslogClientWork/client.crt .\n</code></pre> </li> <li> <p>Convert the client certificate to PKCS#8 format</p> <p>The directory you just copied the client certificate from also has your private key that you need. However, the HPCR image requires this to be in PKCS#8  (Public Key Cryptography Standard #8) format. Therefore you can't just copy it over- you need to convert it to PKCS#8 format:</p> <pre><code>openssl pkcs8 -topk8 -inform PEM -outform PEM -nocrypt \\\n-in ${HOME}/rsyslogClientWork/client-key.pem \\\n-out client-key-pkcs8.pem\n</code></pre> </li> <li> <p>Go back up one directory level:</p> <pre><code>cd .. &amp;&amp; pwd\n</code></pre> </li> <li> <p>We have provided a convenience script to assist in creating the environment section of the contract</p> <p>This script is not supplied with the product, but is very useful in the creation of the contract. Create it now and feel free to peruse it but do not run it now. It will be called later by another script. Comments have been added to help explain what the script does. </p> <pre><code>cat &lt;&lt;-EOF &gt; flow.env\n# Create the env section of the contract and add the contents in the env.yaml file.\n\n#\n# set some file locations at the top of the file here\n#\nRSYSLOG_CA_CRT=\"./rsyslog/ca.crt\"\nRSYSLOG_CLIENT_CRT=\"./rsyslog/client.crt\"\nRSYSLOG_CLIENT_KEY=\"./rsyslog/client-key-pkcs8.pem\"\n\n#\n# This specifies an intermediate file that could be deleted at the end of the script but # is left intact for lab learning purposes-  it is plaintext so keeping it implies that\n# you would have to protect it appropriately.  In production you'll probably want to delete it\n#\nENV_PLAIN=\"./env.yaml.plaintext\"\n\n#\n# This specifies a file will be encrypted and signed and is the primary output of this script.  # It is combined with the encrypted and signed workload section that is created by # another script (flow.signature which is one directory level higher)\n# Note: this file will also wind up one directory level higher\n#\nENV=\"env.yaml\"\n\n#\n# This variable holds the output of taking all the newlines out of the rsyslog CA certificate and\n# replacing them with the \"\\n\" characters.  In other words, a multiple line file is squashed down \n# to one line.  The HPCR runtime image will then convert it back to the multiple line format\n#\nENV_RSYSLOG_SERVER=\\$(awk -vRS=\"\\n\" -vORS=\"\\\\\\\\\\n\" '1' \\${RSYSLOG_CA_CRT})\n\n#\n# This variable holds the output of taking all the newlines out of the client certificate that the\n# HPCR runtime uses for communicating with rsyslog and replacing them with the \"\\n\" characters.\n# In other words, a multiple line file is squashed down to one line. THe HPCR runtime image will \n# then convert it back to the multiple line format\n#\nENV_RSYSLOG_CERT=\\$(awk -vRS=\"\\n\" -vORS=\"\\\\\\\\\\n\" '1' \\${RSYSLOG_CLIENT_CRT})\n\n#\n# This variable holds the output of taking all the newlines out of the client private key that the\n# HPCR runtime uses for communicating with rsyslog and replacing them with the \"\\n\" characters.\n# In other words, a multiple line file is squashed down to one line. THe HPCR runtime image will \n# then convert it back to the multiple line format. Before this all happens, the Private Key is \n# converted to PKCS#8 format\n#\nENV_RSYSLOG_KEY=\\$(awk -vRS=\"\\n\" -vORS=\"\\\\\\\\\\n\" '1'  \\${RSYSLOG_CLIENT_KEY})\n\n\necho \"  type: env\nlogging:\nsyslog:\nhostname: \\\"\\${StudentGuestIP}\\\"\nport: 6514\nserver: \\\"\\${ENV_RSYSLOG_SERVER}\\\"\ncert: \\\"\\${ENV_RSYSLOG_CERT}\\\"\nkey: \\\"\\${ENV_RSYSLOG_KEY}\\\"\" &gt;\\${ENV_PLAIN}\n\n#\n# This command adds the public signing key to the plaintext environment yaml.  This key is used inside \n# the Hyper Protect Container Runtime image to verify the signature over workload and environment sections of\n# the contract. \n#\ncat ./pubSigningKey.yaml &gt;&gt; \\${ENV_PLAIN}\n\n# This is the encryption certificate for Hyper Protect Container Runtime and it is\n# provided with the Hyper Protect Virtual Servers v2.1.6 product\n#\nCONTRACT_KEY=/data/lab/hpvs216Certs/ibm-hyper-protect-container-runtime-23.6.2-encrypt.crt\n\n#\n# This variable holds a random password:\n#\nPASSWORD_ENV=\"\\$(openssl rand 32 | base64 -w0)\"\n\n#\n# This variable holds the output of the command pipe that\n# takes your plaintext environment yaml (\\$ENV_PLAIN) and encrypts it using the password that \n# was generated above (\\$PASSWORD_ENV) and then base64 encodes this encrypted environment yaml\n#\n# As long as nobody else knows your random password (\\$PASSWORD_ENV) your data is safe.  \n# But, the Hyper Protect Container Runtime has to encrypt it, so it needs your password. \n# How will it get that password securely?  Read the next set of comment lines to find out.\n#\nENCRYPTED_ENV=\"\\$(echo -n \"\\$PASSWORD_ENV\" | base64 -d | openssl enc -aes-256-cbc -pbkdf2 -pass stdin -in \"\\$ENV_PLAIN\" | base64 -w0)\"\n\n#\n# This variable provides secure passage for your random password.  How?  \n# It encrypts it with the encryption key of the Hyper Protect Container Runtime (HPCR).\n# (A key that is encrypted by another key is often called a wrapped key).\n# Only the HPCR image has the private key which can decrypt this. It is protected from \n# access from any administrators.  So, malicious actors cannot do anything with this\n# wrapped key, even if they were able to get a hold of it.\n#\nENCRYPTED_ENV_PASSWORD=\"\\$(echo -n \"\\$PASSWORD_ENV\" | base64 -d | openssl rsautl -encrypt -inkey \\$CONTRACT_KEY -certin | base64 -w0 )\"\n\n#\n# Use the following command to get the encrypted environment section of the contract:\n# This variable holds the output of a concatenation of a header, \"hyper-protect-basic\",\n# Your wrapped key, and your encrypted environment yaml.. \n#\nENV_ENCRYPTED=\"hyper-protect-basic.\\${ENCRYPTED_ENV_PASSWORD}.\\${ENCRYPTED_ENV}\"\n#\n# The above variable writes the encrypted environment section to the directory one level above\n#\necho \"\\$ENV_ENCRYPTED\" &gt; ../\\$ENV\nEOF\n</code></pre> </li> </ol> </li> <li> <p>Backup one more directory level:</p> <pre><code>cd ..\n</code></pre> </li> <li> <p>You will create three more files that are convenience scripts, similar to flow.workload and flow.env which you have already created:</p> <ol> <li> <p>The first script will provide some preparation steps.  Create it, peruse it, love it, but don't run it yet:</p> <pre><code>cat &lt;&lt; EOF &gt; flow.prepare\n\n# Use the following command to generate a key pair to sign the contract \nopenssl genrsa -aes128 -passout pass:test1234 -out private.pem 4096\nopenssl rsa -in private.pem -passin pass:test1234 -pubout -out public.pem\n\n# The following command is an example of how you can get the signing key:\nkey=\\$(awk -vRS=\"\\n\" -vORS=\"\\\\\\\\\\n\" '1' public.pem)\necho \"  signingKey: \\\"\\${key%\\\\\\\\n}\\\"\" &gt; environment/pubSigningKey.yaml\nEOF\n</code></pre> </li> <li> <p>Create the second script which signs the concatenated workload and environment sections of the contract and then appends the signature as the third and final element of the contract.  Don't run it yet!</p> <pre><code>cat &lt;&lt; EOF &gt; flow.signature\n# combine workload and environment\ncat workload.yaml env.yaml | tr -d '\\n' &gt; contract.yaml\n\n# Sign the combination from workload and env being approved\necho \\$( cat contract.yaml | openssl dgst -sha256 -sign private.pem -passin pass:test1234 | openssl enc -base64) | tr -d ' ' &gt; signature.yaml\n\n# Create user data and add signature:\necho \"workload: \\$(cat workload.yaml)\nenv: \\$(cat env.yaml)\nenvWorkloadSignature: \\$(cat signature.yaml)\" &gt; user_data.yaml\n\necho \"\"\necho \"import \\`pwd\\`/user_data.yaml into User Data or copy and paste from below:\"\necho \"\"\n\ncat user_data.yaml\nEOF\n</code></pre> </li> <li> <p>This script isn't strictly necessary for the lab for reasons stated in the comments in the script, but you can create it anyway:</p> <pre><code>cat &lt;&lt; EOF &gt; flow.clear\n#\n# It isn't really necessary to run this in our lab environment \n# because the other scripts will happily trod on these files \n# as necessary.\n#\n# It is more likely that you would run this after running the\n# other scripts in order to remove these files for security\n# reasons\n#\n# But if you ever had a need to save your signing key pair, \n# you would want to save private.pem somewhere safe.\n# \nrm private.pem public.pem\nrm environment/pubSigningKey.yaml environment/env.yaml.plaintext\nrm workload/workload.yaml.plaintext\nrm env.yaml workload.yaml contract.yaml signature.yaml user_data.yaml\nEOF\n</code></pre> </li> </ol> </li> </ol>"},{"location":"lab/paynow/createContract/#encrypt-and-sign-the-contract","title":"Encrypt and sign the contract","text":"<ol> <li> <p>Create a final helper script which calls the flow.* scripts you created earlier:</p> <pre><code>cat &lt;&lt; EOF &gt; makeContract\n. ./flow.prepare\ncd workload\n. ./flow.workload\ncd ../environment\n. ./flow.env\ncd ..\n. ./flow.signature\n\nEOF\n</code></pre> </li> <li> <p>Now run the helper script that you just created:</p> <pre><code>. ./makeContract\n</code></pre> </li> </ol> <p>The script creates the final contract in a file named <code>user_data.yaml</code>.  It also displays the contents of this file to the screen. At the bottom of the output you will see an envWorkloadSignature key.  If there is a gobbledygook value (base64-encoded text) associated with this key then things went well.</p>"},{"location":"lab/paynow/createContract/#create-the-startup-file-for-the-hpvs-kvm-guest","title":"Create the startup file for the HPVS KVM guest","text":"<ol> <li> <p>Create a copy of the <code>user_data.yaml</code> file that your created</p> <p>The contract that you just created is going to be packaged with some other files into a startup file for your HPVS KVM guest that will run the PayNow demo. One of the files expected is a file named <code>user-data</code> that is just a copy of the <code>user_data.yaml</code> file that was just created</p> <pre><code>cp -ipv user_data.yaml user-data\n</code></pre> <p>Why didn't the script just do the above copy for me</p> <p>We kept user-data intact in case something went wrong in the process, in which case user_data.yaml may be rubbish but at least you haven't trampled on a good user-data that might already be in use.  </p> </li> <li> <p>Create <code>vendor-data</code> which is another file required by the process:</p> <pre><code>cat &lt;&lt; EOF &gt; vendor-data\n#cloud-config\nusers:\n- default\nEOF\n</code></pre> </li> <li> <p>Create <code>meta-data</code> which is also required, and it will have a hostname tailored for your userid:</p> <pre><code>cat &lt;&lt; EOF &gt; meta-data\nlocal-hostname: $(whoami)-paynowdemo\nEOF\n</code></pre> </li> <li> <p>Run this command (RHEL-specific, see product documentation for Ubuntu command) in order to create the startup file, ciiso.iso:</p> <pre><code>genisoimage -output /var/lib/libvirt/images/labs/paynow/$(whoami)/ciiso.iso \\\n-volid cidata -joliet -rock user-data meta-data vendor-data\n</code></pre> <p>Your output will look like this:</p> Output from genisoimage command <pre><code>I: -input-charset not specified, using utf-8 (detected in locale settings)\nTotal translation table size: 0\nTotal rockridge attributes bytes: 414\nTotal directory bytes: 0\nPath table size(bytes): 10\nMax brk space used 0\n203 extents written (0 MB)\n</code></pre> </li> </ol> <p>Please click the Next link at the bottom of the page to continue with the lab.</p>"},{"location":"lab/paynow/createOCIimage/","title":"Create OCI Image","text":"<p>You will be performing this section from your Ubuntu KVM guest. </p> <p>Your window or tab should like like this (unless you customized the profile we provided you):</p> <p></p>"},{"location":"lab/paynow/createOCIimage/#install-docker","title":"Install Docker","text":"<p>You will need to install Docker on your guest.  You can see that it is not currently installed by running the following command:</p> <pre><code>which docker || echo 'Docker is not found'\n</code></pre> Output showing Docker is not found <pre><code>Docker is not found\n</code></pre> <p>See what version of Docker is available to install with this command:</p> <pre><code>sudo apt-cache policy docker.io\n</code></pre> <p>You can see from the output that docker.io is not currently installed and that version 24.0.5 is the candidate, or suggested, version to install:</p> Output showing Docker version to install <pre><code>docker.io:\n  Installed: (none)\n  Candidate: 24.0.5-0ubuntu1~22.04.1\n  Version table:\n     24.0.5-0ubuntu1~22.04.1 500\n        500 http://ports.ubuntu.com/ubuntu-ports jammy-updates/universe s390x Packages\n     20.10.21-0ubuntu1~22.04.3 500\n        500 http://ports.ubuntu.com/ubuntu-ports jammy-security/universe s390x Packages\n     20.10.12-0ubuntu4 500\n        500 http://ports.ubuntu.com/ubuntu-ports jammy/universe s390x Packages\n</code></pre> <p>Install Docker with this command:</p> <pre><code>sudo apt install docker.io\n</code></pre> <p>Type Y and press Return when asked if you want to continue with the installation.</p> Output from Docker installation <pre><code>Reading package lists... Done\nBuilding dependency tree... Done\nReading state information... Done\nThe following additional packages will be installed:\n  bridge-utils containerd dns-root-data dnsmasq-base pigz runc ubuntu-fan\nSuggested packages:\n  ifupdown aufs-tools cgroupfs-mount | cgroup-lite debootstrap docker-doc rinse zfs-fuse | zfsutils\nThe following NEW packages will be installed:\n  bridge-utils containerd dns-root-data dnsmasq-base docker.io pigz runc ubuntu-fan\n0 upgraded, 8 newly installed, 0 to remove and 112 not upgraded.\nNeed to get 54.8 MB of archives.\nAfter this operation, 232 MB of additional disk space will be used.\nDo you want to continue? [Y/n] y\nGet:1 http://ports.ubuntu.com/ubuntu-ports jammy/universe s390x pigz s390x 2.6-1 [67.2 kB]\nGet:2 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x bridge-utils s390x 1.7-1ubuntu3 [34.3 kB]\nGet:3 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x runc s390x 1.1.7-0ubuntu1~22.04.1 [4118 kB]\nGet:4 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x containerd s390x 1.7.2-0ubuntu1~22.04.1 [28.0 MB]\nGet:5 http://ports.ubuntu.com/ubuntu-ports jammy/main s390x dns-root-data all 2021011101 [5256 B]\nGet:6 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main s390x dnsmasq-base s390x 2.86-1.1ubuntu0.3 [348 kB]\nGet:7 http://ports.ubuntu.com/ubuntu-ports jammy-updates/universe s390x docker.io s390x 24.0.5-0ubuntu1~22.04.1 [22.2 MB]\nGet:8 http://ports.ubuntu.com/ubuntu-ports jammy/universe s390x ubuntu-fan all 0.12.16 [35.2 kB]\nFetched 54.8 MB in 2s (24.1 MB/s)      \nPreconfiguring packages ...\nSelecting previously unselected package pigz.\n(Reading database ... 78375 files and directories currently installed.)\nPreparing to unpack .../0-pigz_2.6-1_s390x.deb ...\nUnpacking pigz (2.6-1) ...\nSelecting previously unselected package bridge-utils.\nPreparing to unpack .../1-bridge-utils_1.7-1ubuntu3_s390x.deb ...\nUnpacking bridge-utils (1.7-1ubuntu3) ...\nSelecting previously unselected package runc.\nPreparing to unpack .../2-runc_1.1.7-0ubuntu1~22.04.1_s390x.deb ...\nUnpacking runc (1.1.7-0ubuntu1~22.04.1) ...\nSelecting previously unselected package containerd.\nPreparing to unpack .../3-containerd_1.7.2-0ubuntu1~22.04.1_s390x.deb ...\nUnpacking containerd (1.7.2-0ubuntu1~22.04.1) ...\nSelecting previously unselected package dns-root-data.\nPreparing to unpack .../4-dns-root-data_2021011101_all.deb ...\nUnpacking dns-root-data (2021011101) ...\nSelecting previously unselected package dnsmasq-base.\nPreparing to unpack .../5-dnsmasq-base_2.86-1.1ubuntu0.3_s390x.deb ...\nUnpacking dnsmasq-base (2.86-1.1ubuntu0.3) ...\nSelecting previously unselected package docker.io.\nPreparing to unpack .../6-docker.io_24.0.5-0ubuntu1~22.04.1_s390x.deb ...\nUnpacking docker.io (24.0.5-0ubuntu1~22.04.1) ...\nSelecting previously unselected package ubuntu-fan.\nPreparing to unpack .../7-ubuntu-fan_0.12.16_all.deb ...\nUnpacking ubuntu-fan (0.12.16) ...\nSetting up dnsmasq-base (2.86-1.1ubuntu0.3) ...\nSetting up runc (1.1.7-0ubuntu1~22.04.1) ...\nSetting up dns-root-data (2021011101) ...\nSetting up bridge-utils (1.7-1ubuntu3) ...\nSetting up pigz (2.6-1) ...\nSetting up containerd (1.7.2-0ubuntu1~22.04.1) ...\nCreated symlink /etc/systemd/system/multi-user.target.wants/containerd.service \u2192 /lib/systemd/system/containerd.service.\nSetting up ubuntu-fan (0.12.16) ...\nCreated symlink /etc/systemd/system/multi-user.target.wants/ubuntu-fan.service \u2192 /lib/systemd/system/ubuntu-fan.service.\nSetting up docker.io (24.0.5-0ubuntu1~22.04.1) ...\nAdding group `docker' (GID 121) ...\nDone.\nCreated symlink /etc/systemd/system/multi-user.target.wants/docker.service \u2192 /lib/systemd/system/docker.service.\nCreated symlink /etc/systemd/system/sockets.target.wants/docker.socket \u2192 /lib/systemd/system/docker.socket.\nProcessing triggers for dbus (1.12.20-2ubuntu4.1) ...\nProcessing triggers for man-db (2.10.2-1) ...\nScanning processes...                                                                                                              \nScanning linux images...                                                                                                           \n\nRunning kernel seems to be up-to-date (ABI upgrades are not detected).\n\nNo services need to be restarted.\n\nNo containers need to be restarted.\n\nNo user sessions are running outdated binaries.\n\nNo VM guests are running outdated hypervisor (qemu) binaries on this host.\n</code></pre> <p>Repeat this command from earlier and you'll now see that Docker is installed:</p> <pre><code>sudo apt-cache policy docker.io\n</code></pre> Output showing docker.io is installed <pre><code>docker.io:\n  Installed: 24.0.5-0ubuntu1~22.04.1\n  Candidate: 24.0.5-0ubuntu1~22.04.1\n  Version table:\n *** 24.0.5-0ubuntu1~22.04.1 500\n        500 http://ports.ubuntu.com/ubuntu-ports jammy-updates/universe s390x Packages\n        100 /var/lib/dpkg/status\n     20.10.21-0ubuntu1~22.04.3 500\n        500 http://ports.ubuntu.com/ubuntu-ports jammy-security/universe s390x Packages\n     20.10.12-0ubuntu4 500\n        500 http://ports.ubuntu.com/ubuntu-ports jammy/universe s390x Packages\n</code></pre> <p>Run this command to see where the docker binary lives:</p> <pre><code>which docker &amp;&amp; echo Docker is found!\n</code></pre> Output showing where the docker binary resides <pre><code>/usr/bin/docker\nDocker is found!\n</code></pre> <p>Run this command to display the Docker version:</p> <pre><code>docker version\n</code></pre> <p>Besides noting the version, note the permission error at the bottom of the output:</p> Docker version info, plus a permission error <pre><code>Client:\n Version:           24.0.5\n API version:       1.43\n Go version:        go1.20.3\n Git commit:        24.0.5-0ubuntu1~22.04.1\n Built:             Mon Aug 21 19:50:14 2023\n OS/Arch:           linux/s390x\n Context:           default\npermission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.24/version\": dial unix /var/run/docker.sock: connect: permission denied\n</code></pre> <p>You need to add your userid to the docker group in order to have permission to use Docker:</p> <pre><code>sudo usermod -aG docker student\n</code></pre> <p>(There is no output from the above command when it works).</p> <p>You will need to log out and then log back in in order for your updated permissions to take effect.</p> <p>Log out:</p> <pre><code>exit\n</code></pre> <p>Log back in:</p> <pre><code>ssh -p ${Student_SSH_Port} -l student 192.168.22.64\n</code></pre> <p>Now repeat docker version and you should not see any errors and you should see more information as well:</p> <pre><code>docker version\n</code></pre> Output when your permissions are correct <pre><code>Client:\n Version:           24.0.5\n API version:       1.43\n Go version:        go1.20.3\n Git commit:        24.0.5-0ubuntu1~22.04.1\n Built:             Mon Aug 21 19:50:14 2023\n OS/Arch:           linux/s390x\n Context:           default\n\nServer:\n Engine:\n  Version:          24.0.5\n  API version:      1.43 (minimum version 1.12)\n  Go version:       go1.20.3\n  Git commit:       24.0.5-0ubuntu1~22.04.1\n  Built:            Mon Aug 21 19:50:14 2023\n  OS/Arch:          linux/s390x\n  Experimental:     false\n containerd:\n  Version:          1.7.2\n  GitCommit:        \n runc:\n  Version:          1.1.7-0ubuntu1~22.04.1\n  GitCommit:        \n docker-init:\n  Version:          0.19.0\n  GitCommit: \n</code></pre>"},{"location":"lab/paynow/createOCIimage/#build-oci-image-for-paynow-demo","title":"Build OCI Image for PayNow demo","text":"<p>Switch to the proper directory:</p> <pre><code>cd ~/paynow-website &amp;&amp; pwd\n</code></pre> <p>Before you get started, run this command to see that you currently have no OCI images on your system:</p> <pre><code>docker images\n</code></pre> Expected output <pre><code>REPOSITORY   TAG       IMAGE ID   CREATED   SIZE\n</code></pre> <p>Now, build your OCI image containing the PayNow Demo.</p> <pre><code>docker build -t paynow .\n</code></pre> <p>You can ignore any warning messages. Example output is shown below.</p> Example output <pre><code>DEPRECATED: The legacy builder is deprecated and will be removed in a future release.\n            Install the buildx component to build images with BuildKit:\n            https://docs.docker.com/go/buildx/\n\nSending build context to Docker daemon  2.846MB\nStep 1/7 : FROM node:19\n19: Pulling from library/node\n44d1d02f9172: Pull complete \ne4000487deec: Pull complete \n71c736ce76be: Pull complete \nc037e6c2d715: Pull complete \n294c8876dcdb: Pull complete \n33a351284190: Pull complete \n5ac921848b31: Pull complete \n86b7a0ecd4be: Pull complete \nDigest: sha256:92f06fc13bcc09f1ddc51f6ebf1aa3d21a6532b74f076f224f188bc6b9317570\nStatus: Downloaded newer image for node:19\n ---&gt; f2e8386523b1\nStep 2/7 : WORKDIR /app\n ---&gt; Running in de71bb50b43a\nRemoving intermediate container de71bb50b43a\n ---&gt; 25f7fababad3\nStep 3/7 : COPY app/package*.json ./\n ---&gt; 6c01e8cc8944\nStep 4/7 : RUN npm install\n ---&gt; Running in f4a6ec88dc55\nnpm WARN old lockfile \nnpm WARN old lockfile The package-lock.json file was created with an old version of npm,\nnpm WARN old lockfile so supplemental metadata must be fetched from the registry.\nnpm WARN old lockfile \nnpm WARN old lockfile This is a one-time fix-up, please be patient...\nnpm WARN old lockfile \n\nadded 65 packages, and audited 66 packages in 2s\n\n7 packages are looking for funding\n  run `npm fund` for details\n\nfound 0 vulnerabilities\nnpm notice \nnpm notice New major version of npm available! 9.6.3 -&gt; 10.0.0\nnpm notice Changelog: &lt;https://github.com/npm/cli/releases/tag/v10.0.0&gt;\nnpm notice Run `npm install -g npm@10.0.0` to update!\nnpm notice \nRemoving intermediate container f4a6ec88dc55\n ---&gt; a5b9897de6c8\nStep 5/7 : COPY app/ .\n ---&gt; 50c2cc75996f\nStep 6/7 : EXPOSE 8443\n ---&gt; Running in 6a9c4f0be331\nRemoving intermediate container 6a9c4f0be331\n ---&gt; 306e777a7247\nStep 7/7 : CMD npm start\n ---&gt; Running in c8d6a6817780\nRemoving intermediate container c8d6a6817780\n ---&gt; fd801119534e\nSuccessfully built fd801119534e\nSuccessfully tagged paynow:latest\n</code></pre> <p>Please click the Next link at the lower right to continue in the lab.</p>"},{"location":"lab/paynow/downloadPayNowRepo/","title":"Download PayNow GitHub Repo","text":""},{"location":"lab/paynow/downloadPayNowRepo/#open-a-new-terminal-window-or-tab-with-the-kvm-standard-guest-profile","title":"Open a new terminal window or tab with the KVM Standard Guest profile","text":"<p>From your terminal window with the RHEL Host profile, click on File in the menu bar and then, according to your preferences, select either New Tab or New Window, and, from either choice, select 1. KVM Standard Guest</p> <p>Choosing a new tab offers compactness but you won't be able to see both the RHEL Host tab and the KVM Standard Guest tab at the same time- you have to switch back and forth by clicking the appropriate tab header at the top.  Choosing a new window allows you to drag your windows or otherwise rearrange them so that you can see both windows on your screen.  The choice is yours.  Advanced students may wish to open more windows and tabs but the lab is written with the assumption that you have just one window or tab with the RHEL Host profile and just one window or tab with the KVM Standard Guest profile.</p> <p>Your window or tab should like like this (unless you customized the profile we provided you):</p> <p></p> <p>You're now ready to log in to your Ubuntu KVM guest:</p> <pre><code>ssh -p ${Student_SSH_Port} -l student 192.168.22.64\n</code></pre> Example messages logging into Ubuntu KVM guest <pre><code>silliman@nat-147 ~ % ssh -p ${Student_SSH_Port} -l student 192.168.22.64\n\nLast login: Thu Feb  9 19:32:09 2023 from 192.168.215.147\nstudent@ubuntu2204:~$\n</code></pre> <p>Download the PayNow demo from GitHub:</p> <pre><code>git clone https://github.com/ibm-hyper-protect/paynow-website </code></pre> Example output from git clone <pre><code>Cloning into 'paynow-website'...\nremote: Enumerating objects: 126, done.\nremote: Counting objects: 100% (30/30), done.\nremote: Compressing objects: 100% (26/26), done.\nremote: Total 126 (delta 10), reused 14 (delta 4), pack-reused 96\nReceiving objects: 100% (126/126), 1.53 MiB | 7.89 MiB/s, done.\nResolving deltas: 100% (43/43), done.\n</code></pre> <p>Switch to the paynow-website directory which was just created by the git clone comamand:</p> <pre><code>cd paynow-website &amp;&amp; pwd\n</code></pre> Example output after switching directories <pre><code>/home/student/paynow-website\n</code></pre> <p>You may proceed to the next section of the lab by clicking the Next link at the bottom right of this page.</p>"},{"location":"lab/paynow/findSensitiveData/","title":"Find sensitive data in core dump","text":""},{"location":"lab/paynow/findSensitiveData/#switch-to-your-rhel-host-terminal-session","title":"Switch to your RHEL host terminal session","text":"<p>Switch to your terminal tab or window for your RHEL host session:</p> <p></p> <p>Take a core dump of your KVM guest:</p> <pre><code>sudo /usr/local/bin/gcoreMyGuest.sh\n</code></pre> Sample output from dumping your KVM guest <pre><code>my guest Pid is 3198082\n[New LWP 3198127]\n[New LWP 3198132]\n[New LWP 3198133]\n[New LWP 3198134]\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib64/libthread_db.so.1\".\n0x000003ffae7f11f4 in ppoll () from target:/lib64/libc.so.6\nSaved corefile core.3198082\n[Inferior 1 (process 3198082) detached]\n</code></pre> <p>Optional: Display the contents of the script you just ran if you are curious as to how it worked:</p> <pre><code>cat /usr/local/bin/gcoreMyGuest.sh\n</code></pre> Contents of the gcoreMyGuest.sh script <pre><code>#!/bin/sh\n\nmyPid=$(ps aux | grep qemu | grep guest=${SUDO_USER} | awk '{print $2}')\n\necho my guest Pid is ${myPid}\n\n/opt/rh/gcc-toolset-9/root/usr/bin/gcore ${myPid} 2&gt;/dev/null\n\nchown ${SUDO_USER}:hpvs_students /home/${SUDO_USER}/core.${myPid}\n</code></pre> <p>The script runs with root authority-  it lists processes, grabs the process ID for your Ubuntu KVM guest, takes a core (memory) dump of the process, and then assigns your userid ownership of the dump file.</p> <p>Set an environment variable for the process ID for your Ubuntu KVM guest.  The script you ran did this as well but it was only set for the duration of the script execution, so you need to do it again:</p> <pre><code>myPid=$(ps aux | grep qemu | grep $(whoami) | awk '{print $2}')\necho My Ubuntu KVM Guest process id is ${myPid}\n</code></pre> <p>Pick out sensitive credit information from the core dump:</p> <pre><code>strings core.${myPid} | grep creditCard\n</code></pre> <p>You should recognize the sensitve information that you entered in the PayNow demo app.  This demonstrates how a malicious system administrator on the KVM host can look at sensitive information from a standard KVM guest.  An HPVS 2.1.6 KVM guest, which is protected by Secure Execution, prevents this from occurring, as you will see from completing the remainder of this lab.</p> <p>Please click Next below to continue</p>"},{"location":"lab/paynow/labCleanup/","title":"Clean up the resources you created during the lab","text":"<p>All of the work in this section is performed on the RHEL 8.5 host:</p> <p></p> <p>You should already be logged in to it if you have been following this lab in order.</p>"},{"location":"lab/paynow/labCleanup/#shut-down-your-hpvs-216-guest-that-was-running-paynow-demo","title":"Shut down your HPVS 2.1.6 guest that was running PayNow demo","text":"<pre><code>suffix=$(temp=$(whoami) &amp;&amp; echo ${temp: -2}) ;\\\nsudo virsh shutdown paynowse${suffix} </code></pre>"},{"location":"lab/paynow/labCleanup/#shut-down-your-standard-ubuntu-kvm-guest","title":"Shut down your standard Ubuntu KVM guest","text":"<p>Enter this command to shut down your standard Ubuntu KVM guest:</p> <pre><code>sudo virsh shutdown $(whoami)\n</code></pre>"},{"location":"lab/paynow/labCleanup/#clean-up-the-home-directory-of-your-userid-on-the-rhel-85-host","title":"Clean up the home directory of your userid on the RHEL 8.5 host:","text":"<pre><code>cd ${HOME} &amp;&amp; rm -rf rsyslogClientWork contract core.*\n</code></pre>"},{"location":"lab/paynow/labCleanup/#log-out-of-the-rhel-host","title":"Log out of the RHEL host:","text":"<pre><code>exit\n</code></pre> <p>Thank you for cleaning up and congratulations on finishing the lab!  We hope you enjoyed it and learned from it and we welcome your feedback on how to make it better.</p> <p>There is no need to click the <code>Next</code> link at the bottom as that will take you to a page that is for instructor usage.  Feel free to check it out though, as it will give you insight into the tools that we use to create and update the lab documentation. </p>"},{"location":"lab/paynow/launchHPVSguest/","title":"Launch HPVS guest for PayNow","text":"<p>You will start this section from your login session on the RHEL host. Start from this familiar window or tab:</p> <p></p>"},{"location":"lab/paynow/launchHPVSguest/#launch-the-hpvs-216-kvm-guest","title":"launch the HPVS 2.1.6 KVM guest","text":"<p>This fancy command figures out (and displays) the last two characters of your assigned userid and is used in other commands in this section, so that the lab instructions will work for everybody:</p> <pre><code>suffix=$(temp=$(whoami) &amp;&amp; echo ${temp: -2}) \\\n&amp;&amp; echo Your student suffix is ${suffix}\n</code></pre> <p>You aren't going to change anything here since it's already been defined for you by the instructors, but you can display the definition of your HPVS 2.1.6 KVM guest for the PayNow demo:</p> <pre><code>sudo virsh dumpxml paynowse${suffix}\n</code></pre> Definition of HPVS KVM guest for PayNow Demo <pre><code>&lt;domain type='kvm'&gt;\n  &lt;name&gt;paynowse04&lt;/name&gt;\n  &lt;uuid&gt;2315f8ea-a340-4506-abbf-ae04cf7ea868&lt;/uuid&gt;\n  &lt;metadata&gt;\n    &lt;libosinfo:libosinfo xmlns:libosinfo=\"http://libosinfo.org/xmlns/libvirt/domain/1.0\"&gt;\n      &lt;libosinfo:os id=\"http://ubuntu.com/ubuntu/20.04\"/&gt;\n    &lt;/libosinfo:libosinfo&gt;\n  &lt;/metadata&gt;\n  &lt;memory unit='KiB'&gt;3903488&lt;/memory&gt;\n  &lt;currentMemory unit='KiB'&gt;3903488&lt;/currentMemory&gt;\n  &lt;vcpu placement='static'&gt;2&lt;/vcpu&gt;\n  &lt;os&gt;\n    &lt;type arch='s390x' machine='s390-ccw-virtio-rhel8.2.0'&gt;hvm&lt;/type&gt;\n    &lt;boot dev='hd'/&gt;\n  &lt;/os&gt;\n  &lt;cpu mode='host-model' check='partial'/&gt;\n  &lt;clock offset='utc'/&gt;\n  &lt;on_poweroff&gt;destroy&lt;/on_poweroff&gt;\n  &lt;on_reboot&gt;restart&lt;/on_reboot&gt;\n  &lt;on_crash&gt;destroy&lt;/on_crash&gt;\n  &lt;devices&gt;\n    &lt;emulator&gt;/usr/libexec/qemu-kvm&lt;/emulator&gt;\n    &lt;disk type='file' device='disk'&gt;\n      &lt;driver name='qemu' type='qcow2' iommu='on'/&gt;\n      &lt;source file='/var/lib/libvirt/images/labs/paynow/student04/ibm-hyper-protect-container-runtime-23.6.2.qcow2'/&gt;\n      &lt;backingStore/&gt;\n      &lt;target dev='vda' bus='virtio'/&gt;\n      &lt;address type='ccw' cssid='0xfe' ssid='0x0' devno='0x0000'/&gt;\n    &lt;/disk&gt;\n    &lt;disk type='file' device='disk'&gt;\n      &lt;driver name='qemu' type='raw' cache='none' io='native' iommu='on'/&gt;\n      &lt;source file='/var/lib/libvirt/images/labs/paynow/student04/ciiso.iso'/&gt;\n      &lt;target dev='vdc' bus='virtio'/&gt;\n      &lt;readonly/&gt;\n      &lt;address type='ccw' cssid='0xfe' ssid='0x0' devno='0x0002'/&gt;\n    &lt;/disk&gt;\n    &lt;controller type='pci' index='0' model='pci-root'/&gt;\n    &lt;interface type='network'&gt;\n      &lt;mac address='52:54:00:fc:6c:a8'/&gt;\n      &lt;source network='default'/&gt;\n      &lt;model type='virtio'/&gt;\n      &lt;driver name='vhost' iommu='on'/&gt;\n      &lt;address type='ccw' cssid='0xfe' ssid='0x0' devno='0x0001'/&gt;\n    &lt;/interface&gt;\n    &lt;console type='pty'&gt;\n      &lt;target type='sclp' port='0'/&gt;\n    &lt;/console&gt;\n    &lt;audio id='1' type='none'/&gt;\n    &lt;memballoon model='none'/&gt;\n    &lt;panic model='s390'/&gt;\n  &lt;/devices&gt;\n&lt;/domain&gt;\n</code></pre> <p>Start your HPVS Guest for the PayNow Demo and attach to its console.  Watch the messages carefully.  You should not see any failures:</p> <pre><code>sudo virsh start paynowse${suffix} --console\n</code></pre> This is what success looks like <pre><code>Domain 'paynowse02' started\nConnected to domain 'paynowse02'\nEscape character is ^] (Ctrl + ])\n# HPL11 build:23.8.5 enabler:23.6.0\n# Tue Sep  5 22:22:00 UTC 2023\n# Machine Type/Plant/Serial: 8561/02/31A38\n# create new root partition...\n# encrypt root partition...\n# create root filesystem...\n# write OS to root disk...\n# decrypt user-data...\n2 token decrypted, 0 encrypted token ignored\n# run attestation...\n# set hostname...\n# finish root disk setup...\n# Tue Sep  5 22:22:27 UTC 2023\n# HPL11 build:23.8.5 enabler:23.6.0\n# HPL11099I: bootloader end\nhpcr-dnslookup[890]: HPL14000I: Network connectivity check completed successfully.\nhpcr-logging[1038]: Configuring logging ...\nhpcr-logging[1039]: Version [1.1.145]\nhpcr-logging[1039]: Configuring logging, input [/var/hyperprotect/user-data.decrypted] ...\nhpcr-logging[1039]: HPL01010I: Logging has been setup successfully.\nhpcr-logging[1038]: Logging has been configured\nhpcr-catch-success[1541]: VSI has started successfully.\nhpcr-catch-success[1541]: HPL10001I: Services succeeded -&gt; systemd triggered hpl-catch-success service\n</code></pre> <p>You will have to enter the <code>Ctrl + ]</code> key-combination to break out of the console.</p>"},{"location":"lab/paynow/launchHPVSguest/#verify-that-messages-from-your-hpvs-kvm-guest-are-received-by-rsyslog","title":"verify that messages from your HPVS KVM guest are received by rsyslog","text":"<p>The logging of the HPVS KVM guest is going to the rsyslog service that you configured on your Ubuntu guest, so switch to the terminal tab or window for your KVM standard guest.</p> <p>You should still be comfortably logged in on this tab or window:</p> <p></p> <p>The arguments to the journalctl command here aren't the most elegant in the world, but, unless midnight passed since you started your HPVS KVM guest for PayNow, you will be able to see messages in rsyslog from when you just started up your HPVS KVM guest:</p> <pre><code>journalctl --since today --no-pager\n</code></pre> <p>There are a lot of messages logged, a veritable trove of treasure for the curious.  Here is an example of what you should be able to see:</p> Log messages in rsyslog from starting your HPVS KVM guest for the PayNow demo <pre><code>Sep 05 22:22:29 ubuntu2204 vpcnode[26262]: authentication probe\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Linux version 5.15.0-79-generic (buildd@bos02-s390x-016) (gcc (Ubuntu 11.3.0-1ubuntu1~22.04.1) 11.3.0, GNU ld (GNU Binutils for Ubuntu) 2.38) #86-Ubuntu SMP Mon Jul 10 16:19:54 UTC 2023 (Ubuntu 5.15.0-79.86-generic 5.15.111)\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  setup: Linux is running under KVM in 64-bit mode\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  setup: Relocating AMODE31 section of size 0x00003000\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  setup: The maximum memory size is 3812MB\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  cpu: 2 configured CPUs, 0 standby CPUs\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Write protected kernel read-only data: 18692k\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Zone ranges:\nSep 05 22:22:30 ubuntu2204 kernel[26262]:    DMA      [mem 0x0000000000000000-0x000000007fffffff]\nSep 05 22:22:30 ubuntu2204 kernel[26262]:    Normal   [mem 0x0000000080000000-0x00000000ee3fffff]\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Movable zone start for each node\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Early memory node ranges\nSep 05 22:22:30 ubuntu2204 kernel[26262]:    node   0: [mem 0x0000000000000000-0x00000000ee3fffff]\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Initmem setup node 0 [mem 0x0000000000000000-0x00000000ee3fffff]\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  On node 0, zone Normal: 7168 pages in unavailable ranges\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  percpu: Embedded 32 pages/cpu s91904 r8192 d30976 u131072\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  pcpu-alloc: s91904 r8192 d30976 u131072 alloc=32*4096\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  pcpu-alloc: [0] 0 [0] 1 \nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Built 1 zonelists, mobility grouping on.  Total pages: 960624\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Policy zone: Normal\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Kernel command line: panic=0 blacklist=virtio_rng swiotlb=262144 cloud-init=disabled console=ttyS0 printk.time=0 systemd.getty_auto=0 systemd.firstboot=0 module.sig_enforce=1 quiet loglevel=0 systemd.show_status=0\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Unknown kernel command line parameters \"blacklist=virtio_rng cloud-init=disabled\", will be passed to user space.\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Dentry cache hash table entries: 524288 (order: 10, 4194304 bytes, linear)\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Inode-cache hash table entries: 262144 (order: 9, 2097152 bytes, linear)\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  mem auto-init: stack:off, heap alloc:on, heap free:off\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  software IO TLB: mapped [mem 0x00000000435a4000-0x00000000635a4000] (512MB)\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Memory: 3266284K/3903488K available (11988K kernel code, 3212K rwdata, 6704K rodata, 5200K init, 1252K bss, 637204K reserved, 0K cma-reserved)\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  SLUB: HWalign=256, Order=0-3, MinObjects=0, CPUs=2, Nodes=1\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  ftrace: allocating 34120 entries in 134 pages\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  ftrace: allocated 134 pages with 3 groups\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  rcu: Hierarchical RCU implementation.\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  rcu: #011RCU restricting CPUs from NR_CPUS=512 to nr_cpu_ids=2.\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  #011Rude variant of Tasks RCU enabled.\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  #011Tracing variant of Tasks RCU enabled.\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  rcu: RCU calculated value of scheduler-enlistment delay is 10 jiffies.\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  rcu: Adjusting geometry for rcu_fanout_leaf=16, nr_cpu_ids=2\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  NR_IRQS: 3, nr_irqs: 3, preallocated irqs: 3\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  clocksource: tod: mask: 0xffffffffffffffff max_cycles: 0x3b0a9be803b0a9, max_idle_ns: 1805497147909793 ns\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  random: crng init done\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Console: colour dummy device 80x25\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  printk: console [ttyS0] enabled\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  printk: console [ttysclp0] enabled\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Calibrating delay loop (skipped)... 24038.00 BogoMIPS preset\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  pid_max: default: 32768 minimum: 301\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  LSM: Security Framework initializing\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  landlock: Up and running.\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Yama: becoming mindful.\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  AppArmor: AppArmor initialized\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Mount-cache hash table entries: 8192 (order: 4, 65536 bytes, linear)\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Mountpoint-cache hash table entries: 8192 (order: 4, 65536 bytes, linear)\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  rcu: Hierarchical SRCU implementation.\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  smp: Bringing up secondary CPUs ...\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  smp: Brought up 1 node, 2 CPUs\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  devtmpfs: initialized\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  futex hash table entries: 512 (order: 5, 131072 bytes, linear)\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  NET: Registered PF_NETLINK/PF_ROUTE protocol family\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  audit: initializing netlink subsys (disabled)\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  audit: type=2000 audit(1693952520.204:1): state=initialized audit_enabled=0 res=1\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Spectre V2 mitigation: etokens\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  HugeTLB registered 1.00 MiB page size, pre-allocated 0 pages\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  iommu: Default domain type: Translated \nSep 05 22:22:30 ubuntu2204 kernel[26262]:  iommu: DMA domain TLB invalidation policy: strict mode \nSep 05 22:22:30 ubuntu2204 kernel[26262]:  SCSI subsystem initialized\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  NetLabel: Initializing\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  NetLabel:  domain hash size = 128\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  NetLabel:  protocols = UNLABELED CIPSOv4 CALIPSO\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  NetLabel:  unlabeled traffic allowed by default\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  zpci: PCI is not supported because CPU facilities 69 or 71 are not available\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  VFS: Disk quotas dquot_6.6.0\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  VFS: Dquot-cache hash table entries: 512 (order 0, 4096 bytes)\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  AppArmor: AppArmor Filesystem Enabled\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  NET: Registered PF_INET protocol family\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  IP idents hash table entries: 65536 (order: 7, 524288 bytes, linear)\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  tcp_listen_portaddr_hash hash table entries: 2048 (order: 3, 32768 bytes, linear)\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Table-perturb hash table entries: 65536 (order: 6, 262144 bytes, linear)\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  TCP established hash table entries: 32768 (order: 6, 262144 bytes, linear)\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  TCP bind hash table entries: 32768 (order: 7, 524288 bytes, linear)\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  TCP: Hash tables configured (established 32768 bind 32768)\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  MPTCP token hash table entries: 4096 (order: 4, 98304 bytes, linear)\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  UDP hash table entries: 2048 (order: 4, 65536 bytes, linear)\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  UDP-Lite hash table entries: 2048 (order: 4, 65536 bytes, linear)\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  NET: Registered PF_UNIX/PF_LOCAL protocol family\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  NET: Registered PF_XDP protocol family\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Trying to unpack rootfs image as initramfs...\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  kvm-s390: SIE is not available\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  hypfs: The hardware system does not support hypfs\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Initialise system trusted keyrings\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Key type blacklist registered\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  workingset: timestamp_bits=45 max_order=20 bucket_order=0\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  zbud: loaded\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  squashfs: version 4.0 (2009/01/31) Phillip Lougher\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  fuse: init (API version 7.34)\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  integrity: Platform Keyring initialized\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Key type asymmetric registered\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Asymmetric key parser 'x509' registered\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Block layer SCSI generic (bsg) driver version 0.4 loaded (major 249)\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  io scheduler mq-deadline registered\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  hvc_iucv: The z/VM IUCV HVC device driver cannot be used without z/VM\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  loop: module loaded\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  tun: Universal TUN/TAP device driver, 1.6\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  device-mapper: core: CONFIG_IMA_DISABLE_HTABLE is disabled. Duplicate IMA measurements will not be recorded in the IMA log.\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  device-mapper: uevent: version 1.0.3\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  device-mapper: ioctl: 4.45.0-ioctl (2021-03-22) initialised: dm-devel@redhat.com\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  drop_monitor: Initializing network drop monitor service\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  NET: Registered PF_INET6 protocol family\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Freeing initrd memory: 9828K\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Segment Routing with IPv6\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  In-situ OAM (IOAM) with IPv6\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  NET: Registered PF_PACKET protocol family\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Key type dns_resolver registered\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  cio: Channel measurement facility initialized using format extended (mode autodetected)\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  sclp_sd: Store Data request failed (eq=2, di=3, response=0x40f0, flags=0x00, status=0, rc=-5)\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  ap: The hardware system does not support AP instructions\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  registered taskstats version 1\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Loading compiled-in X.509 certificates\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Loaded X.509 cert 'Build time autogenerated kernel key: 033cfe156234b615233dffd1cb0a66d4b6280b04'\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Loaded X.509 cert 'Canonical Ltd. Live Patch Signing: 14df34d1a87cf37625abec039ef2bf521249b969'\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Loaded X.509 cert 'Canonical Ltd. Kernel Module Signing: 88f752e560a1e0737e31163a466ad7b70a850c19'\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  blacklist: Loading compiled-in revocation X.509 certificates\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Loaded X.509 cert 'Canonical Ltd. Secure Boot Signing: 61482aa2830d0ab2ad5af10b7250da9033ddcef0'\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Loaded X.509 cert 'Canonical Ltd. Secure Boot Signing (2017): 242ade75ac4a15e50d50c84b0d45ff3eae707a03'\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Loaded X.509 cert 'Canonical Ltd. Secure Boot Signing (ESM 2018): 365188c1d374d6b07c3c8f240f8ef722433d6a8b'\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Loaded X.509 cert 'Canonical Ltd. Secure Boot Signing (2019): c0746fd6c5da3ae827864651ad66ae47fe24b3e8'\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Loaded X.509 cert 'Canonical Ltd. Secure Boot Signing (2021 v1): a8d54bbb3825cfb94fa13c9f8a594a195c107b8d'\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Loaded X.509 cert 'Canonical Ltd. Secure Boot Signing (2021 v2): 4cf046892d6fd3c9a5b03f98d845f90851dc6a8c'\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Loaded X.509 cert 'Canonical Ltd. Secure Boot Signing (2021 v3): 100437bb6de6e469b581e61cd66bce3ef4ed53af'\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Loaded X.509 cert 'Canonical Ltd. Secure Boot Signing (Ubuntu Core 2019): c1d57b8f6b743f23ee41f4f7ee292f06eecadfb9'\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  zswap: loaded using pool lzo/zbud\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Key type .fscrypt registered\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Key type fscrypt-provisioning registered\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Key type encrypted registered\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  AppArmor: AppArmor sha1 policy hashing enabled\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  ima: No TPM chip found, activating TPM-bypass!\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Loading compiled-in module X.509 certificates\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Loaded X.509 cert 'Build time autogenerated kernel key: 033cfe156234b615233dffd1cb0a66d4b6280b04'\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  ima: Allocated hash algorithm: sha1\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  ima: No architecture policies found\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  evm: Initialising EVM extended attributes:\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  evm: security.selinux\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  evm: security.SMACK64\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  evm: security.SMACK64EXEC\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  evm: security.SMACK64TRANSMUTE\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  evm: security.SMACK64MMAP\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  evm: security.apparmor\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  evm: security.ima\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  evm: security.capability\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  evm: HMAC attrs: 0x1\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Freeing unused kernel image (initmem) memory: 5200K\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Write protected read-only-after-init data: 136k\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Checked W+X mappings: passed, no unexpected W+X pages found\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Run /init as init process\nSep 05 22:22:30 ubuntu2204 kernel[26262]:    with arguments:\nSep 05 22:22:30 ubuntu2204 kernel[26262]:      /init\nSep 05 22:22:30 ubuntu2204 kernel[26262]:    with environment:\nSep 05 22:22:30 ubuntu2204 kernel[26262]:      HOME=/\nSep 05 22:22:30 ubuntu2204 kernel[26262]:      TERM=linux\nSep 05 22:22:30 ubuntu2204 kernel[26262]:      blacklist=virtio_rng\nSep 05 22:22:30 ubuntu2204 kernel[26262]:      cloud-init=disabled\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  virtio_blk virtio0: [vda] 209715200 512-byte logical blocks (107 GB/100 GiB)\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  GPT:Primary header thinks Alt. header is not at the end of the disk.\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  GPT:8388607 != 209715199\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  GPT:Alternate GPT header not at the end of the disk.\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  GPT:8388607 != 209715199\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  GPT: Use GNU Parted to correct GPT errors.\nSep 05 22:22:30 ubuntu2204 kernel[26262]:   vda: vda1\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  virtio_blk virtio1: [vdb] 760 512-byte logical blocks (389 kB/380 KiB)\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  EXT4-fs (dm-0): mounted filesystem with ordered data mode. Opts: (null). Quota mode: none.\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  EXT4-fs (vda1): mounted filesystem with ordered data mode. Opts: (null). Quota mode: none.\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  ISO 9660 Extensions: Microsoft Joliet Level 3\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  ISO 9660 Extensions: RRIP_1991A\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  EXT4-fs (dm-0): re-mounted. Opts: (null). Quota mode: none.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  systemd 249.11-0ubuntu3.9 running in system mode (+PAM +AUDIT +SELINUX +APPARMOR +IMA +SMACK +SECCOMP +GCRYPT +GNUTLS +OPENSSL +ACL +BLKID +CURL +ELFUTILS +FIDO2 +IDN2 -IDN +IPTC +KMOD +LIBCRYPTSETUP +LIBFDISK +PCRE2 -PWQUALITY -P11KIT -QRENCODE +BZIP2 +LZ4 +XZ +ZLIB +ZSTD -XKBCOMMON +UTMP +SYSVINIT default-hierarchy=unified)\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Detected virtualization kvm.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Detected architecture s390x.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Hostname set to &lt;student02-paynowdemo&gt;.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Initializing machine ID from random generator.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Installed transient /etc/machine-id file.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  /lib/systemd/system/verify-disk-encryption-invoker.service:6: Special user nobody configured, this is not safe!\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  /lib/systemd/system/se-dnslookup.service:10: Special user nobody configured, this is not safe!\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  /lib/systemd/system/hpl-catch-success.service:13: Special user nobody configured, this is not safe!\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  /lib/systemd/system/hpl-catch-failed.service:10: Special user nobody configured, this is not safe!\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  se-registry-auth.service: Found ordering cycle on basic.target/start\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  se-registry-auth.service: Found dependency on sockets.target/start\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  se-registry-auth.service: Found dependency on docker.socket/start\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  se-registry-auth.service: Found dependency on se-registry-auth.service/start\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  se-registry-auth.service: Job sockets.target/start deleted to break ordering cycle starting with se-registry-auth.service/start\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Queued start job for default target Multi-User System.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Created slice Slice /system/modprobe.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Created slice Slice /system/systemd-fsck.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Created slice User and Session Slice.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Started Dispatch Password Requests to Console Directory Watch.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Started Forward Password Requests to Wall Directory Watch.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Set up automount Arbitrary Executable File Formats File System Automount Point.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Reached target Local Encrypted Volumes.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Reached target Path Units.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Reached target Remote File Systems.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Reached target Slice Units.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Reached target Swaps.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Reached target Local Verity Protected Volumes.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Listening on Syslog Socket.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Listening on fsck to fsckd communication Socket.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Listening on initctl Compatibility Named Pipe.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Listening on Journal Audit Socket.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Listening on Journal Socket (/dev/log).\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Listening on Journal Socket.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Listening on Network Service Netlink Socket.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Listening on udev Control Socket.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Listening on udev Kernel Socket.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Mounting Huge Pages File System...\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Mounting POSIX Message Queue File System...\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Mounting Kernel Debug File System...\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Mounting Kernel Trace File System...\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting Journal Service...\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting Set the console keyboard layout...\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting Create List of Static Device Nodes...\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting Load Kernel Module chromeos_pstore...\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting Load Kernel Module configfs...\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting Load Kernel Module drm...\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting Load Kernel Module efi_pstore...\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting Load Kernel Module fuse...\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting Load Kernel Module pstore_blk...\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting Load Kernel Module pstore_zone...\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting Load Kernel Module ramoops...\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Condition check resulted in OpenVSwitch configuration for cleanup being skipped.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting File System Check on Root Device...\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting Load Kernel Modules...\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting Coldplug All udev Devices...\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Mounted Huge Pages File System.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Mounted POSIX Message Queue File System.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Mounted Kernel Debug File System.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Mounted Kernel Trace File System.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Finished Create List of Static Device Nodes.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  modprobe@chromeos_pstore.service: Deactivated successfully.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Finished Load Kernel Module chromeos_pstore.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  modprobe@configfs.service: Deactivated successfully.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Finished Load Kernel Module configfs.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  modprobe@fuse.service: Deactivated successfully.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Finished Load Kernel Module fuse.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  modprobe@pstore_zone.service: Deactivated successfully.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Finished Load Kernel Module pstore_zone.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Mounting FUSE Control File System...\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Mounting Kernel Configuration File System...\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Finished Load Kernel Modules.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Mounted FUSE Control File System.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Mounted Kernel Configuration File System.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting Apply Kernel Variables...\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  modprobe@pstore_blk.service: Deactivated successfully.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Finished Load Kernel Module pstore_blk.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  modprobe@ramoops.service: Deactivated successfully.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Finished Load Kernel Module ramoops.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  modprobe@efi_pstore.service: Deactivated successfully.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Finished Load Kernel Module efi_pstore.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Finished Coldplug All udev Devices.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Started File System Check Daemon to report status.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Finished Apply Kernel Variables.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Finished File System Check on Root Device.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting Remount Root and Kernel File Systems...\nSep 05 22:22:30 ubuntu2204 systemd-journald[26262]:  Journal started\nSep 05 22:22:30 ubuntu2204 systemd-journald[26262]:  Runtime Journal (/run/log/journal/96ad71740ae743c79acd51c6f69413fb) is 4.0M, max 32.0M, 28.0M free.\nSep 05 22:22:30 ubuntu2204 systemd-fsck[26262]:  /dev/mapper/luks-655145dd-f4d0-4127-93ce-e1906a668299: clean, 26377/6291456 files, 808668/25161728 blocks\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Started Journal Service.\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  EXT4-fs (dm-0): re-mounted. Opts: errors=remount-ro. Quota mode: none.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Finished Remount Root and Kernel File Systems.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  modprobe@drm.service: Deactivated successfully.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Finished Load Kernel Module drm.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting Flush Journal to Persistent Storage...\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Condition check resulted in Platform Persistent Storage Archival being skipped.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting Load/Save Random Seed...\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting Create System Users...\nSep 05 22:22:30 ubuntu2204 systemd-journald[26262]:  Time spent on flushing to /var/log/journal/96ad71740ae743c79acd51c6f69413fb is 2.551ms for 269 entries.\nSep 05 22:22:30 ubuntu2204 systemd-journald[26262]:  System Journal (/var/log/journal/96ad71740ae743c79acd51c6f69413fb) is 8.0M, max 4.0G, 3.9G free.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Finished Create System Users.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting Create Static Device Nodes in /dev...\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Finished Load/Save Random Seed.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Condition check resulted in First Boot Complete being skipped.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Finished Create Static Device Nodes in /dev.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting Rule-based Manager for Device Events and Files...\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Finished Flush Journal to Persistent Storage.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Finished Set the console keyboard layout.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Reached target Preparation for Local File Systems.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Started Rule-based Manager for Device Events and Files.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting Network Configuration...\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  VFIO - User Level meta-driver version: 0.3\nSep 05 22:22:30 ubuntu2204 systemd-networkd[26262]:  lo: Link UP\nSep 05 22:22:30 ubuntu2204 systemd-networkd[26262]:  lo: Gained carrier\nSep 05 22:22:30 ubuntu2204 systemd-networkd[26262]:  Enumeration completed\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Started Network Configuration.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting Wait for Network to be Configured...\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Finished Wait for Network to be Configured.\nSep 05 22:22:30 ubuntu2204 systemd-udevd[26262]:  Using default interface naming scheme 'v249'.\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  virtio_net virtio2 enc1: renamed from eth0\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Found device /dev/disk/by-uuid/4d7e976d-b69c-48ec-9a8a-a47cd2e28e70.\nSep 05 22:22:30 ubuntu2204 systemd-networkd[26262]:  eth0: Interface name change detected, renamed to enc1.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting File System Check on /dev/disk/by-uuid/4d7e976d-b69c-48ec-9a8a-a47cd2e28e70...\nSep 05 22:22:30 ubuntu2204 systemd-udevd[26262]:  Using default interface naming scheme 'v249'.\nSep 05 22:22:30 ubuntu2204 systemd-networkd[26262]:  enc1: Link UP\nSep 05 22:22:30 ubuntu2204 systemd-fsck[26262]:  /dev/vda1: clean, 13/262144 files, 140195/1048064 blocks\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Finished File System Check on /dev/disk/by-uuid/4d7e976d-b69c-48ec-9a8a-a47cd2e28e70.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Mounting /boot...\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Mounted /boot.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Reached target Local File Systems.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting Load AppArmor profiles...\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting Set console font and keymap...\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  EXT4-fs (vda1): mounted filesystem with ordered data mode. Opts: (null). Quota mode: none.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting Set Up Additional Binary Formats...\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Condition check resulted in Store a System Token in an EFI Variable being skipped.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting Commit a transient machine-id on disk...\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting Create Volatile Files and Directories...\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Finished Set console font and keymap.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  proc-sys-fs-binfmt_misc.automount: Got automount request for /proc/sys/fs/binfmt_misc, triggered by 863 (systemd-binfmt)\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Mounting Arbitrary Executable File Formats File System...\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Mounted Arbitrary Executable File Formats File System.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Finished Set Up Additional Binary Formats.\nSep 05 22:22:30 ubuntu2204 apparmor.systemd[26262]:  Restarting AppArmor\nSep 05 22:22:30 ubuntu2204 apparmor.systemd[26262]:  Reloading AppArmor profiles\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Finished Create Volatile Files and Directories.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting Network Name Resolution...\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting Network Time Synchronization...\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting Record System Boot/Shutdown in UTMP...\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Finished Record System Boot/Shutdown in UTMP.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Finished Commit a transient machine-id on disk.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Started Network Time Synchronization.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Reached target System Time Set.\nSep 05 22:22:30 ubuntu2204 systemd-resolved[26262]:  Positive Trust Anchors:\nSep 05 22:22:30 ubuntu2204 systemd-resolved[26262]:  . IN DS 20326 8 2 e06d44b80b8f1d39a95c0b0d7c65d08458e880409bbc683457104237c7f8ec8d\nSep 05 22:22:30 ubuntu2204 systemd-resolved[26262]:  Negative trust anchors: home.arpa 10.in-addr.arpa 16.172.in-addr.arpa 17.172.in-addr.arpa 18.172.in-addr.arpa 19.172.in-addr.arpa 20.172.in-addr.arpa 21.172.in-addr.arpa 22.172.in-addr.arpa 23.172.in-addr.arpa 24.172.in-addr.arpa 25.172.in-addr.arpa 26.172.in-addr.arpa 27.172.in-addr.arpa 28.172.in-addr.arpa 29.172.in-addr.arpa 30.172.in-addr.arpa 31.172.in-addr.arpa 168.192.in-addr.arpa d.f.ip6.arpa corp home internal intranet lan local private test\nSep 05 22:22:30 ubuntu2204 systemd-resolved[26262]:  Using system hostname 'student02-paynowdemo'.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Started Network Name Resolution.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Reached target Network.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Reached target Network is Online.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Reached target Host and Network Name Lookups.\nSep 05 22:22:30 ubuntu2204 audit[26262]:  AVC apparmor=\"STATUS\" operation=\"profile_load\" profile=\"unconfined\" name=\"nvidia_modprobe\" pid=879 comm=\"apparmor_parser\"\nSep 05 22:22:30 ubuntu2204 audit[26262]:  AVC apparmor=\"STATUS\" operation=\"profile_load\" profile=\"unconfined\" name=\"nvidia_modprobe//kmod\" pid=879 comm=\"apparmor_parser\"\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  audit: type=1400 audit(1693952548.024:2): apparmor=\"STATUS\" operation=\"profile_load\" profile=\"unconfined\" name=\"nvidia_modprobe\" pid=879 comm=\"apparmor_parser\"\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  audit: type=1400 audit(1693952548.024:3): apparmor=\"STATUS\" operation=\"profile_load\" profile=\"unconfined\" name=\"nvidia_modprobe//kmod\" pid=879 comm=\"apparmor_parser\"\nSep 05 22:22:30 ubuntu2204 audit[26262]:  AVC apparmor=\"STATUS\" operation=\"profile_load\" profile=\"unconfined\" name=\"lsb_release\" pid=878 comm=\"apparmor_parser\"\nSep 05 22:22:30 ubuntu2204 apparmor.systemd[26262]:  Skipping profile in /etc/apparmor.d/disable: usr.sbin.rsyslogd\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  audit: type=1400 audit(1693952548.034:4): apparmor=\"STATUS\" operation=\"profile_load\" profile=\"unconfined\" name=\"lsb_release\" pid=878 comm=\"apparmor_parser\"\nSep 05 22:22:30 ubuntu2204 audit[26262]:  AVC apparmor=\"STATUS\" operation=\"profile_load\" profile=\"unconfined\" name=\"/usr/lib/NetworkManager/nm-dhcp-client.action\" pid=880 comm=\"apparmor_parser\"\nSep 05 22:22:30 ubuntu2204 audit[26262]:  AVC apparmor=\"STATUS\" operation=\"profile_load\" profile=\"unconfined\" name=\"/usr/lib/NetworkManager/nm-dhcp-helper\" pid=880 comm=\"apparmor_parser\"\nSep 05 22:22:30 ubuntu2204 audit[26262]:  AVC apparmor=\"STATUS\" operation=\"profile_load\" profile=\"unconfined\" name=\"/usr/lib/connman/scripts/dhclient-script\" pid=880 comm=\"apparmor_parser\"\nSep 05 22:22:30 ubuntu2204 audit[26262]:  AVC apparmor=\"STATUS\" operation=\"profile_load\" profile=\"unconfined\" name=\"/{,usr/}sbin/dhclient\" pid=880 comm=\"apparmor_parser\"\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Finished Load AppArmor profiles.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Reached target System Initialization.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Started Daily apt download activities.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Started Daily apt upgrade and clean activities.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Started Daily dpkg database backup timer.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Started Periodic ext4 Online Metadata Check for All Filesystems.\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  audit: type=1400 audit(1693952548.294:5): apparmor=\"STATUS\" operation=\"profile_load\" profile=\"unconfined\" name=\"/usr/lib/NetworkManager/nm-dhcp-client.action\" pid=880 comm=\"apparmor_parser\"\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  audit: type=1400 audit(1693952548.294:6): apparmor=\"STATUS\" operation=\"profile_load\" profile=\"unconfined\" name=\"/usr/lib/NetworkManager/nm-dhcp-helper\" pid=880 comm=\"apparmor_parser\"\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  audit: type=1400 audit(1693952548.294:7): apparmor=\"STATUS\" operation=\"profile_load\" profile=\"unconfined\" name=\"/usr/lib/connman/scripts/dhclient-script\" pid=880 comm=\"apparmor_parser\"\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  audit: type=1400 audit(1693952548.294:8): apparmor=\"STATUS\" operation=\"profile_load\" profile=\"unconfined\" name=\"/{,usr/}sbin/dhclient\" pid=880 comm=\"apparmor_parser\"\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Started Discard unused blocks once a week.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Started Daily rotation of log files.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Started Message of the Day.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Started Podman auto-update timer.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Started Daily Cleanup of Temporary Directories.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Condition check resulted in Ubuntu Pro Timer for running repeated jobs being skipped.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Started Timer for calling verify disk encryption invoker service.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Reached target Basic System.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Reached target Timer Units.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Listening on D-Bus System Message Bus Socket.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Listening on Podman API Socket.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting containerd container runtime...\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Started D-Bus System Message Bus.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Started Save initial kernel messages after boot.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting Remove Stale Online ext4 Metadata Check Snapshots...\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Condition check resulted in getty on tty2-tty6 if dbus and logind are not available being skipped.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Reached target Login Prompts.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting Dispatcher daemon for systemd-networkd...\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting Podman auto-update service...\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting Podman Start All Containers With Restart Policy Set To Always...\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting Podman API Service...\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting Logging Configuration...\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting User Login Management...\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting Permit User Sessions...\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Condition check resulted in Ubuntu Pro reboot cmds being skipped.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Condition check resulted in Ubuntu Pro Background Auto Attach being skipped.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Started Podman API Service.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Finished Permit User Sessions.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting Set console scheme...\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Finished Set console scheme.\nSep 05 22:22:30 ubuntu2204 dbus-daemon[26262]:  [system] AppArmor D-Bus mediation is enabled\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.429144732Z\" level=info msg=\"starting containerd\" revision= version=1.7.2\nSep 05 22:22:30 ubuntu2204 systemd-logind[26262]:  New seat seat0.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Started User Login Management.\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.481841275Z\" level=info msg=\"loading plugin \\\"io.containerd.snapshotter.v1.btrfs\\\"...\" type=io.containerd.snapshotter.v1\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.481966874Z\" level=info msg=\"skip loading plugin \\\"io.containerd.snapshotter.v1.btrfs\\\"...\" error=\"path /var/lib/containerd/io.containerd.snapshotter.v1.btrfs (ext4) must be a btrfs filesystem to be used with the btrfs snapshotter: skip plugin\" type=io.containerd.snapshotter.v1\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.481980901Z\" level=info msg=\"loading plugin \\\"io.containerd.content.v1.content\\\"...\" type=io.containerd.content.v1\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.482038824Z\" level=info msg=\"loading plugin \\\"io.containerd.snapshotter.v1.native\\\"...\" type=io.containerd.snapshotter.v1\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.482094169Z\" level=info msg=\"loading plugin \\\"io.containerd.snapshotter.v1.overlayfs\\\"...\" type=io.containerd.snapshotter.v1\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.482208824Z\" level=info msg=\"loading plugin \\\"io.containerd.metadata.v1.bolt\\\"...\" type=io.containerd.metadata.v1\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.482262894Z\" level=info msg=\"metadata content store policy set\" policy=shared\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.490944229Z\" level=info msg=\"loading plugin \\\"io.containerd.differ.v1.walking\\\"...\" type=io.containerd.differ.v1\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.490961416Z\" level=info msg=\"loading plugin \\\"io.containerd.event.v1.exchange\\\"...\" type=io.containerd.event.v1\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.490975325Z\" level=info msg=\"loading plugin \\\"io.containerd.gc.v1.scheduler\\\"...\" type=io.containerd.gc.v1\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.490997777Z\" level=info msg=\"loading plugin \\\"io.containerd.lease.v1.manager\\\"...\" type=io.containerd.lease.v1\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.491010169Z\" level=info msg=\"loading plugin \\\"io.containerd.nri.v1.nri\\\"...\" type=io.containerd.nri.v1\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.491043531Z\" level=info msg=\"NRI interface is disabled by configuration.\"\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.491053578Z\" level=info msg=\"loading plugin \\\"io.containerd.runtime.v2.task\\\"...\" type=io.containerd.runtime.v2\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.491119236Z\" level=info msg=\"loading plugin \\\"io.containerd.runtime.v2.shim\\\"...\" type=io.containerd.runtime.v2\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.491134201Z\" level=info msg=\"loading plugin \\\"io.containerd.sandbox.store.v1.local\\\"...\" type=io.containerd.sandbox.store.v1\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.491145659Z\" level=info msg=\"loading plugin \\\"io.containerd.sandbox.controller.v1.local\\\"...\" type=io.containerd.sandbox.controller.v1\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.491156719Z\" level=info msg=\"loading plugin \\\"io.containerd.streaming.v1.manager\\\"...\" type=io.containerd.streaming.v1\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.491167561Z\" level=info msg=\"loading plugin \\\"io.containerd.service.v1.introspection-service\\\"...\" type=io.containerd.service.v1\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.491181095Z\" level=info msg=\"loading plugin \\\"io.containerd.service.v1.containers-service\\\"...\" type=io.containerd.service.v1\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.491193104Z\" level=info msg=\"loading plugin \\\"io.containerd.service.v1.content-service\\\"...\" type=io.containerd.service.v1\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.491203846Z\" level=info msg=\"loading plugin \\\"io.containerd.service.v1.diff-service\\\"...\" type=io.containerd.service.v1\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.491214358Z\" level=info msg=\"loading plugin \\\"io.containerd.service.v1.images-service\\\"...\" type=io.containerd.service.v1\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.491224386Z\" level=info msg=\"loading plugin \\\"io.containerd.service.v1.namespaces-service\\\"...\" type=io.containerd.service.v1\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.491237314Z\" level=info msg=\"loading plugin \\\"io.containerd.service.v1.snapshots-service\\\"...\" type=io.containerd.service.v1\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.491247146Z\" level=info msg=\"loading plugin \\\"io.containerd.runtime.v1.linux\\\"...\" type=io.containerd.runtime.v1\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.491294104Z\" level=info msg=\"loading plugin \\\"io.containerd.monitor.v1.cgroups\\\"...\" type=io.containerd.monitor.v1\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.491477745Z\" level=info msg=\"loading plugin \\\"io.containerd.service.v1.tasks-service\\\"...\" type=io.containerd.service.v1\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.491502174Z\" level=info msg=\"loading plugin \\\"io.containerd.grpc.v1.introspection\\\"...\" type=io.containerd.grpc.v1\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.491513583Z\" level=info msg=\"loading plugin \\\"io.containerd.transfer.v1.local\\\"...\" type=io.containerd.transfer.v1\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.491529769Z\" level=info msg=\"loading plugin \\\"io.containerd.internal.v1.restart\\\"...\" type=io.containerd.internal.v1\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.491570098Z\" level=info msg=\"loading plugin \\\"io.containerd.grpc.v1.containers\\\"...\" type=io.containerd.grpc.v1\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.491581805Z\" level=info msg=\"loading plugin \\\"io.containerd.grpc.v1.content\\\"...\" type=io.containerd.grpc.v1\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.491591976Z\" level=info msg=\"loading plugin \\\"io.containerd.grpc.v1.diff\\\"...\" type=io.containerd.grpc.v1\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.491640808Z\" level=info msg=\"loading plugin \\\"io.containerd.grpc.v1.events\\\"...\" type=io.containerd.grpc.v1\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.491653827Z\" level=info msg=\"loading plugin \\\"io.containerd.grpc.v1.healthcheck\\\"...\" type=io.containerd.grpc.v1\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.491663601Z\" level=info msg=\"loading plugin \\\"io.containerd.grpc.v1.images\\\"...\" type=io.containerd.grpc.v1\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.491672810Z\" level=info msg=\"loading plugin \\\"io.containerd.grpc.v1.leases\\\"...\" type=io.containerd.grpc.v1\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.491681803Z\" level=info msg=\"loading plugin \\\"io.containerd.grpc.v1.namespaces\\\"...\" type=io.containerd.grpc.v1\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.491691621Z\" level=info msg=\"loading plugin \\\"io.containerd.internal.v1.opt\\\"...\" type=io.containerd.internal.v1\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  e2scrub_reap.service: Deactivated successfully.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Finished Remove Stale Online ext4 Metadata Check Snapshots.\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.494518335Z\" level=info msg=\"loading plugin \\\"io.containerd.grpc.v1.sandbox-controllers\\\"...\" type=io.containerd.grpc.v1\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.494533930Z\" level=info msg=\"loading plugin \\\"io.containerd.grpc.v1.sandboxes\\\"...\" type=io.containerd.grpc.v1\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.494545431Z\" level=info msg=\"loading plugin \\\"io.containerd.grpc.v1.snapshots\\\"...\" type=io.containerd.grpc.v1\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.494555781Z\" level=info msg=\"loading plugin \\\"io.containerd.grpc.v1.streaming\\\"...\" type=io.containerd.grpc.v1\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.494569019Z\" level=info msg=\"loading plugin \\\"io.containerd.grpc.v1.tasks\\\"...\" type=io.containerd.grpc.v1\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.494580297Z\" level=info msg=\"loading plugin \\\"io.containerd.grpc.v1.transfer\\\"...\" type=io.containerd.grpc.v1\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.494589947Z\" level=info msg=\"loading plugin \\\"io.containerd.grpc.v1.version\\\"...\" type=io.containerd.grpc.v1\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.494598932Z\" level=info msg=\"loading plugin \\\"io.containerd.grpc.v1.cri\\\"...\" type=io.containerd.grpc.v1\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.494691551Z\" level=info msg=\"Start cri plugin with config {PluginConfig:{ContainerdConfig:{Snapshotter:overlayfs DefaultRuntimeName:runc DefaultRuntime:{Type: Path: Engine: PodAnnotations:[] ContainerAnnotations:[] Root: Options:map[] PrivilegedWithoutHostDevices:false PrivilegedWithoutHostDevicesAllDevicesAllowed:false BaseRuntimeSpec: NetworkPluginConfDir: NetworkPluginMaxConfNum:0 Snapshotter: SandboxMode:} UntrustedWorkloadRuntime:{Type: Path: Engine: PodAnnotations:[] ContainerAnnotations:[] Root: Options:map[] PrivilegedWithoutHostDevices:false PrivilegedWithoutHostDevicesAllDevicesAllowed:false BaseRuntimeSpec: NetworkPluginConfDir: NetworkPluginMaxConfNum:0 Snapshotter: SandboxMode:} Runtimes:map[runc:{Type:io.containerd.runc.v2 Path: Engine: PodAnnotations:[] ContainerAnnotations:[] Root: Options:map[BinaryName: CriuImagePath: CriuPath: CriuWorkPath: IoGid:0 IoUid:0 NoNewKeyring:false NoPivotRoot:false Root: ShimCgroup: SystemdCgroup:false] PrivilegedWithoutHostDevices:false PrivilegedWithoutHostDevicesAllDevicesAllowed:false BaseRuntimeSpec: NetworkPluginConfDir: NetworkPluginMaxConfNum:0 Snapshotter: SandboxMode:podsandbox}] NoPivot:false DisableSnapshotAnnotations:true DiscardUnpackedLayers:false IgnoreBlockIONotEnabledErrors:false IgnoreRdtNotEnabledErrors:false} CniConfig:{NetworkPluginBinDir:/opt/cni/bin NetworkPluginConfDir:/etc/cni/net.d NetworkPluginMaxConfNum:1 NetworkPluginSetupSerially:false NetworkPluginConfTemplate: IPPreference:} Registry:{ConfigPath: Mirrors:map[] Configs:map[] Auths:map[] Headers:map[]} ImageDecryption:{KeyModel:node} DisableTCPService:true StreamServerAddress:127.0.0.1 StreamServerPort:0 StreamIdleTimeout:4h0m0s EnableSelinux:false SelinuxCategoryRange:1024 SandboxImage:registry.k8s.io/pause:3.8 StatsCollectPeriod:10 SystemdCgroup:false EnableTLSStreaming:false X509KeyPairStreaming:{TLSCertFile: TLSKeyFile:} MaxContainerLogLineSize:16384 DisableCgroup:false DisableApparmor:false RestrictOOMScoreAdj:false MaxConcurrentDownloads:3 DisableProcMount:false UnsetSeccompProfile: TolerateMissingHugetlbController:true DisableHugetlbController:true DeviceOwnershipFromSecurityContext:false IgnoreImageDefinedVolumes:false NetNSMountsUnderStateDir:false EnableUnprivilegedPorts:false EnableUnprivilegedICMP:false EnableCDI:false CDISpecDirs:[/etc/cdi /var/run/cdi] ImagePullProgressTimeout:1m0s DrainExecSyncIOTimeout:0s} ContainerdRootDir:/var/lib/containerd ContainerdEndpoint:/run/containerd/containerd.sock RootDir:/var/lib/containerd/io.containerd.grpc.v1.cri StateDir:/run/containerd/io.containerd.grpc.v1.cri}\"\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.494737417Z\" level=info msg=\"Connect containerd service\"\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.494756121Z\" level=info msg=\"using legacy CRI server\"\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.494761467Z\" level=info msg=\"using experimental NRI integration - disable nri plugin to prevent this\"\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.494807386Z\" level=info msg=\"Get image filesystem path \\\"/var/lib/containerd/io.containerd.snapshotter.v1.overlayfs\\\"\"\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.495959683Z\" level=info msg=\"loading plugin \\\"io.containerd.tracing.processor.v1.otlp\\\"...\" type=io.containerd.tracing.processor.v1\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.495974989Z\" level=info msg=\"skip loading plugin \\\"io.containerd.tracing.processor.v1.otlp\\\"...\" error=\"no OpenTelemetry endpoint: skip plugin\" type=io.containerd.tracing.processor.v1\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.495985324Z\" level=info msg=\"loading plugin \\\"io.containerd.internal.v1.tracing\\\"...\" type=io.containerd.internal.v1\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.496006364Z\" level=info msg=\"Start subscribing containerd event\"\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.496037713Z\" level=info msg=\"Start recovering state\"\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.496080616Z\" level=info msg=\"Start event monitor\"\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.496090938Z\" level=info msg=\"Start snapshots syncer\"\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.496097604Z\" level=info msg=\"Start cni network conf syncer for default\"\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.496102877Z\" level=info msg=\"Start streaming server\"\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.496256044Z\" level=info msg=\"skipping tracing processor initialization (no tracing plugin)\" error=\"no OpenTelemetry endpoint: skip plugin\"\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.496399091Z\" level=info msg=serving... address=/run/containerd/containerd.sock.ttrpc\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.496419905Z\" level=info msg=serving... address=/run/containerd/containerd.sock\nSep 05 22:22:30 ubuntu2204 networkd-dispatcher[26262]:  No valid path found for iwconfig\nSep 05 22:22:30 ubuntu2204 networkd-dispatcher[26262]:  No valid path found for iw\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Started Dispatcher daemon for systemd-networkd.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Started containerd container runtime.\nSep 05 22:22:30 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:28.508349412Z\" level=info msg=\"containerd successfully booted in 0.079960s\"\nSep 05 22:22:30 ubuntu2204 podman[26262]:  time=\"2023-09-05T22:22:28Z\" level=info msg=\"/usr/bin/podman filtering at log level info\"\nSep 05 22:22:30 ubuntu2204 podman[26262]:  time=\"2023-09-05T22:22:28Z\" level=info msg=\"/usr/bin/podman filtering at log level info\"\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  etc-machine\\x2did.mount: Deactivated successfully.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  var-lib-containers-storage-overlay-metacopy\\x2dcheck1945055672-merged.mount: Deactivated successfully.\nSep 05 22:22:30 ubuntu2204 podman[26262]:  time=\"2023-09-05T22:22:28Z\" level=info msg=\"[graphdriver] using prior storage driver: overlay\"\nSep 05 22:22:30 ubuntu2204 podman[26262]:  time=\"2023-09-05T22:22:28Z\" level=info msg=\"Found CNI network podman (type=bridge) at /etc/cni/net.d/87-podman-bridge.conflist\"\nSep 05 22:22:30 ubuntu2204 podman[26262]:  time=\"2023-09-05T22:22:28Z\" level=info msg=\"Found CNI network podman (type=bridge) at /etc/cni/net.d/87-podman-bridge.conflist\"\nSep 05 22:22:30 ubuntu2204 podman[26262]:  2023-09-05 22:22:28.729521205 +0000 UTC m=+0.354964756 system refresh\nSep 05 22:22:30 ubuntu2204 podman[26262]:  time=\"2023-09-05T22:22:28Z\" level=info msg=\"Setting parallel job count to 7\"\nSep 05 22:22:30 ubuntu2204 podman[26262]:  time=\"2023-09-05T22:22:28Z\" level=info msg=\"Setting parallel job count to 7\"\nSep 05 22:22:30 ubuntu2204 podman[26262]:  time=\"2023-09-05T22:22:28Z\" level=info msg=\"using systemd socket activation to determine API endpoint\"\nSep 05 22:22:30 ubuntu2204 podman[26262]:  time=\"2023-09-05T22:22:28Z\" level=info msg=\"using API endpoint: ''\"\nSep 05 22:22:30 ubuntu2204 podman[26262]:  time=\"2023-09-05T22:22:28Z\" level=info msg=\"API service listening on \\\"/run/podman/podman.sock\\\"\"\nSep 05 22:22:30 ubuntu2204 systemd-networkd[26262]:  enc1: Gained carrier\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  IPv6: ADDRCONF(NETDEV_CHANGE): enc1: link becomes ready\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Finished Podman Start All Containers With Restart Policy Set To Always.\nSep 05 22:22:30 ubuntu2204 systemd-networkd[26262]:  enc1: DHCPv4 address 172.16.0.82/24 via 172.16.0.1\nSep 05 22:22:30 ubuntu2204 dbus-daemon[26262]:  [system] Activating via systemd: service name='org.freedesktop.hostname1' unit='dbus-org.freedesktop.hostname1.service' requested by ':1.0' (uid=100 pid=806 comm=\"/lib/systemd/systemd-networkd \" label=\"unconfined\")\nSep 05 22:22:30 ubuntu2204 systemd-timesyncd[26262]:  Network configuration changed, trying to establish connection.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting Hostname Service...\nSep 05 22:22:30 ubuntu2204 dbus-daemon[26262]:  [system] Successfully activated service 'org.freedesktop.hostname1'\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Started Hostname Service.\nSep 05 22:22:30 ubuntu2204 systemd-networkd[26262]:  Could not set hostname: Access denied\nSep 05 22:22:30 ubuntu2204 systemd-timesyncd[26262]:  Initial synchronization to time server 185.125.190.58:123 (ntp.ubuntu.com).\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  podman-auto-update.service: Deactivated successfully.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Finished Podman auto-update service.\nSep 05 22:22:30 ubuntu2204 hpcr-dnslookup[26262]:  HPL14000I: Network connectivity check completed successfully.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Finished Logging Configuration.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Reached target Early Initialization.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Reached target Logging to remote monitoring server is initiated..\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting Logging Configuration...\nSep 05 22:22:30 ubuntu2204 hpcr-logging[26262]:  Configuring logging ...\nSep 05 22:22:30 ubuntu2204 hpcr-logging[26262]:  Version [1.1.145]\nSep 05 22:22:30 ubuntu2204 hpcr-logging[26262]:  Configuring logging, input [/var/hyperprotect/user-data.decrypted] ...\nSep 05 22:22:30 ubuntu2204 hpcr-logging[26262]:  ValidateContractE ...\nSep 05 22:22:30 ubuntu2204 hpcr-logging[26262]:  config written: /etc/rsyslog.d/22-logging.conf\nSep 05 22:22:30 ubuntu2204 hpcr-logging[26262]:  HPL01010I: Logging has been setup successfully.\nSep 05 22:22:30 ubuntu2204 hpcr-logging[26262]:  Logging has been configured\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Finished Logging Configuration.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting System Logging Service...\nSep 05 22:22:30 ubuntu2204 rsyslogd[26262]:  rsyslogd's groupid changed to 111\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Started System Logging Service.\nSep 05 22:22:30 ubuntu2204 rsyslogd[26262]:  rsyslogd's userid changed to 104\nSep 05 22:22:30 ubuntu2204 rsyslogd[26262]:  [origin software=\"rsyslogd\" swVersion=\"8.2112.0\" x-pid=\"1044\" x-info=\"https://www.rsyslog.com\"] start\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Reached target Synchronizes the Logging Target.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Reached target Logging to remote log server is initiated..\nSep 05 22:22:30 ubuntu2204 rsyslogd[26262]:  imjournal: No statefile exists, /var/spool/rsyslog/journal_state will be created (ignore if this is first run): No such file or directory [v8.2112.0 try https://www.rsyslog.com/e/2040 ]\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting Service that does validation of contract...\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting HPCR Registry Authentication...\nSep 05 22:22:30 ubuntu2204 hpcr-contract[26262]:  Welcome to SE Contract Validator\nSep 05 22:22:30 ubuntu2204 hpcr-contract[26262]:  Contract file passed is:  /var/hyperprotect/user-data.decrypted\nSep 05 22:22:30 ubuntu2204 hpcr-registry-auth[26262]:  Starting Registry Authentication ...\nSep 05 22:22:30 ubuntu2204 hpcr-registry-auth[26262]:  Version [1.0.70]\nSep 05 22:22:30 ubuntu2204 rsyslogd[26262]:  imjournal: journal files changed, reloading...  [v8.2112.0 try https://www.rsyslog.com/e/0 ]\nSep 05 22:22:30 ubuntu2204 hpcr-registry-auth[26262]:  Writing auth config: /root/.docker/config.json\nSep 05 22:22:30 ubuntu2204 hpcr-registry-auth[26262]:  Registry Authentication started\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Finished HPCR Registry Authentication.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting Docker Socket for the API...\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Listening on Docker Socket for the API.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting Docker Application Container Engine...\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  var-lib-containers-storage-overlay.mount: Deactivated successfully.\nSep 05 22:22:30 ubuntu2204 dockerd[26262]:  time=\"2023-09-05T22:22:29.672740594Z\" level=info msg=\"Starting up\"\nSep 05 22:22:30 ubuntu2204 dockerd[26262]:  time=\"2023-09-05T22:22:29.684275456Z\" level=info msg=\"detected 127.0.0.53 nameserver, assuming systemd-resolved, so using resolv.conf: /run/systemd/resolve/resolv.conf\"\nSep 05 22:22:30 ubuntu2204 audit[26262]:  AVC apparmor=\"STATUS\" operation=\"profile_load\" profile=\"unconfined\" name=\"docker-default\" pid=1068 comm=\"apparmor_parser\"\nSep 05 22:22:30 ubuntu2204 dockerd[26262]:  time=\"2023-09-05T22:22:29.749209491Z\" level=info msg=\"parsed scheme: \\\"unix\\\"\" module=grpc\nSep 05 22:22:30 ubuntu2204 dockerd[26262]:  time=\"2023-09-05T22:22:29.749278826Z\" level=info msg=\"scheme \\\"unix\\\" not registered, fallback to default scheme\" module=grpc\nSep 05 22:22:30 ubuntu2204 dockerd[26262]:  time=\"2023-09-05T22:22:29.749315855Z\" level=info msg=\"ccResolverWrapper: sending update to cc: {[{unix:///run/containerd/containerd.sock  &lt;nil&gt; 0 &lt;nil&gt;}] &lt;nil&gt; &lt;nil&gt;}\" module=grpc\nSep 05 22:22:30 ubuntu2204 dockerd[26262]:  time=\"2023-09-05T22:22:29.749349509Z\" level=info msg=\"ClientConn switching balancer to \\\"pick_first\\\"\" module=grpc\nSep 05 22:22:30 ubuntu2204 dockerd[26262]:  time=\"2023-09-05T22:22:29.751021396Z\" level=info msg=\"parsed scheme: \\\"unix\\\"\" module=grpc\nSep 05 22:22:30 ubuntu2204 dockerd[26262]:  time=\"2023-09-05T22:22:29.751057665Z\" level=info msg=\"scheme \\\"unix\\\" not registered, fallback to default scheme\" module=grpc\nSep 05 22:22:30 ubuntu2204 dockerd[26262]:  time=\"2023-09-05T22:22:29.751086981Z\" level=info msg=\"ccResolverWrapper: sending update to cc: {[{unix:///run/containerd/containerd.sock  &lt;nil&gt; 0 &lt;nil&gt;}] &lt;nil&gt; &lt;nil&gt;}\" module=grpc\nSep 05 22:22:30 ubuntu2204 dockerd[26262]:  time=\"2023-09-05T22:22:29.751114718Z\" level=info msg=\"ClientConn switching balancer to \\\"pick_first\\\"\" module=grpc\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  audit: type=1400 audit(1693952549.735:9): apparmor=\"STATUS\" operation=\"profile_load\" profile=\"unconfined\" name=\"docker-default\" pid=1068 comm=\"apparmor_parser\"\nSep 05 22:22:30 ubuntu2204 hpcr-contract[26262]:  Contract file is valid.\nSep 05 22:22:30 ubuntu2204 hpcr-contract[26262]:  Extracting workload from /var/hyperprotect/user-data.decrypted to /var/hyperprotect/workload-data.decrypted\nSep 05 22:22:30 ubuntu2204 hpcr-contract[26262]:  Extraction completed\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Finished Service that does validation of contract.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting Service that does signature validation of Env Workload of contract...\nSep 05 22:22:30 ubuntu2204 hpcr-signature[26262]:  Welcome to SE ENV Workload Signature Validator\nSep 05 22:22:30 ubuntu2204 dockerd[26262]:  time=\"2023-09-05T22:22:29.835870657Z\" level=info msg=\"Loading containers: start.\"\nSep 05 22:22:30 ubuntu2204 hpcr-signature[26262]:  Decrypted Contract file passed is:  /var/hyperprotect/workload-data.decrypted\nSep 05 22:22:30 ubuntu2204 hpcr-signature[26262]:  Encrypted Contract file passed is:  /var/hyperprotect/cidata/user-data\nSep 05 22:22:30 ubuntu2204 hpcr-signature[26262]:  Check Dependency params Public key and EnvWorkload signature\nSep 05 22:22:30 ubuntu2204 hpcr-signature[26262]:  Access Public key and EnvWorkload signature\nSep 05 22:22:30 ubuntu2204 hpcr-signature[26262]:  Create combined EnvWorkload contract content\nSep 05 22:22:30 ubuntu2204 hpcr-signature[26262]:  Verify signing key, signature and combined EnvWorkload contract\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  bridge: filtering via arp/ip/ip6tables is no longer available by default. Update your scripts to load br_netfilter if you need this.\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Bridge firewalling registered\nSep 05 22:22:30 ubuntu2204 hpcr-signature[26262]:  Verified OK\nSep 05 22:22:30 ubuntu2204 hpcr-signature[26262]:  Successfully verified contract with signature and signing key\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Finished Service that does signature validation of Env Workload of contract.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Reached target Contract is unpacked and ready for consumption..\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting Service that waits until the user devices are ready...\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting Set podman image policy...\nSep 05 22:22:30 ubuntu2204 hpcr-disk-standby[26262]:  Waiting for devices ...\nSep 05 22:22:30 ubuntu2204 hpcr-disk-standby[26262]:  Version [1.0.112]\nSep 05 22:22:30 ubuntu2204 hpcr-disk-standby[26262]:  WaitForDevices input=[/var/hyperprotect/user-data.decrypted], timeout=[2023-09-05 22:37:29.889691719 +0000 UTC m=+900.024319178]\nSep 05 22:22:30 ubuntu2204 hpcr-disk-standby[26262]:  ParseContract ...\nSep 05 22:22:30 ubuntu2204 hpcr-disk-standby[26262]:  ValidateContract ...\nSep 05 22:22:30 ubuntu2204 systemd-networkd[26262]:  enc1: Gained IPv6LL\nSep 05 22:22:30 ubuntu2204 hpcr-disk-standby[26262]:  MergeVolumes ...\nSep 05 22:22:30 ubuntu2204 hpcr-disk-standby[26262]:  Waiting for devices is completed\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Finished Service that waits until the user devices are ready.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting Service that mounts the data volumes after they are ready...\nSep 05 22:22:30 ubuntu2204 hpcr-disk-mount[26262]:  Mounting volumes ...\nSep 05 22:22:30 ubuntu2204 hpcr-disk-mount[26262]:  Version [1.0.112]\nSep 05 22:22:30 ubuntu2204 hpcr-disk-mount[26262]:  MountVolumes input=[/var/hyperprotect/user-data.decrypted]\nSep 05 22:22:30 ubuntu2204 hpcr-disk-mount[26262]:  ParseContract ...\nSep 05 22:22:30 ubuntu2204 hpcr-disk-mount[26262]:  ValidateContract ...\nSep 05 22:22:30 ubuntu2204 hpcr-disk-mount[26262]:  MergeVolumes ...\nSep 05 22:22:30 ubuntu2204 hpcr-disk-mount[26262]:  Mounting volumes ...\nSep 05 22:22:30 ubuntu2204 hpcr-disk-mount[26262]:  Volume config ..\nSep 05 22:22:30 ubuntu2204 hpcr-disk-mount[26262]:  HPL07003I: Mounting volumes done\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Finished Service that mounts the data volumes after they are ready.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Reached target Data volumes are mounted ready to be used..\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Started Service that verifies all disks are encrypted and logs output to systemd journal.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Started Service that periodically logs entry to trigger verify disk encryption service.\nSep 05 22:22:30 ubuntu2204 verify-disk-encryption[26262]:  Verify disk encryption started...\nSep 05 22:22:30 ubuntu2204 hpcr-image-play[26262]:  Getting image source signatures\nSep 05 22:22:30 ubuntu2204 hpcr-image-play[26262]:  Copying blob sha256:66d62867ae2452322f4769f943913be00b22e73039d1902e8f785b9f49838193\nSep 05 22:22:30 ubuntu2204 kernel[26262]:  Initializing XFRM netlink socket\nSep 05 22:22:30 ubuntu2204 dockerd[26262]:  time=\"2023-09-05T22:22:30.064508356Z\" level=info msg=\"Default bridge (docker0) is assigned with an IP address 172.17.0.0/16. Daemon option --bip can be used to set a preferred IP address\"\nSep 05 22:22:30 ubuntu2204 networkd-dispatcher[26262]:  WARNING:Unknown index 3 seen, reloading interface list\nSep 05 22:22:30 ubuntu2204 hpcr-image-play[26262]:  Copying config sha256:9eca761232387055827db0a9f2232f2635bc8c6d5f23ecfb39d34bb4ab0dca09\nSep 05 22:22:30 ubuntu2204 hpcr-image-play[26262]:  Writing manifest to image destination\nSep 05 22:22:30 ubuntu2204 hpcr-image-play[26262]:  Storing signatures\nSep 05 22:22:30 ubuntu2204 systemd-networkd[26262]:  docker0: Link UP\nSep 05 22:22:30 ubuntu2204 dockerd[26262]:  time=\"2023-09-05T22:22:30.140157723Z\" level=info msg=\"Loading containers: done.\"\nSep 05 22:22:30 ubuntu2204 hpcr-image-play[26262]:  Loaded image(s): k8s.gcr.io/pause:3.5\nSep 05 22:22:30 ubuntu2204 podman[26262]:  2023-09-05 22:22:29.991201384 +0000 UTC m=+0.127793409 image loadfromarchive  /usr/local/se-image-play/pause.tar\nSep 05 22:22:30 ubuntu2204 sudo[26262]:      root : PWD=/ ; USER=nobody ; COMMAND=/usr/local/bin/se-image-play\nSep 05 22:22:30 ubuntu2204 sudo[26262]:  pam_unix(sudo:session): session opened for user nobody(uid=65534) by (uid=0)\nSep 05 22:22:30 ubuntu2204 hpcr-image-play[26262]:  Version [1.1.112]\nSep 05 22:22:30 ubuntu2204 dockerd[26262]:  time=\"2023-09-05T22:22:30.212277099Z\" level=info msg=\"Docker daemon\" commit=\"20.10.25-0ubuntu1~22.04.2\" graphdriver(s)=overlay2 version=20.10.25\nSep 05 22:22:30 ubuntu2204 dockerd[26262]:  time=\"2023-09-05T22:22:30.212332016Z\" level=info msg=\"Daemon has completed initialization\"\nSep 05 22:22:30 ubuntu2204 sudo[26262]:  pam_unix(sudo:session): session closed for user nobody\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Finished Set podman image policy.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting Service that creates a set of containers...\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Started Docker Application Container Engine.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting Set docker image policy...\nSep 05 22:22:30 ubuntu2204 hpcr-image[26262]:  Starting image service...\nSep 05 22:22:30 ubuntu2204 hpcr-image[26262]:  Contract yaml file: /var/hyperprotect/workload-data.decrypted\nSep 05 22:22:30 ubuntu2204 hpcr-image[26262]:  Extracting image contract\nSep 05 22:22:30 ubuntu2204 hpcr-image[26262]:  Successfully extracted Image contract\nSep 05 22:22:30 ubuntu2204 hpcr-image[26262]:  Extracting container contract\nSep 05 22:22:30 ubuntu2204 hpcr-image[26262]:  Checking for image with digest\nSep 05 22:22:30 ubuntu2204 hpcr-image[26262]:  No image for DCT verification\nSep 05 22:22:30 ubuntu2204 hpcr-image[26262]:  Image service completed successfully\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Finished Set docker image policy.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Starting Service that creates a set of containers...\nSep 05 22:22:30 ubuntu2204 sudo[26262]:      root : PWD=/ ; USER=nobody ; COMMAND=/usr/local/bin/se-container-play\nSep 05 22:22:30 ubuntu2204 hpcr-container[26262]:  Starting container service...\nSep 05 22:22:30 ubuntu2204 sudo[26262]:  pam_unix(sudo:session): session opened for user nobody(uid=65534) by (uid=0)\nSep 05 22:22:30 ubuntu2204 hpcr-container-play[26262]:  Version [1.1.116]\nSep 05 22:22:30 ubuntu2204 hpcr-container[26262]:  Validating contract...\nSep 05 22:22:30 ubuntu2204 hpcr-container[26262]:  Compose folder /data1/compose created\nSep 05 22:22:30 ubuntu2204 hpcr-container[26262]:  Contract yaml file: /var/hyperprotect/workload-data.decrypted\nSep 05 22:22:30 ubuntu2204 hpcr-container[26262]:  Compose folder: /data1/compose\nSep 05 22:22:30 ubuntu2204 hpcr-container[26262]:  Validation completed\nSep 05 22:22:30 ubuntu2204 hpcr-container[26262]:  Parsing contract...\nSep 05 22:22:30 ubuntu2204 hpcr-container[26262]:  Parsing of the Contract File completed successfully\nSep 05 22:22:30 ubuntu2204 hpcr-container[26262]:  Extracting compose...\nSep 05 22:22:30 ubuntu2204 sudo[26262]:  pam_unix(sudo:session): session closed for user nobody\nSep 05 22:22:30 ubuntu2204 hpcr-container[26262]:  Extracting done...\nSep 05 22:22:30 ubuntu2204 hpcr-container[26262]:  Extracting the ENV Contents...\nSep 05 22:22:30 ubuntu2204 hpcr-container[26262]:  Writing new env file /data1/compose/.env ...\nSep 05 22:22:30 ubuntu2204 hpcr-container[26262]:  Reading existing env file /data1/compose/.env ...\nSep 05 22:22:30 ubuntu2204 dockerd[26262]:  time=\"2023-09-05T22:22:30.270893886Z\" level=info msg=\"API listen on /run/docker.sock\"\nSep 05 22:22:30 ubuntu2204 hpcr-container-play[26262]:  HPL15004I: The pod started successfully.\nSep 05 22:22:30 ubuntu2204 hpcr-container-play[26262]:  HPL15006I: No pod definitions found.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  Finished Service that creates a set of containers.\nSep 05 22:22:30 ubuntu2204 hpcr-container[26262]:  Extracting of environment contents done\nSep 05 22:22:30 ubuntu2204 hpcr-container[26262]:  Check if docker is ready\nSep 05 22:22:30 ubuntu2204 hpcr-container[26262]:  docker-compose.yml file is present in the directory\nSep 05 22:22:30 ubuntu2204 hpcr-container[26262]:  Starting workload containers...\nSep 05 22:22:30 ubuntu2204 dockerd[26262]:  time=\"2023-09-05T22:22:30.471972387Z\" level=warning msg=\"reference for unknown type: \" digest=\"sha256:b0921f4009b33b926aeae931fef2b0536514e7a62ae013cee6c345b1ac7f11bb\" remote=\"quay.io/bsilliman/paynow@sha256:b0921f4009b33b926aeae931fef2b0536514e7a62ae013cee6c345b1ac7f11bb\"\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  var-lib-docker-overlay2-opaque\\x2dbug\\x2dcheck3647899609-merged.mount: Deactivated successfully.\nSep 05 22:22:30 ubuntu2204 systemd[26262]:  var-lib-containers-storage-overlay.mount: Deactivated successfully.\nSep 05 22:22:33 ubuntu2204 systemd[26262]:  dmesg.service: Deactivated successfully.\nSep 05 22:22:34 ubuntu2204 systemd[26262]:  var-lib-containers-storage-overlay.mount: Deactivated successfully.\nSep 05 22:22:34 ubuntu2204 systemd[26262]:  podman.service: Deactivated successfully.\nSep 05 22:22:35 ubuntu2204 verify-disk-encryption[26262]:  HPL13000I: Verify LUKS Encryption\nSep 05 22:22:35 ubuntu2204 systemd[26262]:  verify-disk-encryption-invoker.service: Deactivated successfully.\nSep 05 22:22:36 ubuntu2204 verify-disk-encryption[26262]:  Return value for disk-encrypt: 0\nSep 05 22:22:36 ubuntu2204 verify-disk-encryption[26262]:  Executed cmd: ('lsblk', '-b', '-n', '-o', 'NAME,SIZE')\nSep 05 22:22:36 ubuntu2204 verify-disk-encryption[26262]:  Return value: 0\nSep 05 22:22:36 ubuntu2204 verify-disk-encryption[26262]:  Stdout: vda                                           107374182400\nSep 05 22:22:36 ubuntu2204 verify-disk-encryption[26262]:  \u251c\u2500vda1                                          4292870144\nSep 05 22:22:36 ubuntu2204 verify-disk-encryption[26262]:  \u2514\u2500vda2                                        103079215104\nSep 05 22:22:36 ubuntu2204 verify-disk-encryption[26262]:    \u2514\u2500luks-655145dd-f4d0-4127-93ce-e1906a668299 103062437888\nSep 05 22:22:36 ubuntu2204 verify-disk-encryption[26262]:  vdb                                                 389120\nSep 05 22:22:36 ubuntu2204 verify-disk-encryption[26262]:  List of volumes greater than or equal to 10GB are: ['/dev/vda']\nSep 05 22:22:36 ubuntu2204 verify-disk-encryption[26262]:  Updated Volumes list: ['/dev/vda2']\nSep 05 22:22:36 ubuntu2204 verify-disk-encryption[26262]:  Executed cmd: ('lsblk', '/dev/vda2', '-b', '-n', '-o', 'NAME,MOUNTPOINT')\nSep 05 22:22:36 ubuntu2204 verify-disk-encryption[26262]:  Return value: 0\nSep 05 22:22:36 ubuntu2204 verify-disk-encryption[26262]:  Stdout: vda2\nSep 05 22:22:36 ubuntu2204 verify-disk-encryption[26262]:  \u2514\u2500luks-655145dd-f4d0-4127-93ce-e1906a668299 /\nSep 05 22:22:36 ubuntu2204 verify-disk-encryption[26262]:  Boot volume is /dev/vda2\nSep 05 22:22:36 ubuntu2204 verify-disk-encryption[26262]:  Volume /dev/vda2 has mount point /\nSep 05 22:22:36 ubuntu2204 verify-disk-encryption[26262]:  List of mounted volumes are: ['/dev/vda2']\nSep 05 22:22:36 ubuntu2204 verify-disk-encryption[26262]:  Verifying the boot disk /dev/vda2 is encrypted or not\nSep 05 22:22:36 ubuntu2204 verify-disk-encryption[26262]:  Executed cmd: ('lsblk', '/dev/vda2', '-b', '-n', '-o', 'NAME,TYPE')\nSep 05 22:22:36 ubuntu2204 verify-disk-encryption[26262]:  Return value: 0\nSep 05 22:22:36 ubuntu2204 verify-disk-encryption[26262]:  Stdout: vda2                                        part\nSep 05 22:22:36 ubuntu2204 verify-disk-encryption[26262]:  \u2514\u2500luks-655145dd-f4d0-4127-93ce-e1906a668299 crypt\nSep 05 22:22:36 ubuntu2204 verify-disk-encryption[26262]:  Executed cmd: ('cryptsetup', 'isLuks', '/dev/vda2')\nSep 05 22:22:36 ubuntu2204 verify-disk-encryption[26262]:  Return value: 0\nSep 05 22:22:36 ubuntu2204 verify-disk-encryption[26262]:  Executed cmd: ('cryptsetup', 'luksDump', '/dev/vda2')\nSep 05 22:22:36 ubuntu2204 verify-disk-encryption[26262]:  Return value: 0\nSep 05 22:22:36 ubuntu2204 verify-disk-encryption[26262]:  HPL13003I: Checked for mount point /, LUKS encryption with 1 key slot found\nSep 05 22:22:36 ubuntu2204 verify-disk-encryption[26262]:  HPL13001I: Boot volume and all the mounted data volumes are encrypted\nSep 05 22:22:51 ubuntu2204 systemd-udevd[26262]:  Using default interface naming scheme 'v249'.\nSep 05 22:22:51 ubuntu2204 networkd-dispatcher[26262]:  WARNING:Unknown index 4 seen, reloading interface list\nSep 05 22:22:51 ubuntu2204 systemd-networkd[26262]:  br-18668bffa6c4: Link UP\nSep 05 22:22:51 ubuntu2204 systemd[26262]:  var-lib-docker-overlay2-f3c1a612a8c718d9bedf6660b26f19d716c7209957913735e391abaf24f79bfe\\x2dinit-merged.mount: Deactivated successfully.\nSep 05 22:22:52 ubuntu2204 systemd-udevd[26262]:  Using default interface naming scheme 'v249'.\nSep 05 22:22:52 ubuntu2204 networkd-dispatcher[26262]:  WARNING:Unknown index 5 seen, reloading interface list\nSep 05 22:22:52 ubuntu2204 systemd-udevd[26262]:  Using default interface naming scheme 'v249'.\nSep 05 22:22:52 ubuntu2204 systemd-networkd[26262]:  veth5f369da: Link UP\nSep 05 22:22:52 ubuntu2204 kernel[26262]:  br-18668bffa6c4: port 1(veth5f369da) entered blocking state\nSep 05 22:22:52 ubuntu2204 kernel[26262]:  br-18668bffa6c4: port 1(veth5f369da) entered disabled state\nSep 05 22:22:52 ubuntu2204 kernel[26262]:  device veth5f369da entered promiscuous mode\nSep 05 22:22:52 ubuntu2204 dockerd[26262]:  time=\"2023-09-05T22:22:52.390932760Z\" level=info msg=\"No non-localhost DNS nameservers are left in resolv.conf. Using default external servers: [nameserver 8.8.8.8 nameserver 8.8.4.4]\"\nSep 05 22:22:52 ubuntu2204 dockerd[26262]:  time=\"2023-09-05T22:22:52.391093655Z\" level=info msg=\"IPv6 enabled; Adding default IPv6 external servers: [nameserver 2001:4860:4860::8888 nameserver 2001:4860:4860::8844]\"\nSep 05 22:22:52 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:52.444170398Z\" level=info msg=\"loading plugin \\\"io.containerd.internal.v1.shutdown\\\"...\" runtime=io.containerd.runc.v2 type=io.containerd.internal.v1\nSep 05 22:22:52 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:52.444224119Z\" level=info msg=\"loading plugin \\\"io.containerd.ttrpc.v1.pause\\\"...\" runtime=io.containerd.runc.v2 type=io.containerd.ttrpc.v1\nSep 05 22:22:52 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:52.444243857Z\" level=info msg=\"loading plugin \\\"io.containerd.event.v1.publisher\\\"...\" runtime=io.containerd.runc.v2 type=io.containerd.event.v1\nSep 05 22:22:52 ubuntu2204 containerd[26262]:  time=\"2023-09-05T22:22:52.444258768Z\" level=info msg=\"loading plugin \\\"io.containerd.ttrpc.v1.task\\\"...\" runtime=io.containerd.runc.v2 type=io.containerd.ttrpc.v1\nSep 05 22:22:52 ubuntu2204 systemd[26262]:  Started libcontainer container dc86fe6e55dae4e9803d3362e55ed084ee06c785e89bcd1dd547eb0e058cbfe1.\nSep 05 22:22:52 ubuntu2204 kernel[26262]:  eth0: renamed from veth8e0c9a3\nSep 05 22:22:53 ubuntu2204 systemd-networkd[26262]:  veth5f369da: Gained carrier\nSep 05 22:22:53 ubuntu2204 systemd-networkd[26262]:  br-18668bffa6c4: Gained carrier\nSep 05 22:22:53 ubuntu2204 kernel[26262]:  IPv6: ADDRCONF(NETDEV_CHANGE): veth5f369da: link becomes ready\nSep 05 22:22:53 ubuntu2204 kernel[26262]:  br-18668bffa6c4: port 1(veth5f369da) entered blocking state\nSep 05 22:22:53 ubuntu2204 kernel[26262]:  br-18668bffa6c4: port 1(veth5f369da) entered forwarding state\nSep 05 22:22:53 ubuntu2204 kernel[26262]:  IPv6: ADDRCONF(NETDEV_CHANGE): br-18668bffa6c4: link becomes ready\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  Docker Compose Logs:\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:   paynow Pulling\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  51f6de0debe6 Pulling fs layer\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  6404e912b557 Pulling fs layer\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  0561ee66ff6a Pulling fs layer\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  7a6c7ccf7cb5 Pulling fs layer\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Pulling fs layer\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  65a3fb6c13d7 Pulling fs layer\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  c9fe958b3ae4 Pulling fs layer\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  5c31cf8345fa Pulling fs layer\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  7b32651b0169 Pulling fs layer\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  0d117aef64cc Pulling fs layer\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  197acf2cade1 Pulling fs layer\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  d78e4d77283b Pulling fs layer\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  8b3975218acc Pulling fs layer\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  7a6c7ccf7cb5 Waiting\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Waiting\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  65a3fb6c13d7 Waiting\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  c9fe958b3ae4 Waiting\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  5c31cf8345fa Waiting\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  7b32651b0169 Waiting\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  0d117aef64cc Waiting\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  197acf2cade1 Waiting\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  d78e4d77283b Waiting\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  8b3975218acc Waiting\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  51f6de0debe6 Downloading [&gt;                                                  ]  540.7kB/53.28MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  51f6de0debe6 Downloading [=========&gt;                                         ]  9.697MB/53.28MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  6404e912b557 Downloading [&gt;                                                  ]  51.93kB/5.149MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  51f6de0debe6 Downloading [=================&gt;                                 ]  18.79MB/53.28MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  0561ee66ff6a Downloading [&gt;                                                  ]  110.1kB/10.77MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  6404e912b557 Downloading [=================&gt;                                 ]  1.767MB/5.149MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  51f6de0debe6 Downloading [========================&gt;                          ]  25.78MB/53.28MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  6404e912b557 Downloading [==================================================&gt;]  5.149MB/5.149MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  6404e912b557 Download complete\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  0561ee66ff6a Downloading [=========&gt;                                         ]  2.066MB/10.77MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  51f6de0debe6 Downloading [=================================&gt;                 ]  35.99MB/53.28MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  0561ee66ff6a Downloading [=====================&gt;                             ]  4.708MB/10.77MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  51f6de0debe6 Downloading [==========================================&gt;        ]  45.67MB/53.28MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  0561ee66ff6a Downloading [================================&gt;                  ]  6.891MB/10.77MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  51f6de0debe6 Verifying Checksum\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  51f6de0debe6 Download complete\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  0561ee66ff6a Downloading [=========================================&gt;         ]   8.96MB/10.77MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  51f6de0debe6 Extracting [&gt;                                                  ]  557.1kB/53.28MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  7a6c7ccf7cb5 Downloading [&gt;                                                  ]  540.7kB/54.06MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  0561ee66ff6a Verifying Checksum\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  0561ee66ff6a Download complete\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  51f6de0debe6 Extracting [===&gt;                                               ]  3.342MB/53.28MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  7a6c7ccf7cb5 Downloading [=======&gt;                                           ]  8.059MB/54.06MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  51f6de0debe6 Extracting [======&gt;                                            ]  6.685MB/53.28MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  7a6c7ccf7cb5 Downloading [=============&gt;                                     ]  15.02MB/54.06MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  51f6de0debe6 Extracting [========&gt;                                          ]   9.47MB/53.28MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  7a6c7ccf7cb5 Downloading [====================&gt;                              ]  21.96MB/54.06MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Downloading [&gt;                                                  ]  538.4kB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  51f6de0debe6 Extracting [===========&gt;                                       ]  12.26MB/53.28MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Downloading [=&gt;                                                 ]   3.75MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  65a3fb6c13d7 Downloading [======&gt;                                            ]     581B/4.203kB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  65a3fb6c13d7 Downloading [==================================================&gt;]  4.203kB/4.203kB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  65a3fb6c13d7 Verifying Checksum\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  65a3fb6c13d7 Download complete\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  7a6c7ccf7cb5 Downloading [=========================&gt;                         ]  27.85MB/54.06MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  51f6de0debe6 Extracting [=============&gt;                                     ]  14.48MB/53.28MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Downloading [===&gt;                                               ]  10.73MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  51f6de0debe6 Extracting [===============&gt;                                   ]  16.71MB/53.28MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  7a6c7ccf7cb5 Downloading [================================&gt;                  ]  34.85MB/54.06MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Downloading [====&gt;                                              ]  17.14MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  7a6c7ccf7cb5 Downloading [=====================================&gt;             ]  40.77MB/54.06MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  51f6de0debe6 Extracting [==================&gt;                                ]  20.05MB/53.28MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Downloading [======&gt;                                            ]  22.51MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  7a6c7ccf7cb5 Downloading [=========================================&gt;         ]  44.54MB/54.06MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  51f6de0debe6 Extracting [=====================&gt;                             ]   23.4MB/53.28MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  c9fe958b3ae4 Downloading [&gt;                                                  ]  475.1kB/46.04MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  51f6de0debe6 Extracting [========================&gt;                          ]  26.18MB/53.28MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  7a6c7ccf7cb5 Downloading [==============================================&gt;    ]  49.92MB/54.06MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  c9fe958b3ae4 Downloading [======&gt;                                            ]  6.134MB/46.04MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  7a6c7ccf7cb5 Verifying Checksum\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  7a6c7ccf7cb5 Download complete\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Downloading [=======&gt;                                           ]   26.8MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  51f6de0debe6 Extracting [==========================&gt;                        ]  27.85MB/53.28MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  c9fe958b3ae4 Downloading [===============&gt;                                   ]  14.14MB/46.04MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Downloading [=========&gt;                                         ]  33.23MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  51f6de0debe6 Extracting [===================================&gt;               ]  37.32MB/53.28MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  c9fe958b3ae4 Downloading [=======================&gt;                           ]  21.22MB/46.04MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Downloading [==========&gt;                                        ]  37.55MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  c9fe958b3ae4 Downloading [=========================&gt;                         ]   23.1MB/46.04MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  51f6de0debe6 Extracting [======================================&gt;            ]  40.67MB/53.28MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Downloading [============&gt;                                      ]  44.53MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  51f6de0debe6 Extracting [========================================&gt;          ]  42.89MB/53.28MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Downloading [===============&gt;                                   ]  53.66MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  51f6de0debe6 Extracting [========================================&gt;          ]  43.45MB/53.28MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Downloading [=================&gt;                                 ]  60.63MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  c9fe958b3ae4 Downloading [==========================&gt;                        ]  24.03MB/46.04MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Downloading [===================&gt;                               ]  68.69MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  c9fe958b3ae4 Downloading [=============================&gt;                     ]  26.86MB/46.04MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  51f6de0debe6 Extracting [=========================================&gt;         ]  44.01MB/53.28MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Downloading [======================&gt;                            ]  76.22MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  c9fe958b3ae4 Downloading [===================================&gt;               ]  32.52MB/46.04MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  51f6de0debe6 Extracting [===========================================&gt;       ]  46.24MB/53.28MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Downloading [========================&gt;                          ]  83.18MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  c9fe958b3ae4 Downloading [=======================================&gt;           ]  36.29MB/46.04MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  51f6de0debe6 Extracting [=============================================&gt;     ]  48.46MB/53.28MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Downloading [=========================&gt;                         ]  89.63MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  c9fe958b3ae4 Downloading [=============================================&gt;     ]  41.99MB/46.04MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  51f6de0debe6 Extracting [===============================================&gt;   ]  50.69MB/53.28MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Downloading [=============================&gt;                     ]  100.3MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  c9fe958b3ae4 Downloading [==============================================&gt;    ]  42.45MB/46.04MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Downloading [===============================&gt;                   ]  108.4MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  51f6de0debe6 Extracting [================================================&gt;  ]  51.81MB/53.28MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  c9fe958b3ae4 Verifying Checksum\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  c9fe958b3ae4 Download complete\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Downloading [==================================&gt;                ]  118.1MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  5c31cf8345fa Downloading [&gt;                                                  ]  23.84kB/2.277MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Downloading [====================================&gt;              ]  127.7MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  5c31cf8345fa Downloading [=====&gt;                                             ]    260kB/2.277MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  51f6de0debe6 Extracting [=================================================&gt; ]  52.36MB/53.28MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Downloading [========================================&gt;          ]  138.5MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  7b32651b0169 Downloading [==================================================&gt;]     452B/452B\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  7b32651b0169 Verifying Checksum\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  7b32651b0169 Download complete\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  5c31cf8345fa Downloading [================&gt;                                  ]  767.9kB/2.277MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  51f6de0debe6 Extracting [==================================================&gt;]  53.28MB/53.28MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Downloading [==========================================&gt;        ]  147.6MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  5c31cf8345fa Downloading [======================================&gt;            ]  1.763MB/2.277MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  5c31cf8345fa Verifying Checksum\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  5c31cf8345fa Download complete\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Downloading [=============================================&gt;     ]  157.2MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Downloading [================================================&gt;  ]  168.5MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Verifying Checksum\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Download complete\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  197acf2cade1 Downloading [====&gt;                                              ]     613B/6.827kB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  197acf2cade1 Downloading [==================================================&gt;]  6.827kB/6.827kB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  197acf2cade1 Verifying Checksum\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  197acf2cade1 Download complete\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  0d117aef64cc Downloading [==================================================&gt;]     126B/126B\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  0d117aef64cc Download complete\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  d78e4d77283b Downloading [&gt;                                                  ]   21.9kB/2.143MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  d78e4d77283b Verifying Checksum\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  d78e4d77283b Download complete\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  8b3975218acc Downloading [&gt;                                                  ]  9.583kB/902.5kB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  8b3975218acc Downloading [=============&gt;                                     ]  243.6kB/902.5kB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  8b3975218acc Verifying Checksum\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  8b3975218acc Download complete\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  51f6de0debe6 Pull complete\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  6404e912b557 Extracting [&gt;                                                  ]  65.54kB/5.149MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  6404e912b557 Extracting [====================================&gt;              ]  3.736MB/5.149MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  6404e912b557 Extracting [==================================================&gt;]  5.149MB/5.149MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  6404e912b557 Pull complete\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  0561ee66ff6a Extracting [&gt;                                                  ]  131.1kB/10.77MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  0561ee66ff6a Extracting [==============&gt;                                    ]  3.146MB/10.77MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  0561ee66ff6a Extracting [===============================================&gt;   ]  10.22MB/10.77MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  0561ee66ff6a Extracting [==================================================&gt;]  10.77MB/10.77MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  0561ee66ff6a Pull complete\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  7a6c7ccf7cb5 Extracting [&gt;                                                  ]  557.1kB/54.06MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  7a6c7ccf7cb5 Extracting [====&gt;                                              ]  4.456MB/54.06MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  7a6c7ccf7cb5 Extracting [=======&gt;                                           ]  8.356MB/54.06MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  7a6c7ccf7cb5 Extracting [==========&gt;                                        ]   11.7MB/54.06MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  7a6c7ccf7cb5 Extracting [=============&gt;                                     ]  15.04MB/54.06MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  7a6c7ccf7cb5 Extracting [================&gt;                                  ]  17.83MB/54.06MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  7a6c7ccf7cb5 Extracting [===================&gt;                               ]  20.61MB/54.06MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  7a6c7ccf7cb5 Extracting [=====================&gt;                             ]  22.84MB/54.06MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  7a6c7ccf7cb5 Extracting [=======================&gt;                           ]  25.62MB/54.06MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  7a6c7ccf7cb5 Extracting [==========================&gt;                        ]  28.41MB/54.06MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  7a6c7ccf7cb5 Extracting [============================&gt;                      ]   31.2MB/54.06MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  7a6c7ccf7cb5 Extracting [===============================&gt;                   ]  34.54MB/54.06MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  7a6c7ccf7cb5 Extracting [===================================&gt;               ]  37.88MB/54.06MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  7a6c7ccf7cb5 Extracting [======================================&gt;            ]  41.78MB/54.06MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  7a6c7ccf7cb5 Extracting [=========================================&gt;         ]  45.12MB/54.06MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  7a6c7ccf7cb5 Extracting [============================================&gt;      ]  48.46MB/54.06MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  7a6c7ccf7cb5 Extracting [==============================================&gt;    ]  50.69MB/54.06MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  7a6c7ccf7cb5 Extracting [================================================&gt;  ]  52.92MB/54.06MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  7a6c7ccf7cb5 Extracting [=================================================&gt; ]  53.48MB/54.06MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  7a6c7ccf7cb5 Extracting [==================================================&gt;]  54.06MB/54.06MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  7a6c7ccf7cb5 Pull complete\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [&gt;                                                  ]  557.1kB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [=&gt;                                                 ]  3.899MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [==&gt;                                                ]  7.242MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [===&gt;                                               ]  11.14MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [===&gt;                                               ]  12.26MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [====&gt;                                              ]  14.48MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [====&gt;                                              ]  16.15MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [=====&gt;                                             ]  17.83MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [=====&gt;                                             ]   19.5MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [======&gt;                                            ]  21.17MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [=======&gt;                                           ]  25.07MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [========&gt;                                          ]  28.97MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [=========&gt;                                         ]  32.31MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [==========&gt;                                        ]  36.21MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [===========&gt;                                       ]  39.55MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [============&gt;                                      ]  42.34MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [=============&gt;                                     ]  46.24MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [==============&gt;                                    ]  50.14MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [===============&gt;                                   ]  52.36MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [===============&gt;                                   ]  55.15MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [=================&gt;                                 ]  59.05MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [==================&gt;                                ]  62.39MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [===================&gt;                               ]  65.73MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [===================&gt;                               ]  69.07MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [====================&gt;                              ]  72.42MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [=====================&gt;                             ]  75.76MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [======================&gt;                            ]   79.1MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [========================&gt;                          ]     83MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [=========================&gt;                         ]   86.9MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [==========================&gt;                        ]   90.8MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [===========================&gt;                       ]   94.7MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [============================&gt;                      ]   98.6MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [=============================&gt;                     ]  101.9MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [==============================&gt;                    ]  105.3MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [===============================&gt;                   ]  108.6MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [================================&gt;                  ]  110.9MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [================================&gt;                  ]    112MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [================================&gt;                  ]  113.6MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [=================================&gt;                 ]  116.4MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [==================================&gt;                ]  119.8MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [===================================&gt;               ]  123.1MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [====================================&gt;              ]  126.5MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [=====================================&gt;             ]  129.2MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [=======================================&gt;           ]  135.4MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [=========================================&gt;         ]  144.8MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [============================================&gt;      ]  153.2MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [=============================================&gt;     ]  157.1MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [==============================================&gt;    ]  160.4MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [===============================================&gt;   ]  163.2MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [================================================&gt;  ]    166MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [================================================&gt;  ]  169.3MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [=================================================&gt; ]    171MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [=================================================&gt; ]  172.7MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Extracting [==================================================&gt;]  172.8MB/172.8MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  2854c5c8fd87 Pull complete\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  65a3fb6c13d7 Extracting [==================================================&gt;]  4.203kB/4.203kB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  65a3fb6c13d7 Extracting [==================================================&gt;]  4.203kB/4.203kB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  65a3fb6c13d7 Pull complete\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  c9fe958b3ae4 Extracting [&gt;                                                  ]  491.5kB/46.04MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  c9fe958b3ae4 Extracting [====&gt;                                              ]  3.932MB/46.04MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  c9fe958b3ae4 Extracting [========&gt;                                          ]  7.373MB/46.04MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  c9fe958b3ae4 Extracting [===========&gt;                                       ]  10.81MB/46.04MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  c9fe958b3ae4 Extracting [===============&gt;                                   ]  14.25MB/46.04MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  c9fe958b3ae4 Extracting [===================&gt;                               ]  17.69MB/46.04MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  c9fe958b3ae4 Extracting [=======================&gt;                           ]  21.63MB/46.04MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  c9fe958b3ae4 Extracting [============================&gt;                      ]  26.05MB/46.04MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  c9fe958b3ae4 Extracting [================================&gt;                  ]  29.49MB/46.04MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  c9fe958b3ae4 Extracting [===================================&gt;               ]  32.93MB/46.04MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  c9fe958b3ae4 Extracting [======================================&gt;            ]  35.39MB/46.04MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  c9fe958b3ae4 Extracting [========================================&gt;          ]  37.36MB/46.04MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  c9fe958b3ae4 Extracting [==========================================&gt;        ]  39.32MB/46.04MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  c9fe958b3ae4 Extracting [===========================================&gt;       ]   40.3MB/46.04MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  c9fe958b3ae4 Extracting [=============================================&gt;     ]  41.78MB/46.04MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  c9fe958b3ae4 Extracting [===============================================&gt;   ]  43.75MB/46.04MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  c9fe958b3ae4 Extracting [================================================&gt;  ]  44.73MB/46.04MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  c9fe958b3ae4 Extracting [=================================================&gt; ]  45.71MB/46.04MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  c9fe958b3ae4 Extracting [==================================================&gt;]  46.04MB/46.04MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  c9fe958b3ae4 Pull complete\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  5c31cf8345fa Extracting [&gt;                                                  ]  32.77kB/2.277MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  5c31cf8345fa Extracting [================================================&gt;  ]  2.195MB/2.277MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  5c31cf8345fa Extracting [==================================================&gt;]  2.277MB/2.277MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  5c31cf8345fa Pull complete\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  7b32651b0169 Extracting [==================================================&gt;]     452B/452B\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  7b32651b0169 Extracting [==================================================&gt;]     452B/452B\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  7b32651b0169 Pull complete\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  0d117aef64cc Extracting [==================================================&gt;]     126B/126B\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  0d117aef64cc Extracting [==================================================&gt;]     126B/126B\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  0d117aef64cc Pull complete\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  197acf2cade1 Extracting [==================================================&gt;]  6.827kB/6.827kB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  197acf2cade1 Extracting [==================================================&gt;]  6.827kB/6.827kB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  197acf2cade1 Pull complete\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  d78e4d77283b Extracting [&gt;                                                  ]  32.77kB/2.143MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  d78e4d77283b Extracting [=========================&gt;                         ]  1.114MB/2.143MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  d78e4d77283b Extracting [==================================================&gt;]  2.143MB/2.143MB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  d78e4d77283b Pull complete\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  8b3975218acc Extracting [=&gt;                                                 ]  32.77kB/902.5kB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  8b3975218acc Extracting [==================================================&gt;]  902.5kB/902.5kB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  8b3975218acc Extracting [==================================================&gt;]  902.5kB/902.5kB\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  8b3975218acc Pull complete\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  paynow Pulled\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  Network compose_default  Creating\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  Network compose_default  Created\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  Container compose-paynow-1  Creating\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  Container compose-paynow-1  Created\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  Container compose-paynow-1  Starting\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  Container compose-paynow-1  Started\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  Docker compose result:\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:   CONTAINER ID   IMAGE                      COMMAND                  CREATED         STATUS                  PORTS                                       NAMES\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  dc86fe6e55da   quay.io/bsilliman/paynow   \"docker-entrypoint.s\u2026\"   2 seconds ago   Up Less than a second   0.0.0.0:8443-&gt;8443/tcp, :::8443-&gt;8443/tcp   compose-paynow-1\nSep 05 22:22:53 ubuntu2204 hpcr-container[26262]:  Container service completed successfully\nSep 05 22:22:53 ubuntu2204 systemd[26262]:  Finished Service that creates a set of containers.\nSep 05 22:22:53 ubuntu2204 systemd[26262]:  Reached target Workload is up and running..\nSep 05 22:22:53 ubuntu2204 systemd[26262]:  Starting Phase2 Catch Service...\nSep 05 22:22:53 ubuntu2204 hpcr-catch-success[26262]:  VSI has started successfully.\nSep 05 22:22:53 ubuntu2204 hpcr-catch-success[26262]:  HPL10001I: Services succeeded -&gt; systemd triggered hpl-catch-success service\nSep 05 22:22:53 ubuntu2204 systemd[26262]:  Finished Phase2 Catch Service.\nSep 05 22:22:53 ubuntu2204 systemd[26262]:  Reached target Multi-User System.\nSep 05 22:22:53 ubuntu2204 systemd[26262]:  Starting Record Runlevel Change in UTMP...\nSep 05 22:22:53 ubuntu2204 systemd[26262]:  systemd-update-utmp-runlevel.service: Deactivated successfully.\nSep 05 22:22:53 ubuntu2204 systemd[26262]:  Finished Record Runlevel Change in UTMP.\nSep 05 22:22:53 ubuntu2204 systemd[26262]:  Startup finished in 28.387s (kernel) + 25.442s (userspace) = 53.830s.\nSep 05 22:22:53 ubuntu2204 compose-paynow-1[26262]:  \nSep 05 22:22:53 ubuntu2204 compose-paynow-1[26262]:  &gt; hyper-protect-pay-now@1.0.0 start\nSep 05 22:22:53 ubuntu2204 compose-paynow-1[26262]:  &gt; node app.js\nSep 05 22:22:53 ubuntu2204 compose-paynow-1[26262]:  \nSep 05 22:22:54 ubuntu2204 systemd-networkd[26262]:  br-18668bffa6c4: Gained IPv6LL\nSep 05 22:22:54 ubuntu2204 systemd-networkd[26262]:  veth5f369da: Gained IPv6LL\n</code></pre> <p>Please click the Next link at the bottom right of the page to continue with the lab.</p>"},{"location":"lab/paynow/launchKVMguest/","title":"Start Ubuntu KVM Guest","text":""},{"location":"lab/paynow/launchKVMguest/#overview-of-this-page","title":"Overview of this page","text":"<p>This page will help you verify that your jumpbox is configured properly and then guide you to logging in to the RHEL Host from which you will start your student-assigned KVM standard Ubuntu guest.</p>"},{"location":"lab/paynow/launchKVMguest/#verify-the-student-specific-environment-variables-on-your-jumpbox","title":"Verify the student-specific environment variables on your jumpbox","text":"<p>You will first ensure that two crucial environment variables are set on your jumpbox.  Under most circumstances, the instructors will have already set these variables for you.  These variables will enable you to enter all of the commands in this lab without modification- where student-specific information is required in a command, the command will contain environment variables that will be resolved with the student-specific information. </p> <p>Environment variables are set in three places:</p> <ol> <li> <p>On your jumpbox.  In most cases, the instructors will have configured your jumpbox with your student-specific environment variables</p> </li> <li> <p>You will have a userid on the RHEL host, and this userid has been configured with student-specific environment variables </p> </li> <li> <p>You will have your own KVM standard guest running Ubuntu, and this guest is also configured with student-specific environment variables</p> </li> </ol>"},{"location":"lab/paynow/launchKVMguest/#verify-the-environment-variable-on-your-jumpbox-for-your-student-id","title":"Verify the environment variable on your jumpbox for your student ID","text":"<p>The instructors should have guided you through the process of obtaining a RHEL Jumpbox where you will perform the lab.</p> <p>Note</p> <p>The jumpbox is running the RHEL operating system, but the OS on the jumpbox is largely irrelevant, and in order to avoid confusion with the RHEL host (the Linux LPAR on the IBM z15 server in the Washington Systems Center data center in Herndon, Virgina, USA) that you will use during the lab, we will drop the 'RHEL' and refer to the RHEL jumpbox as just jumpbox from now on.</p> <p>On your jumpbox, open a terminal window.  You can do this by clicking on Activities in the upper left corner of your jumpbox and then clicking the icon that looks like a terminal window.  This will bring up a window using the RHEL Host terminal profile, so your terminal window should have a dark background with a green prompt for the font, similar to the image shown in the previous section of the lab.  You will use this window to perform work on the RHEL host, but before logging in you will ensure that an environment variable specifying your unique student ID has been set properly.</p> <p>Each student has a unique userid assigned to them. It is likely set for you already. In an instructor-led class, your instructors will let you know if this has been set for you already.</p> <p>Check this by entering this echo command:</p> <pre><code>echo ${StudentID}\n</code></pre> Example output for student02 [click to expand me] <pre><code>silliman@nat-147 ~ % echo ${StudentID}\nstudent02\n</code></pre> <p>If a value starting with student and ending with a two-digit number is returned to you, then your jumpbox has been configured properly and you may continue in the lab.  If you are not shown this value then please ask your lab instructor or demo guide for assistance.</p>"},{"location":"lab/paynow/launchKVMguest/#log-in-to-the-rhel-85-host","title":"Log in to the RHEL 8.5 host","text":"<p>You will now sign into our z15 LPAR running Red Hat Enterprise Linux 8.5.  This is a system that has been enabled for Secure Execution and so can run workloads provisioned with IBM Hyper Protect Virtual Servers 2.1.6.  </p> <p>Use your terminal tab or window set aside for doing work on the RHEL host- the one that (by default) looks like this:</p> <p></p> <p>Run this command:</p> <pre><code>ssh -l ${StudentID} 192.168.22.64\n</code></pre> <p>One of two things should happen:  </p> <p>a. If you are on an instructor-provided system and the instructors have had the time to load it with an appropriate RSA private key that matches an RSA public key that has been loaded into your assigned userid's account on the RHEL host:</p> <ul> <li>you will be able to sign in without a password!</li> </ul> <p>OR</p> <p>b. If you are not on an instructor-provided system or we did not have a chance to load the parts of the RSA key pair in the appropriate locations</p> <ul> <li>you will be prompted to enter a password.  Your instructor will provide you a password by some clandestine means, surely we're not going to put it on a page on the Internet !</li> </ul> Example messages upon login [Click me] <pre><code>*\n*  IBM Washington Systems Center (WSC)   .....\n*    IBM Z and LinuxONE                 C C  /\n*                                      /&lt;   /\n*                       ___ __________/_#__=o\n*                      /(- /(\\_\\________   \\\n*                      \\ ) \\ )_      \\o     \\\n*                      /|\\ /|\\       |'     |\n*                                    |     _|\n*  Red Hat Enterprise Linux 8.5      /o   __\\\n*                                   / '     |\n*                                  / /      |\n*                                 /_/\\______|\n*                                (   _(    &lt;\n*  KVM Hypervisor for Blockchain  \\    \\    \\\n*       and Hyper Protect          \\    \\    \\\n*       and Digital Assets          \\____\\____\\\n*    on IBM Z and LinuxONE        ____\\_\\__\\_\\\n*                                /`   /`     o\\\n*           \"It's alive!\"        |___ |_______|..o-o-o-(#)\n*\nActivate the web console with: systemctl enable --now cockpit.socket\n\nRegister this system with Red Hat Insights: insights-client --register\nCreate an account or view all your systems at https://red.ht/insights-dashboard\nLast login: Mon Feb 13 16:50:14 2023 from 192.168.215.147\n[student02@bczkvm(192.168.22.64) ~ [19:11:51] (0)]$ \n</code></pre>"},{"location":"lab/paynow/launchKVMguest/#start-your-ubuntu-kvm-guest","title":"Start your Ubuntu KVM guest","text":"<p>A KVM Guest has been defined for each student by the instructors.  This guest has the Ubuntu 22.04.2 operating system installed on it.  A very straightforward installation path was taken with no additional software packages selected during the installation. You will add additional software packages as necessary during the lab. This guest does not take advantage of the additional protection offered by Secure Execution and HPVS.  It could have, but you will already be creating another KVM Guest that is protected by Secure Execution and HPVS.  This also helps to make the point that you can run \"standard\", i.e., non-Secure Execution-protected guests, and Secure Execution-protected guests on the same LPAR.</p> <p>Display your KVM guest's definition with this command:</p> <pre><code>sudo virsh dumpxml $(whoami)\n</code></pre> <p>We named your Ubuntu KVM guest the same as your userid on the RHEL host, which is why you can use the <code>whoami</code> command.</p> Example virsh dumpxml output [Click me] <pre><code>&lt;domain type='kvm'&gt;\n  &lt;name&gt;student02&lt;/name&gt;\n  &lt;uuid&gt;531199d9-3671-424e-a9c9-74ff5ca3980b&lt;/uuid&gt;\n  &lt;memory unit='KiB'&gt;2097152&lt;/memory&gt;\n  &lt;currentMemory unit='KiB'&gt;2097152&lt;/currentMemory&gt;\n  &lt;vcpu placement='static'&gt;2&lt;/vcpu&gt;\n  &lt;os&gt;\n    &lt;type arch='s390x' machine='s390-ccw-virtio-rhel8.6.0'&gt;hvm&lt;/type&gt;\n    &lt;boot dev='hd'/&gt;\n  &lt;/os&gt;\n  &lt;cpu mode='host-model' check='partial'/&gt;\n  &lt;clock offset='utc'/&gt;\n  &lt;on_poweroff&gt;destroy&lt;/on_poweroff&gt;\n  &lt;on_reboot&gt;restart&lt;/on_reboot&gt;\n  &lt;on_crash&gt;destroy&lt;/on_crash&gt;\n  &lt;devices&gt;\n    &lt;emulator&gt;/usr/libexec/qemu-kvm&lt;/emulator&gt;\n    &lt;disk type='file' device='disk'&gt;\n      &lt;driver name='qemu' type='qcow2'/&gt;\n      &lt;source file='/var/lib/libvirt/images/hpvslab/student02/student02-ubuntu22.04.qcow2'/&gt;\n      &lt;target dev='vda' bus='virtio'/&gt;\n      &lt;address type='ccw' cssid='0xfe' ssid='0x0' devno='0x0000'/&gt;\n    &lt;/disk&gt;\n    &lt;disk type='file' device='cdrom'&gt;\n      &lt;driver name='qemu' type='raw'/&gt;\n      &lt;target dev='sda' bus='scsi'/&gt;\n      &lt;readonly/&gt;\n      &lt;address type='drive' controller='0' bus='0' target='0' unit='0'/&gt;\n    &lt;/disk&gt;\n    &lt;controller type='scsi' index='0' model='virtio-scsi'&gt;\n      &lt;address type='ccw' cssid='0xfe' ssid='0x0' devno='0x0002'/&gt;\n    &lt;/controller&gt;\n    &lt;controller type='pci' index='0' model='pci-root'/&gt;\n    &lt;controller type='virtio-serial' index='0'&gt;\n      &lt;address type='ccw' cssid='0xfe' ssid='0x0' devno='0x0003'/&gt;\n    &lt;/controller&gt;\n    &lt;interface type='network'&gt;\n      &lt;mac address='52:54:00:67:e5:c1'/&gt;\n      &lt;source network='default'/&gt;\n      &lt;model type='virtio'/&gt;\n      &lt;address type='ccw' cssid='0xfe' ssid='0x0' devno='0x0001'/&gt;\n    &lt;/interface&gt;\n    &lt;console type='pty'&gt;\n      &lt;target type='sclp' port='0'/&gt;\n    &lt;/console&gt;\n    &lt;channel type='unix'&gt;\n      &lt;target type='virtio' name='org.qemu.guest_agent.0'/&gt;\n      &lt;address type='virtio-serial' controller='0' bus='0' port='1'/&gt;\n    &lt;/channel&gt;\n    &lt;audio id='1' type='none'/&gt;\n    &lt;memballoon model='virtio'&gt;\n      &lt;address type='ccw' cssid='0xfe' ssid='0x0' devno='0x0004'/&gt;\n    &lt;/memballoon&gt;\n    &lt;panic model='s390'/&gt;\n  &lt;/devices&gt;\n&lt;/domain&gt;\n</code></pre> <p>Look for the your userid in the output of the virsh dumpxml command.  You'll see it in two places- at the top where it names your guest, and then within the filepath and filename of the qcow2 image that provides your KVM guest.  </p> <p>Run this command to start your Ubuntu KVM guest:</p> <pre><code>sudo virsh start $(whoami)\n</code></pre> Expected output (for student02)  <pre><code>Domain 'student02' started\n</code></pre> Your domain (i.e., your KVM guest) has startedYour domain didn't start for whatever reason <p>You are off to a smashing start! </p> <p>Continue to the next section of the lab where you'll be directed to open a new terminal window or tab using the terminal profile named KVM Standard Guest. and given considerations for whether to create a new window or a new tab- it is a matter of personal preference. Throughout the remainder of the lab you'll be directed to use this new tab or window when doing work on your KVM Ubuntu guest and you'll be directed to use your original terminal tab or window when doing work on the RHEL host. </p> <p>You have departed from the happy path... </p> <p>Please ask your instructor for help.</p> <p>Please click the Next link at the lower right of this page to continue to the next section of the lab.</p>"},{"location":"lab/paynow/runOCIimage/","title":"Run OCI image","text":"<p>You will be performing this section from your Ubuntu KVM guest. </p> <p>Your window or tab should like like this (unless you customized the profile we provided you):</p> <p></p>"},{"location":"lab/paynow/runOCIimage/#list-your-oci-image","title":"List your OCI image","text":"<p>Run this command to see the OCI image that you created, as well as an image (node:19) that was pulled down and used as the base image of your paynow:latest image:</p> <pre><code>docker images\n</code></pre> <p>Your output will look like this: </p> Example output <pre><code>REPOSITORY   TAG       IMAGE ID       CREATED              SIZE\npaynow       latest    fd801119534e   About a minute ago   934MB\nnode         19        f2e8386523b1   3 months ago         926MB\n</code></pre> <p>Run the OCI image:</p> <pre><code>docker run -it -p 8443:8443 paynow\n</code></pre> <p>You will see output like this:</p> Output from starting PayNow app <pre><code>&gt; hyper-protect-pay-now@1.0.0 start\n&gt; node app.js\n</code></pre> <p>Please click Next on the bottom right of the page to continue.</p>"},{"location":"lab/paynow/tryToFindSensitiveData/","title":"Try to find sensitive data in core dump","text":""},{"location":"lab/paynow/tryToFindSensitiveData/#switch-to-your-rhel-host-terminal-session","title":"Switch to your RHEL host terminal session","text":"<p>Switch to your terminal tab or window for your RHEL host session:</p> <p></p> <p>Switch to your home directory:</p> <pre><code>cd ${HOME} </code></pre> <p>Take a core dump of your HPVS KVM guest running the PayNow demo:</p> <pre><code>sudo /usr/local/bin/gcoreMyPaynowGuest.sh\n</code></pre> Sample output from dumping your HPVS KVM guest <pre><code>my PayNow HPVS guest Pid is 3200448\n[New LWP 3200500]\n[New LWP 3200505]\n[New LWP 3200506]\n[New LWP 3200507]\n[New LWP 3201027]\n[New LWP 3201028]\n[New LWP 3201029]\n[New LWP 3201030]\n[New LWP 3201031]\n[New LWP 3201032]\n[New LWP 3201033]\n[New LWP 3201034]\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib64/libthread_db.so.1\".\n0x000003ff8e1711f4 in ppoll () from target:/lib64/libc.so.6\nSaved corefile core.3200448\n[Inferior 1 (process 3200448) detached]\n</code></pre> <p>Optional: Display the contents of the script you just ran if you are curious as to how it worked:</p> <pre><code>cat /usr/local/bin/gcoreMyPaynowGuest.sh\n</code></pre> Contents of the gcoreMyPaynowGuest.sh script <pre><code>#!/bin/sh\n\nmyPid=$(ps aux | grep qemu | grep guest=paynowse$(temp=${SUDO_USER} &amp;&amp; echo ${temp: -2}) | awk '{print $2}')\n\necho my PayNow HPVS guest Pid is ${myPid}\n\n/opt/rh/gcc-toolset-9/root/usr/bin/gcore ${myPid} 2&gt;/dev/null\n\nchown ${SUDO_USER}:hpvs_students /home/${SUDO_USER}/core.${myPid}\n</code></pre> <p>The script runs with root authority-  it lists processes, grabs the process ID for your HPVS guest running PayNow, takes a core (memory) dump of the process, and then assigns your userid ownership of the dump file.</p> <p>Set an environment variable for the process ID for your Ubuntu KVM guest.  The script you ran did this as well but it was only set for the duration of the script execution, so you need to do it again:</p> <pre><code>myHPVSPaynowPid=$(ps aux | grep qemu | grep paynowse$(temp=$(whoami) &amp;&amp; echo ${temp: -2}) | awk '{print $2}')\necho My HPVS Guest for PayNow demo process id is ${myHPVSPaynowPid}\n</code></pre> <p>Attempt to pick out sensitive credit information from the core dump:</p> <pre><code>strings core.${myHPVSPaynowPid} | grep creditCard\n</code></pre> <p>In contrast to what you saw when performing the above procedure against a standard KVM guest that was running the PayNow demo app, this time you do not see any sensitive data, due to the protection offered by Hyper Protect Virtual Servers 2.1.6!! You are protected from malicious insider attacks!</p> <p>Please click the Next button at the lower right of the page in order to perform lab cleanup.</p>"},{"location":"lab/paynow/useHPVSWebApp/","title":"Use the HPVS-based PayNow demo app","text":"<p>In your RHEL host terminal session, enter this command:</p> <pre><code>echo https://192.168.22.64:${Student_HPVS_PayNow_Port} </code></pre> <p>This will fill out the URL with your student specific port for your HPVS Guest that runs the PayNow demo, which you just started up in the previous section. Your port has been specified in an environment variable specified in your RHEL host login id's profile. It should be a number from 29444 to 29463. The formula is <code>29443 plus the two digit suffix of your RHEL host login id</code>. </p> <p>Right-click on the completed URL and choose Open Link and it will open up the PayNow demo in another tab in your Firefox browser on your jumpbox.</p> <p>The demo uses a self-signed X509 certificate which your browser will not recognize, so you will have to \"click through\" any warnings that appear. For a \"real world\", production application, this would not be an acceptable setup, but it is okay for the purposes of this demo app-  the certificate will provide encryption of data that travels through the network, it just doesn't have the pre-established trust from your browser that it would have if it had been signed by a certificate authority that your browser or operating system was configured to trust.</p> <p>This is the exact same application that you already worked with in a regular KVM guest, so the user interface is the same.  Add one or more fake payments-  if you need a refresher on using the UI, continue to read the below paragraphs which are repeats from a previous section when you used the app in your standard KVM guest.</p> <p>Click either the PayNow link at the top right of the page or the PayNow button in the middle of the page.</p> <p>You will be shown a \"Payment Form\" that has fields to enter a name, email address, credit card number, CVV, and amount, respectively. You can, and should,  enter fake values for everything.  Just enter any 16 digits for credit card number and any 3 digits for CVV.  Click the \"Pay Now\" button just underneath the payment amount field.</p> <p>You will see a new icon underneath that contains the name and payment amount you entered, and a randomly chosen picture displayed underneath-  you may find that the picture shown under your name is radically different from what you look like in real life.  Note that these pictures are randomly chosen each time the page refreshes.  </p> <p>Feel free to add another payment or two-  one is really enough for demo purposes, but it won't cause harm to enter more than one payment.</p> <p>Click the Next link at the bottom right of this page to continue with the lab.</p>"},{"location":"lab/paynow/useWebApp/","title":"Use the PayNow demo app","text":"<p>In your KVM Standard Guest session, enter this command:</p> <pre><code>echo https://192.168.22.64:${Student_PayNow_Port} </code></pre> <p>This will fill out the URL with your student specific port for your PayNow demo that you just started up in the previous section. Your port has been specified in an environment variable specified in your guest's login profile. It should be a number from 28444 to 28463. For those who like arithmetic, the formula is <code>28443 plus the two digit suffix of your RHEL host login id</code>. </p> <p>Right-click on the completed URL and choose Open Link and it will open up the PayNow demo in another tab in your Firefox browser on your jumpbox.</p> <p>The demo uses a self-signed X509 certificate which your browser will not recognize, so you will have to \"click through\" any warnings that appear. For a \"real world\", production application, this would not be an acceptable setup, but it is okay for the purposes of this demo app-  the certificate will provide encryption of data that travels through the network, it just doesn't have the pre-established trust from your browser that it would have if it had been signed by a certificate authority that your browser or operating system was configured to trust.</p> <p>Click either the PayNow link at the top right of the page or the PayNow button in the middle of the page.</p> <p>You will be shown a \"Payment Form\" that has fields to enter a name, email address, credit card number, CVV, and amount, respectively. You can, and should,  enter fake values for everything.  Just enter any 16 digits for credit card number and any 3 digits for CVV.  Click the \"Pay Now\" button just underneath the payment amount field.</p> <p>You will see a new icon underneath that contains the name and payment amount you entered, and a randomly chosen picture displayed underneath-  you may find that the picture shown under your name is radically different from what you look like in real life.  (I told you to use a fake name!).  Note that these pictures are randomly chosen each time the page refreshes.  (Did I mention that this is just a demo?)</p> <p>Feel free to add another payment or two-  one is really enough for demo purposes, but it won't cause harm to enter more than one payment.</p> <p>Click the Next link at the bottom right of this page to continue with the lab.</p>"}]}